
test_aes_f303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08003978  08003978  00013978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f58  08003f58  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08003f58  08003f58  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f58  08003f58  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f58  08003f58  00013f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f5c  08003f5c  00013f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08003f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  2000002c  08003f8c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08003f8c  00020138  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b69d  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b7e  00000000  00000000  0002b6f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  0002d278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  0002d9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dcae  00000000  00000000  0002e040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8b3  00000000  00000000  0004bcee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af816  00000000  00000000  000595a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d5  00000000  00000000  00108db7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bb0  00000000  00000000  00108e8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003960 	.word	0x08003960

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08003960 	.word	0x08003960

080001c8 <STM32_AES_CTR_Encrypt>:
 */
int32_t STM32_AES_CTR_Encrypt(uint8_t *InputMessage,
	uint32_t InputMessageLength, uint8_t *AES128_Key,
	uint8_t *InitializationVector, uint32_t IvLength,
	uint8_t *OutputMessage, uint32_t *OutputMessageLength)
    {
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	b0cf      	sub	sp, #316	; 0x13c
 80001cc:	af02      	add	r7, sp, #8
 80001ce:	f107 040c 	add.w	r4, r7, #12
 80001d2:	6020      	str	r0, [r4, #0]
 80001d4:	f107 0008 	add.w	r0, r7, #8
 80001d8:	6001      	str	r1, [r0, #0]
 80001da:	1d39      	adds	r1, r7, #4
 80001dc:	600a      	str	r2, [r1, #0]
 80001de:	463a      	mov	r2, r7
 80001e0:	6013      	str	r3, [r2, #0]
    AESCTRctx_stt AESctx;

    uint32_t error_status = AES_SUCCESS;
 80001e2:	2300      	movs	r3, #0
 80001e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    int32_t outputLength = 0;
 80001e8:	f107 0310 	add.w	r3, r7, #16
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]

    /* Set flag field to default value */
    AESctx.mFlags = E_SK_DEFAULT;
 80001f0:	f107 0314 	add.w	r3, r7, #20
 80001f4:	2200      	movs	r2, #0
 80001f6:	711a      	strb	r2, [r3, #4]

    /* Set key size to 16 (corresponding to AES-128) */
    AESctx.mKeySize = 16;
 80001f8:	f107 0314 	add.w	r3, r7, #20
 80001fc:	2210      	movs	r2, #16
 80001fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set iv size field to IvLength*/
    AESctx.mIvSize = IvLength;
 8000200:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000204:	f107 0314 	add.w	r3, r7, #20
 8000208:	611a      	str	r2, [r3, #16]

    /* Initialize the operation, by passing the key.
     * Third parameter is NULL because CTR doesn't use any IV */
    error_status = AES_CTR_Encrypt_Init(&AESctx, AES128_Key,
 800020a:	463a      	mov	r2, r7
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	f107 0014 	add.w	r0, r7, #20
 8000212:	6812      	ldr	r2, [r2, #0]
 8000214:	6819      	ldr	r1, [r3, #0]
 8000216:	f003 f84b 	bl	80032b0 <AES_CTR_Encrypt_Init>
 800021a:	4603      	mov	r3, r0
 800021c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	    InitializationVector);

    /* check for initialization errors */
    if (error_status == AES_SUCCESS)
 8000220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000224:	2b00      	cmp	r3, #0
 8000226:	d136      	bne.n	8000296 <STM32_AES_CTR_Encrypt+0xce>
	{
	/* Encrypt Data */
	error_status = AES_CTR_Encrypt_Append(&AESctx, InputMessage,
 8000228:	f107 0308 	add.w	r3, r7, #8
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	f107 010c 	add.w	r1, r7, #12
 8000232:	f107 0014 	add.w	r0, r7, #20
 8000236:	f107 0310 	add.w	r3, r7, #16
 800023a:	9300      	str	r3, [sp, #0]
 800023c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000240:	6809      	ldr	r1, [r1, #0]
 8000242:	f003 f883 	bl	800334c <AES_CTR_Encrypt_Append>
 8000246:	4603      	mov	r3, r0
 8000248:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		InputMessageLength, OutputMessage, &outputLength);

	if (error_status == AES_SUCCESS)
 800024c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000250:	2b00      	cmp	r3, #0
 8000252:	d120      	bne.n	8000296 <STM32_AES_CTR_Encrypt+0xce>
	    {
	    /* Write the number of data written*/
	    *OutputMessageLength = outputLength;
 8000254:	f107 0310 	add.w	r3, r7, #16
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	461a      	mov	r2, r3
 800025c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000260:	601a      	str	r2, [r3, #0]
	    /* Do the Finalization */
	    error_status = AES_CTR_Encrypt_Finish(&AESctx,
		    OutputMessage + *OutputMessageLength, &outputLength);
 8000262:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000266:	681b      	ldr	r3, [r3, #0]
	    error_status = AES_CTR_Encrypt_Finish(&AESctx,
 8000268:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800026c:	18d1      	adds	r1, r2, r3
 800026e:	f107 0210 	add.w	r2, r7, #16
 8000272:	f107 0314 	add.w	r3, r7, #20
 8000276:	4618      	mov	r0, r3
 8000278:	f003 fada 	bl	8003830 <AES_CTR_Encrypt_Finish>
 800027c:	4603      	mov	r3, r0
 800027e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	    /* Add data written to the information to be returned */
	    *OutputMessageLength += outputLength;
 8000282:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f107 0210 	add.w	r2, r7, #16
 800028c:	6812      	ldr	r2, [r2, #0]
 800028e:	441a      	add	r2, r3
 8000290:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000294:	601a      	str	r2, [r3, #0]
	    }
	}

    return error_status;
 8000296:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
    }
 800029a:	4618      	mov	r0, r3
 800029c:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd90      	pop	{r4, r7, pc}

080002a4 <STM32_AES_CTR_Decrypt>:
 */
int32_t STM32_AES_CTR_Decrypt(uint8_t *InputMessage,
		uint32_t InputMessageLength, uint8_t *AES128_Key,
		uint8_t *InitializationVector, uint32_t IvLength,
		uint8_t *OutputMessage, uint32_t *OutputMessageLength)
{
 80002a4:	b590      	push	{r4, r7, lr}
 80002a6:	b0cf      	sub	sp, #316	; 0x13c
 80002a8:	af02      	add	r7, sp, #8
 80002aa:	f107 040c 	add.w	r4, r7, #12
 80002ae:	6020      	str	r0, [r4, #0]
 80002b0:	f107 0008 	add.w	r0, r7, #8
 80002b4:	6001      	str	r1, [r0, #0]
 80002b6:	1d39      	adds	r1, r7, #4
 80002b8:	600a      	str	r2, [r1, #0]
 80002ba:	463a      	mov	r2, r7
 80002bc:	6013      	str	r3, [r2, #0]
	AESCTRctx_stt AESctx;

	uint32_t error_status = AES_SUCCESS;
 80002be:	2300      	movs	r3, #0
 80002c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	int32_t outputLength = 0;
 80002c4:	f107 0310 	add.w	r3, r7, #16
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]

	/* Set flag field to default value */
	AESctx.mFlags = E_SK_DEFAULT;
 80002cc:	f107 0314 	add.w	r3, r7, #20
 80002d0:	2200      	movs	r2, #0
 80002d2:	711a      	strb	r2, [r3, #4]

	/* Set key size to 16 (corresponding to AES-128) */
	AESctx.mKeySize = 16;
 80002d4:	f107 0314 	add.w	r3, r7, #20
 80002d8:	2210      	movs	r2, #16
 80002da:	625a      	str	r2, [r3, #36]	; 0x24

	/* Set iv size field to IvLength*/
	AESctx.mIvSize = IvLength;
 80002dc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80002e0:	f107 0314 	add.w	r3, r7, #20
 80002e4:	611a      	str	r2, [r3, #16]

	/* Initialize the operation, by passing the key.
	 * Third parameter is NULL because CTR doesn't use any IV */
	error_status = AES_CTR_Decrypt_Init(&AESctx, AES128_Key,
 80002e6:	463a      	mov	r2, r7
 80002e8:	1d3b      	adds	r3, r7, #4
 80002ea:	f107 0014 	add.w	r0, r7, #20
 80002ee:	6812      	ldr	r2, [r2, #0]
 80002f0:	6819      	ldr	r1, [r3, #0]
 80002f2:	f003 faab 	bl	800384c <AES_CTR_Decrypt_Init>
 80002f6:	4603      	mov	r3, r0
 80002f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			InitializationVector);

	/* check for initialization errors */
	if (error_status == AES_SUCCESS)
 80002fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000300:	2b00      	cmp	r3, #0
 8000302:	d136      	bne.n	8000372 <STM32_AES_CTR_Decrypt+0xce>
	{
		/* Decrypt Data */
		error_status = AES_CTR_Decrypt_Append(&AESctx, InputMessage,
 8000304:	f107 0308 	add.w	r3, r7, #8
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	f107 010c 	add.w	r1, r7, #12
 800030e:	f107 0014 	add.w	r0, r7, #20
 8000312:	f107 0310 	add.w	r3, r7, #16
 8000316:	9300      	str	r3, [sp, #0]
 8000318:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800031c:	6809      	ldr	r1, [r1, #0]
 800031e:	f003 fae3 	bl	80038e8 <AES_CTR_Decrypt_Append>
 8000322:	4603      	mov	r3, r0
 8000324:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
				InputMessageLength, OutputMessage, &outputLength);
		if (error_status == AES_SUCCESS)
 8000328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800032c:	2b00      	cmp	r3, #0
 800032e:	d120      	bne.n	8000372 <STM32_AES_CTR_Decrypt+0xce>
		{
			/* Write the number of data written*/
			*OutputMessageLength = outputLength;
 8000330:	f107 0310 	add.w	r3, r7, #16
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	461a      	mov	r2, r3
 8000338:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800033c:	601a      	str	r2, [r3, #0]
			/* Do the Finalization */
			error_status = AES_CTR_Decrypt_Finish(&AESctx,
					OutputMessage + *OutputMessageLength, &outputLength);
 800033e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000342:	681b      	ldr	r3, [r3, #0]
			error_status = AES_CTR_Decrypt_Finish(&AESctx,
 8000344:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000348:	18d1      	adds	r1, r2, r3
 800034a:	f107 0210 	add.w	r2, r7, #16
 800034e:	f107 0314 	add.w	r3, r7, #20
 8000352:	4618      	mov	r0, r3
 8000354:	f003 faca 	bl	80038ec <AES_CTR_Decrypt_Finish>
 8000358:	4603      	mov	r3, r0
 800035a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			/* Add data written to the information to be returned */
			*OutputMessageLength += outputLength;
 800035e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	f107 0210 	add.w	r2, r7, #16
 8000368:	6812      	ldr	r2, [r2, #0]
 800036a:	441a      	add	r2, r3
 800036c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000370:	601a      	str	r2, [r3, #0]
		}
	}

	return error_status;
 8000372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
}
 8000376:	4618      	mov	r0, r3
 8000378:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800037c:	46bd      	mov	sp, r7
 800037e:	bd90      	pop	{r4, r7, pc}

08000380 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af04      	add	r7, sp, #16
	/* USER CODE BEGIN 1 */
	int32_t status = AES_SUCCESS;
 8000386:	2300      	movs	r3, #0
 8000388:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800038a:	f000 fa8b 	bl	80008a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800038e:	f000 f85b 	bl	8000448 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000392:	f000 f905 	bl	80005a0 <MX_GPIO_Init>
	MX_CRC_Init();
 8000396:	f000 f8b1 	bl	80004fc <MX_CRC_Init>
	MX_USART1_UART_Init();
 800039a:	f000 f8d1 	bl	8000540 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	/* Enable CRC clock */
	__CRC_CLK_ENABLE()
 800039e:	4b23      	ldr	r3, [pc, #140]	; (800042c <main+0xac>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	4a22      	ldr	r2, [pc, #136]	; (800042c <main+0xac>)
 80003a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003a8:	6153      	str	r3, [r2, #20]
 80003aa:	4b20      	ldr	r3, [pc, #128]	; (800042c <main+0xac>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003b2:	603b      	str	r3, [r7, #0]
 80003b4:	683b      	ldr	r3, [r7, #0]

	/* Encrypt DATA with AES in CTR mode */

	/*if (flag_key_interrupt == 1)
	 {*/
	status = STM32_AES_CTR_Encrypt((uint8_t*) Plaintext, PLAINTEXT_LENGTH, Key,
 80003b6:	4b1e      	ldr	r3, [pc, #120]	; (8000430 <main+0xb0>)
 80003b8:	9302      	str	r3, [sp, #8]
 80003ba:	4b1e      	ldr	r3, [pc, #120]	; (8000434 <main+0xb4>)
 80003bc:	9301      	str	r3, [sp, #4]
 80003be:	2310      	movs	r3, #16
 80003c0:	9300      	str	r3, [sp, #0]
 80003c2:	4b1d      	ldr	r3, [pc, #116]	; (8000438 <main+0xb8>)
 80003c4:	4a1d      	ldr	r2, [pc, #116]	; (800043c <main+0xbc>)
 80003c6:	2140      	movs	r1, #64	; 0x40
 80003c8:	481d      	ldr	r0, [pc, #116]	; (8000440 <main+0xc0>)
 80003ca:	f7ff fefd 	bl	80001c8 <STM32_AES_CTR_Encrypt>
 80003ce:	6078      	str	r0, [r7, #4]
			IV, sizeof(IV), OutputMessage, &OutputMessageLength);
	if (status == AES_SUCCESS)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d10a      	bne.n	80003ec <main+0x6c>
	{
		if (Buffercmp(Expected_Ciphertext, OutputMessage, PLAINTEXT_LENGTH)
 80003d6:	2240      	movs	r2, #64	; 0x40
 80003d8:	4916      	ldr	r1, [pc, #88]	; (8000434 <main+0xb4>)
 80003da:	481a      	ldr	r0, [pc, #104]	; (8000444 <main+0xc4>)
 80003dc:	f000 f95e 	bl	800069c <Buffercmp>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d004      	beq.n	80003f0 <main+0x70>
		{
			/* add application traitment in case of AES CTR encryption is passed */
		}
		else
		{
			Error_Handler();
 80003e6:	f000 f97a 	bl	80006de <Error_Handler>
 80003ea:	e001      	b.n	80003f0 <main+0x70>
	else
	{
		/* In case of encryption not success the possible values of status:
		 * AES_ERR_BAD_CONTEXT, AES_ERR_BAD_PARAMETER, AES_ERR_BAD_OPERATION
		 */
		Error_Handler();
 80003ec:	f000 f977 	bl	80006de <Error_Handler>
	}
	status = STM32_AES_CTR_Decrypt((uint8_t*) Expected_Ciphertext,
 80003f0:	4b0f      	ldr	r3, [pc, #60]	; (8000430 <main+0xb0>)
 80003f2:	9302      	str	r3, [sp, #8]
 80003f4:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <main+0xb4>)
 80003f6:	9301      	str	r3, [sp, #4]
 80003f8:	2310      	movs	r3, #16
 80003fa:	9300      	str	r3, [sp, #0]
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <main+0xb8>)
 80003fe:	4a0f      	ldr	r2, [pc, #60]	; (800043c <main+0xbc>)
 8000400:	2140      	movs	r1, #64	; 0x40
 8000402:	4810      	ldr	r0, [pc, #64]	; (8000444 <main+0xc4>)
 8000404:	f7ff ff4e 	bl	80002a4 <STM32_AES_CTR_Decrypt>
 8000408:	6078      	str	r0, [r7, #4]
	PLAINTEXT_LENGTH, Key, IV, sizeof(IV), OutputMessage, &OutputMessageLength);
	if (status == AES_SUCCESS)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2b00      	cmp	r3, #0
 800040e:	d10a      	bne.n	8000426 <main+0xa6>
	{
		if (Buffercmp(Plaintext, OutputMessage, PLAINTEXT_LENGTH) == PASSED)
 8000410:	2240      	movs	r2, #64	; 0x40
 8000412:	4908      	ldr	r1, [pc, #32]	; (8000434 <main+0xb4>)
 8000414:	480a      	ldr	r0, [pc, #40]	; (8000440 <main+0xc0>)
 8000416:	f000 f941 	bl	800069c <Buffercmp>
 800041a:	4603      	mov	r3, r0
 800041c:	2b01      	cmp	r3, #1
 800041e:	d004      	beq.n	800042a <main+0xaa>
		{
			/* add application traitment in case of AES CTR decryption is passed */
		}
		else
		{
			Error_Handler();
 8000420:	f000 f95d 	bl	80006de <Error_Handler>
 8000424:	e001      	b.n	800042a <main+0xaa>
	else
	{
		/* In case of decryption not success the possible values of status:
		 * AES_ERR_BAD_CONTEXT, AES_ERR_BAD_PARAMETER, AES_ERR_BAD_OPERATION
		 */
		Error_Handler();
 8000426:	f000 f95a 	bl	80006de <Error_Handler>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 800042a:	e7fe      	b.n	800042a <main+0xaa>
 800042c:	40021000 	.word	0x40021000
 8000430:	20000048 	.word	0x20000048
 8000434:	2000004c 	.word	0x2000004c
 8000438:	20000010 	.word	0x20000010
 800043c:	20000000 	.word	0x20000000
 8000440:	08003978 	.word	0x08003978
 8000444:	080039b8 	.word	0x080039b8

08000448 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b09e      	sub	sp, #120	; 0x78
 800044c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 800044e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000452:	2228      	movs	r2, #40	; 0x28
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f003 fa7a 	bl	8003950 <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 800045c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000460:	2200      	movs	r2, #0
 8000462:	601a      	str	r2, [r3, #0]
 8000464:	605a      	str	r2, [r3, #4]
 8000466:	609a      	str	r2, [r3, #8]
 8000468:	60da      	str	r2, [r3, #12]
 800046a:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInit =
 800046c:	463b      	mov	r3, r7
 800046e:	223c      	movs	r2, #60	; 0x3c
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f003 fa6c 	bl	8003950 <memset>
	{ 0 };

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000478:	2301      	movs	r3, #1
 800047a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800047c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000480:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000482:	2300      	movs	r3, #0
 8000484:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000486:	2301      	movs	r3, #1
 8000488:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048a:	2302      	movs	r3, #2
 800048c:	66fb      	str	r3, [r7, #108]	; 0x6c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800048e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000492:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000494:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000498:	677b      	str	r3, [r7, #116]	; 0x74
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800049e:	4618      	mov	r0, r3
 80004a0:	f000 fdc2 	bl	8001028 <HAL_RCC_OscConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0x66>
	{
		Error_Handler();
 80004aa:	f000 f918 	bl	80006de <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80004ae:	230f      	movs	r3, #15
 80004b0:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b2:	2302      	movs	r3, #2
 80004b4:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004be:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80004c8:	2102      	movs	r1, #2
 80004ca:	4618      	mov	r0, r3
 80004cc:	f001 fcb4 	bl	8001e38 <HAL_RCC_ClockConfig>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d001      	beq.n	80004da <SystemClock_Config+0x92>
	{
		Error_Handler();
 80004d6:	f000 f902 	bl	80006de <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80004da:	2301      	movs	r3, #1
 80004dc:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80004de:	2300      	movs	r3, #0
 80004e0:	60bb      	str	r3, [r7, #8]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004e2:	463b      	mov	r3, r7
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 fed9 	bl	800229c <HAL_RCCEx_PeriphCLKConfig>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d001      	beq.n	80004f4 <SystemClock_Config+0xac>
	{
		Error_Handler();
 80004f0:	f000 f8f5 	bl	80006de <Error_Handler>
	}
}
 80004f4:	bf00      	nop
 80004f6:	3778      	adds	r7, #120	; 0x78
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}

080004fc <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000500:	4b0d      	ldr	r3, [pc, #52]	; (8000538 <MX_CRC_Init+0x3c>)
 8000502:	4a0e      	ldr	r2, [pc, #56]	; (800053c <MX_CRC_Init+0x40>)
 8000504:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000506:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <MX_CRC_Init+0x3c>)
 8000508:	2200      	movs	r2, #0
 800050a:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800050c:	4b0a      	ldr	r3, [pc, #40]	; (8000538 <MX_CRC_Init+0x3c>)
 800050e:	2200      	movs	r2, #0
 8000510:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <MX_CRC_Init+0x3c>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000518:	4b07      	ldr	r3, [pc, #28]	; (8000538 <MX_CRC_Init+0x3c>)
 800051a:	2200      	movs	r2, #0
 800051c:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800051e:	4b06      	ldr	r3, [pc, #24]	; (8000538 <MX_CRC_Init+0x3c>)
 8000520:	2201      	movs	r2, #1
 8000522:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000524:	4804      	ldr	r0, [pc, #16]	; (8000538 <MX_CRC_Init+0x3c>)
 8000526:	f000 fb03 	bl	8000b30 <HAL_CRC_Init>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <MX_CRC_Init+0x38>
	{
		Error_Handler();
 8000530:	f000 f8d5 	bl	80006de <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	2000008c 	.word	0x2000008c
 800053c:	40023000 	.word	0x40023000

08000540 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000546:	4a15      	ldr	r2, [pc, #84]	; (800059c <MX_USART1_UART_Init+0x5c>)
 8000548:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 800054a:	4b13      	ldr	r3, [pc, #76]	; (8000598 <MX_USART1_UART_Init+0x58>)
 800054c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000550:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000558:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <MX_USART1_UART_Init+0x58>)
 800055a:	2200      	movs	r2, #0
 800055c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000560:	2200      	movs	r2, #0
 8000562:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000566:	220c      	movs	r2, #12
 8000568:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MX_USART1_UART_Init+0x58>)
 800056c:	2200      	movs	r2, #0
 800056e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000570:	4b09      	ldr	r3, [pc, #36]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000572:	2200      	movs	r2, #0
 8000574:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000576:	4b08      	ldr	r3, [pc, #32]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000578:	2200      	movs	r2, #0
 800057a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <MX_USART1_UART_Init+0x58>)
 800057e:	2200      	movs	r2, #0
 8000580:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8000582:	4805      	ldr	r0, [pc, #20]	; (8000598 <MX_USART1_UART_Init+0x58>)
 8000584:	f002 f83a 	bl	80025fc <HAL_UART_Init>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 800058e:	f000 f8a6 	bl	80006de <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200000b0 	.word	0x200000b0
 800059c:	40013800 	.word	0x40013800

080005a0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80005b6:	4b37      	ldr	r3, [pc, #220]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a36      	ldr	r2, [pc, #216]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b34      	ldr	r3, [pc, #208]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005ca:	613b      	str	r3, [r7, #16]
 80005cc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80005ce:	4b31      	ldr	r3, [pc, #196]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	4a30      	ldr	r2, [pc, #192]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005d8:	6153      	str	r3, [r2, #20]
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80005e6:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	4a2a      	ldr	r2, [pc, #168]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f0:	6153      	str	r3, [r2, #20]
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <MX_GPIO_Init+0xf4>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b25      	ldr	r3, [pc, #148]	; (8000694 <MX_GPIO_Init+0xf4>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a24      	ldr	r2, [pc, #144]	; (8000694 <MX_GPIO_Init+0xf4>)
 8000604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <MX_GPIO_Init+0xf4>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_GPIO_Init+0xf4>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a1e      	ldr	r2, [pc, #120]	; (8000694 <MX_GPIO_Init+0xf4>)
 800061c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_GPIO_Init+0xf4>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin | LD4_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	f44f 7184 	mov.w	r1, #264	; 0x108
 8000634:	4818      	ldr	r0, [pc, #96]	; (8000698 <MX_GPIO_Init+0xf8>)
 8000636:	f000 fcdf 	bl	8000ff8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin */
	GPIO_InitStruct.Pin = DRDY_Pin | MEMS_INT3_Pin | MEMS_INT4_Pin;
 800063a:	2334      	movs	r3, #52	; 0x34
 800063c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800063e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000642:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000648:	f107 0314 	add.w	r3, r7, #20
 800064c:	4619      	mov	r1, r3
 800064e:	4812      	ldr	r0, [pc, #72]	; (8000698 <MX_GPIO_Init+0xf8>)
 8000650:	f000 fb58 	bl	8000d04 <HAL_GPIO_Init>

	/*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin | LD4_Pin;
 8000654:	f44f 7384 	mov.w	r3, #264	; 0x108
 8000658:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065a:	2301      	movs	r3, #1
 800065c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065e:	2300      	movs	r3, #0
 8000660:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	480a      	ldr	r0, [pc, #40]	; (8000698 <MX_GPIO_Init+0xf8>)
 800066e:	f000 fb49 	bl	8000d04 <HAL_GPIO_Init>

	/*Configure GPIO pin : KEY_Pin */
	GPIO_InitStruct.Pin = KEY_Pin;
 8000672:	2301      	movs	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000676:	2300      	movs	r3, #0
 8000678:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 800067e:	f107 0314 	add.w	r3, r7, #20
 8000682:	4619      	mov	r1, r3
 8000684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000688:	f000 fb3c 	bl	8000d04 <HAL_GPIO_Init>

}
 800068c:	bf00      	nop
 800068e:	3728      	adds	r7, #40	; 0x28
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40021000 	.word	0x40021000
 8000698:	48001000 	.word	0x48001000

0800069c <Buffercmp>:
 * @retval PASSED: pBuffer identical to pBuffer1
 *         FAILED: pBuffer differs from pBuffer1
 */
TestStatus Buffercmp(const uint8_t *pBuffer, uint8_t *pBuffer1,
		uint16_t BufferLength)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	4613      	mov	r3, r2
 80006a8:	80fb      	strh	r3, [r7, #6]
	while (BufferLength--)
 80006aa:	e00d      	b.n	80006c8 <Buffercmp+0x2c>
	{
		if (*pBuffer != *pBuffer1)
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	781a      	ldrb	r2, [r3, #0]
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d001      	beq.n	80006bc <Buffercmp+0x20>
		{
			return FAILED;
 80006b8:	2300      	movs	r3, #0
 80006ba:	e00b      	b.n	80006d4 <Buffercmp+0x38>
		}

		pBuffer++;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3301      	adds	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
		pBuffer1++;
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	3301      	adds	r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
	while (BufferLength--)
 80006c8:	88fb      	ldrh	r3, [r7, #6]
 80006ca:	1e5a      	subs	r2, r3, #1
 80006cc:	80fa      	strh	r2, [r7, #6]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d1ec      	bne.n	80006ac <Buffercmp+0x10>
	}

	return PASSED;
 80006d2:	2301      	movs	r3, #1
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	bc80      	pop	{r7}
 80006dc:	4770      	bx	lr

080006de <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e2:	b672      	cpsid	i
}
 80006e4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80006e6:	e7fe      	b.n	80006e6 <Error_Handler+0x8>

080006e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <HAL_MspInit+0x44>)
 80006f0:	699b      	ldr	r3, [r3, #24]
 80006f2:	4a0e      	ldr	r2, [pc, #56]	; (800072c <HAL_MspInit+0x44>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6193      	str	r3, [r2, #24]
 80006fa:	4b0c      	ldr	r3, [pc, #48]	; (800072c <HAL_MspInit+0x44>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <HAL_MspInit+0x44>)
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <HAL_MspInit+0x44>)
 800070c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000710:	61d3      	str	r3, [r2, #28]
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_MspInit+0x44>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800071e:	2007      	movs	r0, #7
 8000720:	f000 f9d2 	bl	8000ac8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40021000 	.word	0x40021000

08000730 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a09      	ldr	r2, [pc, #36]	; (8000764 <HAL_CRC_MspInit+0x34>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d10b      	bne.n	800075a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <HAL_CRC_MspInit+0x38>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a08      	ldr	r2, [pc, #32]	; (8000768 <HAL_CRC_MspInit+0x38>)
 8000748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <HAL_CRC_MspInit+0x38>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800075a:	bf00      	nop
 800075c:	3714      	adds	r7, #20
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40023000 	.word	0x40023000
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08a      	sub	sp, #40	; 0x28
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000774:	f107 0314 	add.w	r3, r7, #20
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
 800077e:	609a      	str	r2, [r3, #8]
 8000780:	60da      	str	r2, [r3, #12]
 8000782:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <HAL_UART_MspInit+0x7c>)
 800078a:	4293      	cmp	r3, r2
 800078c:	d127      	bne.n	80007de <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <HAL_UART_MspInit+0x80>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	4a16      	ldr	r2, [pc, #88]	; (80007ec <HAL_UART_MspInit+0x80>)
 8000794:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000798:	6193      	str	r3, [r2, #24]
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <HAL_UART_MspInit+0x80>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <HAL_UART_MspInit+0x80>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	4a10      	ldr	r2, [pc, #64]	; (80007ec <HAL_UART_MspInit+0x80>)
 80007ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007b0:	6153      	str	r3, [r2, #20]
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <HAL_UART_MspInit+0x80>)
 80007b4:	695b      	ldr	r3, [r3, #20]
 80007b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007be:	2330      	movs	r3, #48	; 0x30
 80007c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007ce:	2307      	movs	r3, #7
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	; (80007f0 <HAL_UART_MspInit+0x84>)
 80007da:	f000 fa93 	bl	8000d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80007de:	bf00      	nop
 80007e0:	3728      	adds	r7, #40	; 0x28
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40013800 	.word	0x40013800
 80007ec:	40021000 	.word	0x40021000
 80007f0:	48000800 	.word	0x48000800

080007f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <NMI_Handler+0x4>

080007fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fa:	b480      	push	{r7}
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fe:	e7fe      	b.n	80007fe <HardFault_Handler+0x4>

08000800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000804:	e7fe      	b.n	8000804 <MemManage_Handler+0x4>

08000806 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000806:	b480      	push	{r7}
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080a:	e7fe      	b.n	800080a <BusFault_Handler+0x4>

0800080c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000810:	e7fe      	b.n	8000810 <UsageFault_Handler+0x4>

08000812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	bc80      	pop	{r7}
 800081c:	4770      	bx	lr

0800081e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr

0800082a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800082e:	bf00      	nop
 8000830:	46bd      	mov	sp, r7
 8000832:	bc80      	pop	{r7}
 8000834:	4770      	bx	lr

08000836 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800083a:	f000 f879 	bl	8000930 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}

08000842 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr
	...

08000850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000888 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <LoopForever+0x6>)
  ldr r1, =_edata
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000858:	4a0e      	ldr	r2, [pc, #56]	; (8000894 <LoopForever+0xe>)
  movs r3, #0
 800085a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800085c:	e002      	b.n	8000864 <LoopCopyDataInit>

0800085e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000860:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000862:	3304      	adds	r3, #4

08000864 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000864:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000866:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000868:	d3f9      	bcc.n	800085e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <LoopForever+0x12>)
  ldr r4, =_ebss
 800086c:	4c0b      	ldr	r4, [pc, #44]	; (800089c <LoopForever+0x16>)
  movs r3, #0
 800086e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000870:	e001      	b.n	8000876 <LoopFillZerobss>

08000872 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000872:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000874:	3204      	adds	r2, #4

08000876 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000876:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000878:	d3fb      	bcc.n	8000872 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800087a:	f7ff ffe2 	bl	8000842 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087e:	f003 f843 	bl	8003908 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000882:	f7ff fd7d 	bl	8000380 <main>

08000886 <LoopForever>:

LoopForever:
    b LoopForever
 8000886:	e7fe      	b.n	8000886 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000888:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800088c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000890:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000894:	08003f60 	.word	0x08003f60
  ldr r2, =_sbss
 8000898:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800089c:	20000138 	.word	0x20000138

080008a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC1_2_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a8:	4b08      	ldr	r3, [pc, #32]	; (80008cc <HAL_Init+0x28>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a07      	ldr	r2, [pc, #28]	; (80008cc <HAL_Init+0x28>)
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008b4:	2003      	movs	r0, #3
 80008b6:	f000 f907 	bl	8000ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 f808 	bl	80008d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008c0:	f7ff ff12 	bl	80006e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008c4:	2300      	movs	r3, #0
}
 80008c6:	4618      	mov	r0, r3
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40022000 	.word	0x40022000

080008d0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <HAL_InitTick+0x54>)
 80008da:	681a      	ldr	r2, [r3, #0]
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <HAL_InitTick+0x58>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	4619      	mov	r1, r3
 80008e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f911 	bl	8000b16 <HAL_SYSTICK_Config>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	e00e      	b.n	800091c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2b0f      	cmp	r3, #15
 8000902:	d80a      	bhi.n	800091a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	6879      	ldr	r1, [r7, #4]
 8000908:	f04f 30ff 	mov.w	r0, #4294967295
 800090c:	f000 f8e7 	bl	8000ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000910:	4a06      	ldr	r2, [pc, #24]	; (800092c <HAL_InitTick+0x5c>)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	e000      	b.n	800091c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800091a:	2301      	movs	r3, #1
}
 800091c:	4618      	mov	r0, r3
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000020 	.word	0x20000020
 8000928:	20000028 	.word	0x20000028
 800092c:	20000024 	.word	0x20000024

08000930 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000934:	4b05      	ldr	r3, [pc, #20]	; (800094c <HAL_IncTick+0x1c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	461a      	mov	r2, r3
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <HAL_IncTick+0x20>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a03      	ldr	r2, [pc, #12]	; (8000950 <HAL_IncTick+0x20>)
 8000942:	6013      	str	r3, [r2, #0]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	20000028 	.word	0x20000028
 8000950:	20000134 	.word	0x20000134

08000954 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  return uwTick;  
 8000958:	4b02      	ldr	r3, [pc, #8]	; (8000964 <HAL_GetTick+0x10>)
 800095a:	681b      	ldr	r3, [r3, #0]
}
 800095c:	4618      	mov	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr
 8000964:	20000134 	.word	0x20000134

08000968 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000968:	b480      	push	{r7}
 800096a:	b085      	sub	sp, #20
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000978:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800097a:	68db      	ldr	r3, [r3, #12]
 800097c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000984:	4013      	ands	r3, r2
 8000986:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000990:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000998:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800099a:	4a04      	ldr	r2, [pc, #16]	; (80009ac <__NVIC_SetPriorityGrouping+0x44>)
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	60d3      	str	r3, [r2, #12]
}
 80009a0:	bf00      	nop
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bc80      	pop	{r7}
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	e000ed00 	.word	0xe000ed00

080009b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009b4:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <__NVIC_GetPriorityGrouping+0x18>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	0a1b      	lsrs	r3, r3, #8
 80009ba:	f003 0307 	and.w	r3, r3, #7
}
 80009be:	4618      	mov	r0, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	6039      	str	r1, [r7, #0]
 80009d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	db0a      	blt.n	80009f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	490c      	ldr	r1, [pc, #48]	; (8000a18 <__NVIC_SetPriority+0x4c>)
 80009e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ea:	0112      	lsls	r2, r2, #4
 80009ec:	b2d2      	uxtb	r2, r2
 80009ee:	440b      	add	r3, r1
 80009f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009f4:	e00a      	b.n	8000a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	4908      	ldr	r1, [pc, #32]	; (8000a1c <__NVIC_SetPriority+0x50>)
 80009fc:	79fb      	ldrb	r3, [r7, #7]
 80009fe:	f003 030f 	and.w	r3, r3, #15
 8000a02:	3b04      	subs	r3, #4
 8000a04:	0112      	lsls	r2, r2, #4
 8000a06:	b2d2      	uxtb	r2, r2
 8000a08:	440b      	add	r3, r1
 8000a0a:	761a      	strb	r2, [r3, #24]
}
 8000a0c:	bf00      	nop
 8000a0e:	370c      	adds	r7, #12
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e100 	.word	0xe000e100
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b089      	sub	sp, #36	; 0x24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a34:	69fb      	ldr	r3, [r7, #28]
 8000a36:	f1c3 0307 	rsb	r3, r3, #7
 8000a3a:	2b04      	cmp	r3, #4
 8000a3c:	bf28      	it	cs
 8000a3e:	2304      	movcs	r3, #4
 8000a40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	3304      	adds	r3, #4
 8000a46:	2b06      	cmp	r3, #6
 8000a48:	d902      	bls.n	8000a50 <NVIC_EncodePriority+0x30>
 8000a4a:	69fb      	ldr	r3, [r7, #28]
 8000a4c:	3b03      	subs	r3, #3
 8000a4e:	e000      	b.n	8000a52 <NVIC_EncodePriority+0x32>
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a54:	f04f 32ff 	mov.w	r2, #4294967295
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a5e:	43da      	mvns	r2, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	401a      	ands	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a68:	f04f 31ff 	mov.w	r1, #4294967295
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a72:	43d9      	mvns	r1, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a78:	4313      	orrs	r3, r2
         );
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3724      	adds	r7, #36	; 0x24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3b01      	subs	r3, #1
 8000a90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a94:	d301      	bcc.n	8000a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00f      	b.n	8000aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <SysTick_Config+0x40>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa8:	f7ff ff90 	bl	80009cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <SysTick_Config+0x40>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <SysTick_Config+0x40>)
 8000ab4:	2207      	movs	r2, #7
 8000ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	e000e010 	.word	0xe000e010

08000ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f7ff ff49 	bl	8000968 <__NVIC_SetPriorityGrouping>
}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}

08000ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b086      	sub	sp, #24
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000af0:	f7ff ff5e 	bl	80009b0 <__NVIC_GetPriorityGrouping>
 8000af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	68b9      	ldr	r1, [r7, #8]
 8000afa:	6978      	ldr	r0, [r7, #20]
 8000afc:	f7ff ff90 	bl	8000a20 <NVIC_EncodePriority>
 8000b00:	4602      	mov	r2, r0
 8000b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff ff5f 	bl	80009cc <__NVIC_SetPriority>
}
 8000b0e:	bf00      	nop
 8000b10:	3718      	adds	r7, #24
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}

08000b16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b16:	b580      	push	{r7, lr}
 8000b18:	b082      	sub	sp, #8
 8000b1a:	af00      	add	r7, sp, #0
 8000b1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ffb0 	bl	8000a84 <SysTick_Config>
 8000b24:	4603      	mov	r3, r0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d101      	bne.n	8000b42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e054      	b.n	8000bec <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	7f5b      	ldrb	r3, [r3, #29]
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d105      	bne.n	8000b58 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff fdec 	bl	8000730 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	791b      	ldrb	r3, [r3, #4]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d10c      	bne.n	8000b80 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a22      	ldr	r2, [pc, #136]	; (8000bf4 <HAL_CRC_Init+0xc4>)
 8000b6c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	689a      	ldr	r2, [r3, #8]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f022 0218 	bic.w	r2, r2, #24
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	e00c      	b.n	8000b9a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	6899      	ldr	r1, [r3, #8]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68db      	ldr	r3, [r3, #12]
 8000b88:	461a      	mov	r2, r3
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f000 f834 	bl	8000bf8 <HAL_CRCEx_Polynomial_Set>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e028      	b.n	8000bec <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	795b      	ldrb	r3, [r3, #5]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d105      	bne.n	8000bae <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8000baa:	611a      	str	r2, [r3, #16]
 8000bac:	e004      	b.n	8000bb8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	687a      	ldr	r2, [r7, #4]
 8000bb4:	6912      	ldr	r2, [r2, #16]
 8000bb6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	689b      	ldr	r3, [r3, #8]
 8000bbe:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	695a      	ldr	r2, [r3, #20]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	699a      	ldr	r2, [r3, #24]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	430a      	orrs	r2, r1
 8000be2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2201      	movs	r2, #1
 8000be8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	04c11db7 	.word	0x04c11db7

08000bf8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b087      	sub	sp, #28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000c08:	231f      	movs	r3, #31
 8000c0a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000c0c:	bf00      	nop
 8000c0e:	693b      	ldr	r3, [r7, #16]
 8000c10:	1e5a      	subs	r2, r3, #1
 8000c12:	613a      	str	r2, [r7, #16]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d009      	beq.n	8000c2c <HAL_CRCEx_Polynomial_Set+0x34>
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	f003 031f 	and.w	r3, r3, #31
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	fa22 f303 	lsr.w	r3, r2, r3
 8000c24:	f003 0301 	and.w	r3, r3, #1
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d0f0      	beq.n	8000c0e <HAL_CRCEx_Polynomial_Set+0x16>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b18      	cmp	r3, #24
 8000c30:	d846      	bhi.n	8000cc0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000c32:	a201      	add	r2, pc, #4	; (adr r2, 8000c38 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c38:	08000cc7 	.word	0x08000cc7
 8000c3c:	08000cc1 	.word	0x08000cc1
 8000c40:	08000cc1 	.word	0x08000cc1
 8000c44:	08000cc1 	.word	0x08000cc1
 8000c48:	08000cc1 	.word	0x08000cc1
 8000c4c:	08000cc1 	.word	0x08000cc1
 8000c50:	08000cc1 	.word	0x08000cc1
 8000c54:	08000cc1 	.word	0x08000cc1
 8000c58:	08000cb5 	.word	0x08000cb5
 8000c5c:	08000cc1 	.word	0x08000cc1
 8000c60:	08000cc1 	.word	0x08000cc1
 8000c64:	08000cc1 	.word	0x08000cc1
 8000c68:	08000cc1 	.word	0x08000cc1
 8000c6c:	08000cc1 	.word	0x08000cc1
 8000c70:	08000cc1 	.word	0x08000cc1
 8000c74:	08000cc1 	.word	0x08000cc1
 8000c78:	08000ca9 	.word	0x08000ca9
 8000c7c:	08000cc1 	.word	0x08000cc1
 8000c80:	08000cc1 	.word	0x08000cc1
 8000c84:	08000cc1 	.word	0x08000cc1
 8000c88:	08000cc1 	.word	0x08000cc1
 8000c8c:	08000cc1 	.word	0x08000cc1
 8000c90:	08000cc1 	.word	0x08000cc1
 8000c94:	08000cc1 	.word	0x08000cc1
 8000c98:	08000c9d 	.word	0x08000c9d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000c9c:	693b      	ldr	r3, [r7, #16]
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d913      	bls.n	8000cca <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000ca6:	e010      	b.n	8000cca <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	2b07      	cmp	r3, #7
 8000cac:	d90f      	bls.n	8000cce <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000cb2:	e00c      	b.n	8000cce <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000cb4:	693b      	ldr	r3, [r7, #16]
 8000cb6:	2b0f      	cmp	r3, #15
 8000cb8:	d90b      	bls.n	8000cd2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000cbe:	e008      	b.n	8000cd2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	75fb      	strb	r3, [r7, #23]
      break;
 8000cc4:	e006      	b.n	8000cd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000cc6:	bf00      	nop
 8000cc8:	e004      	b.n	8000cd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000cca:	bf00      	nop
 8000ccc:	e002      	b.n	8000cd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000cce:	bf00      	nop
 8000cd0:	e000      	b.n	8000cd4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000cd2:	bf00      	nop
  }
  if (status == HAL_OK)
 8000cd4:	7dfb      	ldrb	r3, [r7, #23]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d10d      	bne.n	8000cf6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	68ba      	ldr	r2, [r7, #8]
 8000ce0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	689b      	ldr	r3, [r3, #8]
 8000ce8:	f023 0118 	bic.w	r1, r3, #24
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	371c      	adds	r7, #28
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b087      	sub	sp, #28
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d12:	e154      	b.n	8000fbe <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	2101      	movs	r1, #1
 8000d1a:	697b      	ldr	r3, [r7, #20]
 8000d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d20:	4013      	ands	r3, r2
 8000d22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 8146 	beq.w	8000fb8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d005      	beq.n	8000d44 <HAL_GPIO_Init+0x40>
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d130      	bne.n	8000da6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	689b      	ldr	r3, [r3, #8]
 8000d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	2203      	movs	r2, #3
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43db      	mvns	r3, r3
 8000d84:	693a      	ldr	r2, [r7, #16]
 8000d86:	4013      	ands	r3, r2
 8000d88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	091b      	lsrs	r3, r3, #4
 8000d90:	f003 0201 	and.w	r2, r3, #1
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0303 	and.w	r3, r3, #3
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d017      	beq.n	8000de2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	005b      	lsls	r3, r3, #1
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	689a      	ldr	r2, [r3, #8]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f003 0303 	and.w	r3, r3, #3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d123      	bne.n	8000e36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	220f      	movs	r2, #15
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	691a      	ldr	r2, [r3, #16]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	f003 0307 	and.w	r3, r3, #7
 8000e1c:	009b      	lsls	r3, r3, #2
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3208      	adds	r2, #8
 8000e30:	6939      	ldr	r1, [r7, #16]
 8000e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	2203      	movs	r2, #3
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43db      	mvns	r3, r3
 8000e48:	693a      	ldr	r2, [r7, #16]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0203 	and.w	r2, r3, #3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 80a0 	beq.w	8000fb8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e78:	4b58      	ldr	r3, [pc, #352]	; (8000fdc <HAL_GPIO_Init+0x2d8>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a57      	ldr	r2, [pc, #348]	; (8000fdc <HAL_GPIO_Init+0x2d8>)
 8000e7e:	f043 0301 	orr.w	r3, r3, #1
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b55      	ldr	r3, [pc, #340]	; (8000fdc <HAL_GPIO_Init+0x2d8>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	60bb      	str	r3, [r7, #8]
 8000e8e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000e90:	4a53      	ldr	r2, [pc, #332]	; (8000fe0 <HAL_GPIO_Init+0x2dc>)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eba:	d019      	beq.n	8000ef0 <HAL_GPIO_Init+0x1ec>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4a49      	ldr	r2, [pc, #292]	; (8000fe4 <HAL_GPIO_Init+0x2e0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d013      	beq.n	8000eec <HAL_GPIO_Init+0x1e8>
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	4a48      	ldr	r2, [pc, #288]	; (8000fe8 <HAL_GPIO_Init+0x2e4>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d00d      	beq.n	8000ee8 <HAL_GPIO_Init+0x1e4>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a47      	ldr	r2, [pc, #284]	; (8000fec <HAL_GPIO_Init+0x2e8>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d007      	beq.n	8000ee4 <HAL_GPIO_Init+0x1e0>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a46      	ldr	r2, [pc, #280]	; (8000ff0 <HAL_GPIO_Init+0x2ec>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d101      	bne.n	8000ee0 <HAL_GPIO_Init+0x1dc>
 8000edc:	2304      	movs	r3, #4
 8000ede:	e008      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ee0:	2305      	movs	r3, #5
 8000ee2:	e006      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e004      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ee8:	2302      	movs	r3, #2
 8000eea:	e002      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000eec:	2301      	movs	r3, #1
 8000eee:	e000      	b.n	8000ef2 <HAL_GPIO_Init+0x1ee>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	697a      	ldr	r2, [r7, #20]
 8000ef4:	f002 0203 	and.w	r2, r2, #3
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	4093      	lsls	r3, r2
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4313      	orrs	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f02:	4937      	ldr	r1, [pc, #220]	; (8000fe0 <HAL_GPIO_Init+0x2dc>)
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f10:	4b38      	ldr	r3, [pc, #224]	; (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f34:	4a2f      	ldr	r2, [pc, #188]	; (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f5e:	4a25      	ldr	r2, [pc, #148]	; (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f64:	4b23      	ldr	r3, [pc, #140]	; (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f88:	4a1a      	ldr	r2, [pc, #104]	; (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fb2:	4a10      	ldr	r2, [pc, #64]	; (8000ff4 <HAL_GPIO_Init+0x2f0>)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f47f aea3 	bne.w	8000d14 <HAL_GPIO_Init+0x10>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	371c      	adds	r7, #28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	40010000 	.word	0x40010000
 8000fe4:	48000400 	.word	0x48000400
 8000fe8:	48000800 	.word	0x48000800
 8000fec:	48000c00 	.word	0x48000c00
 8000ff0:	48001000 	.word	0x48001000
 8000ff4:	40010400 	.word	0x40010400

08000ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	460b      	mov	r3, r1
 8001002:	807b      	strh	r3, [r7, #2]
 8001004:	4613      	mov	r3, r2
 8001006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001008:	787b      	ldrb	r3, [r7, #1]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800100e:	887a      	ldrh	r2, [r7, #2]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001014:	e002      	b.n	800101c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001016:	887a      	ldrh	r2, [r7, #2]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
	...

08001028 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800102e:	af00      	add	r7, sp, #0
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	f000 bef4 	b.w	8001e2a <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b00      	cmp	r3, #0
 800104e:	f000 816a 	beq.w	8001326 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001052:	4bb3      	ldr	r3, [pc, #716]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	2b04      	cmp	r3, #4
 800105c:	d00c      	beq.n	8001078 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800105e:	4bb0      	ldr	r3, [pc, #704]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 030c 	and.w	r3, r3, #12
 8001066:	2b08      	cmp	r3, #8
 8001068:	d159      	bne.n	800111e <HAL_RCC_OscConfig+0xf6>
 800106a:	4bad      	ldr	r3, [pc, #692]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001076:	d152      	bne.n	800111e <HAL_RCC_OscConfig+0xf6>
 8001078:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001080:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001084:	fa93 f3a3 	rbit	r3, r3
 8001088:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800108c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001090:	fab3 f383 	clz	r3, r3
 8001094:	b2db      	uxtb	r3, r3
 8001096:	095b      	lsrs	r3, r3, #5
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f043 0301 	orr.w	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d102      	bne.n	80010aa <HAL_RCC_OscConfig+0x82>
 80010a4:	4b9e      	ldr	r3, [pc, #632]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	e015      	b.n	80010d6 <HAL_RCC_OscConfig+0xae>
 80010aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ae:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80010b6:	fa93 f3a3 	rbit	r3, r3
 80010ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80010be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80010c6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80010ca:	fa93 f3a3 	rbit	r3, r3
 80010ce:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80010d2:	4b93      	ldr	r3, [pc, #588]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 80010d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010da:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80010de:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80010e2:	fa92 f2a2 	rbit	r2, r2
 80010e6:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80010ea:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80010ee:	fab2 f282 	clz	r2, r2
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	f042 0220 	orr.w	r2, r2, #32
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	f002 021f 	and.w	r2, r2, #31
 80010fe:	2101      	movs	r1, #1
 8001100:	fa01 f202 	lsl.w	r2, r1, r2
 8001104:	4013      	ands	r3, r2
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 810c 	beq.w	8001324 <HAL_RCC_OscConfig+0x2fc>
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	f040 8106 	bne.w	8001324 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	f000 be86 	b.w	8001e2a <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001128:	d106      	bne.n	8001138 <HAL_RCC_OscConfig+0x110>
 800112a:	4b7d      	ldr	r3, [pc, #500]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a7c      	ldr	r2, [pc, #496]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	e030      	b.n	800119a <HAL_RCC_OscConfig+0x172>
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10c      	bne.n	800115c <HAL_RCC_OscConfig+0x134>
 8001142:	4b77      	ldr	r3, [pc, #476]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a76      	ldr	r2, [pc, #472]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800114c:	6013      	str	r3, [r2, #0]
 800114e:	4b74      	ldr	r3, [pc, #464]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a73      	ldr	r2, [pc, #460]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001154:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001158:	6013      	str	r3, [r2, #0]
 800115a:	e01e      	b.n	800119a <HAL_RCC_OscConfig+0x172>
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001166:	d10c      	bne.n	8001182 <HAL_RCC_OscConfig+0x15a>
 8001168:	4b6d      	ldr	r3, [pc, #436]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a6c      	ldr	r2, [pc, #432]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 800116e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b6a      	ldr	r3, [pc, #424]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a69      	ldr	r2, [pc, #420]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 800117a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e00b      	b.n	800119a <HAL_RCC_OscConfig+0x172>
 8001182:	4b67      	ldr	r3, [pc, #412]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a66      	ldr	r2, [pc, #408]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	4b64      	ldr	r3, [pc, #400]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a63      	ldr	r2, [pc, #396]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001194:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001198:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800119a:	4b61      	ldr	r3, [pc, #388]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 800119c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800119e:	f023 020f 	bic.w	r2, r3, #15
 80011a2:	1d3b      	adds	r3, r7, #4
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	495d      	ldr	r1, [pc, #372]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d059      	beq.n	800126c <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fbcc 	bl	8000954 <HAL_GetTick>
 80011bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c0:	e00a      	b.n	80011d8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011c2:	f7ff fbc7 	bl	8000954 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	2b64      	cmp	r3, #100	; 0x64
 80011d0:	d902      	bls.n	80011d8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	f000 be29 	b.w	8001e2a <HAL_RCC_OscConfig+0xe02>
 80011d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011dc:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80011e4:	fa93 f3a3 	rbit	r3, r3
 80011e8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80011ec:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f0:	fab3 f383 	clz	r3, r3
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	095b      	lsrs	r3, r3, #5
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d102      	bne.n	800120a <HAL_RCC_OscConfig+0x1e2>
 8001204:	4b46      	ldr	r3, [pc, #280]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	e015      	b.n	8001236 <HAL_RCC_OscConfig+0x20e>
 800120a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001212:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001216:	fa93 f3a3 	rbit	r3, r3
 800121a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800121e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001222:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001226:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800122a:	fa93 f3a3 	rbit	r3, r3
 800122e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001232:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 8001234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001236:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800123a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800123e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001242:	fa92 f2a2 	rbit	r2, r2
 8001246:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800124a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800124e:	fab2 f282 	clz	r2, r2
 8001252:	b2d2      	uxtb	r2, r2
 8001254:	f042 0220 	orr.w	r2, r2, #32
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	f002 021f 	and.w	r2, r2, #31
 800125e:	2101      	movs	r1, #1
 8001260:	fa01 f202 	lsl.w	r2, r1, r2
 8001264:	4013      	ands	r3, r2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0ab      	beq.n	80011c2 <HAL_RCC_OscConfig+0x19a>
 800126a:	e05c      	b.n	8001326 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fb72 	bl	8000954 <HAL_GetTick>
 8001270:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001276:	f7ff fb6d 	bl	8000954 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	2b64      	cmp	r3, #100	; 0x64
 8001284:	d902      	bls.n	800128c <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8001286:	2303      	movs	r3, #3
 8001288:	f000 bdcf 	b.w	8001e2a <HAL_RCC_OscConfig+0xe02>
 800128c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001290:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001294:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80012a0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	095b      	lsrs	r3, r3, #5
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	f043 0301 	orr.w	r3, r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d102      	bne.n	80012be <HAL_RCC_OscConfig+0x296>
 80012b8:	4b19      	ldr	r3, [pc, #100]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	e015      	b.n	80012ea <HAL_RCC_OscConfig+0x2c2>
 80012be:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80012d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80012da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80012de:	fa93 f3a3 	rbit	r3, r3
 80012e2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80012e6:	4b0e      	ldr	r3, [pc, #56]	; (8001320 <HAL_RCC_OscConfig+0x2f8>)
 80012e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80012f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80012f6:	fa92 f2a2 	rbit	r2, r2
 80012fa:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80012fe:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001302:	fab2 f282 	clz	r2, r2
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	f042 0220 	orr.w	r2, r2, #32
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	f002 021f 	and.w	r2, r2, #31
 8001312:	2101      	movs	r1, #1
 8001314:	fa01 f202 	lsl.w	r2, r1, r2
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d1ab      	bne.n	8001276 <HAL_RCC_OscConfig+0x24e>
 800131e:	e002      	b.n	8001326 <HAL_RCC_OscConfig+0x2fe>
 8001320:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0302 	and.w	r3, r3, #2
 8001330:	2b00      	cmp	r3, #0
 8001332:	f000 816f 	beq.w	8001614 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001336:	4bd0      	ldr	r3, [pc, #832]	; (8001678 <HAL_RCC_OscConfig+0x650>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	f003 030c 	and.w	r3, r3, #12
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00b      	beq.n	800135a <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001342:	4bcd      	ldr	r3, [pc, #820]	; (8001678 <HAL_RCC_OscConfig+0x650>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f003 030c 	and.w	r3, r3, #12
 800134a:	2b08      	cmp	r3, #8
 800134c:	d16c      	bne.n	8001428 <HAL_RCC_OscConfig+0x400>
 800134e:	4bca      	ldr	r3, [pc, #808]	; (8001678 <HAL_RCC_OscConfig+0x650>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d166      	bne.n	8001428 <HAL_RCC_OscConfig+0x400>
 800135a:	2302      	movs	r3, #2
 800135c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001360:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800136c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001370:	fab3 f383 	clz	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	095b      	lsrs	r3, r3, #5
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b01      	cmp	r3, #1
 8001382:	d102      	bne.n	800138a <HAL_RCC_OscConfig+0x362>
 8001384:	4bbc      	ldr	r3, [pc, #752]	; (8001678 <HAL_RCC_OscConfig+0x650>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	e013      	b.n	80013b2 <HAL_RCC_OscConfig+0x38a>
 800138a:	2302      	movs	r3, #2
 800138c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001390:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001394:	fa93 f3a3 	rbit	r3, r3
 8001398:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800139c:	2302      	movs	r3, #2
 800139e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80013a2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80013a6:	fa93 f3a3 	rbit	r3, r3
 80013aa:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80013ae:	4bb2      	ldr	r3, [pc, #712]	; (8001678 <HAL_RCC_OscConfig+0x650>)
 80013b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b2:	2202      	movs	r2, #2
 80013b4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80013b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80013bc:	fa92 f2a2 	rbit	r2, r2
 80013c0:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80013c4:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80013c8:	fab2 f282 	clz	r2, r2
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	f042 0220 	orr.w	r2, r2, #32
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	f002 021f 	and.w	r2, r2, #31
 80013d8:	2101      	movs	r1, #1
 80013da:	fa01 f202 	lsl.w	r2, r1, r2
 80013de:	4013      	ands	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <HAL_RCC_OscConfig+0x3cc>
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d002      	beq.n	80013f4 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f000 bd1b 	b.w	8001e2a <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f4:	4ba0      	ldr	r3, [pc, #640]	; (8001678 <HAL_RCC_OscConfig+0x650>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fc:	1d3b      	adds	r3, r7, #4
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	21f8      	movs	r1, #248	; 0xf8
 8001404:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800140c:	fa91 f1a1 	rbit	r1, r1
 8001410:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001414:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001418:	fab1 f181 	clz	r1, r1
 800141c:	b2c9      	uxtb	r1, r1
 800141e:	408b      	lsls	r3, r1
 8001420:	4995      	ldr	r1, [pc, #596]	; (8001678 <HAL_RCC_OscConfig+0x650>)
 8001422:	4313      	orrs	r3, r2
 8001424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001426:	e0f5      	b.n	8001614 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8085 	beq.w	800153e <HAL_RCC_OscConfig+0x516>
 8001434:	2301      	movs	r3, #1
 8001436:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800143e:	fa93 f3a3 	rbit	r3, r3
 8001442:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001446:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800144a:	fab3 f383 	clz	r3, r3
 800144e:	b2db      	uxtb	r3, r3
 8001450:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001454:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	461a      	mov	r2, r3
 800145c:	2301      	movs	r3, #1
 800145e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001460:	f7ff fa78 	bl	8000954 <HAL_GetTick>
 8001464:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001468:	e00a      	b.n	8001480 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800146a:	f7ff fa73 	bl	8000954 <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d902      	bls.n	8001480 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	f000 bcd5 	b.w	8001e2a <HAL_RCC_OscConfig+0xe02>
 8001480:	2302      	movs	r3, #2
 8001482:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001486:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800148a:	fa93 f3a3 	rbit	r3, r3
 800148e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001492:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001496:	fab3 f383 	clz	r3, r3
 800149a:	b2db      	uxtb	r3, r3
 800149c:	095b      	lsrs	r3, r3, #5
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d102      	bne.n	80014b0 <HAL_RCC_OscConfig+0x488>
 80014aa:	4b73      	ldr	r3, [pc, #460]	; (8001678 <HAL_RCC_OscConfig+0x650>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	e013      	b.n	80014d8 <HAL_RCC_OscConfig+0x4b0>
 80014b0:	2302      	movs	r3, #2
 80014b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80014ba:	fa93 f3a3 	rbit	r3, r3
 80014be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80014c2:	2302      	movs	r3, #2
 80014c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80014c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80014d4:	4b68      	ldr	r3, [pc, #416]	; (8001678 <HAL_RCC_OscConfig+0x650>)
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	2202      	movs	r2, #2
 80014da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80014de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80014e2:	fa92 f2a2 	rbit	r2, r2
 80014e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80014ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80014ee:	fab2 f282 	clz	r2, r2
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	f042 0220 	orr.w	r2, r2, #32
 80014f8:	b2d2      	uxtb	r2, r2
 80014fa:	f002 021f 	and.w	r2, r2, #31
 80014fe:	2101      	movs	r1, #1
 8001500:	fa01 f202 	lsl.w	r2, r1, r2
 8001504:	4013      	ands	r3, r2
 8001506:	2b00      	cmp	r3, #0
 8001508:	d0af      	beq.n	800146a <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800150a:	4b5b      	ldr	r3, [pc, #364]	; (8001678 <HAL_RCC_OscConfig+0x650>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	695b      	ldr	r3, [r3, #20]
 8001518:	21f8      	movs	r1, #248	; 0xf8
 800151a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800151e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001522:	fa91 f1a1 	rbit	r1, r1
 8001526:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800152a:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800152e:	fab1 f181 	clz	r1, r1
 8001532:	b2c9      	uxtb	r1, r1
 8001534:	408b      	lsls	r3, r1
 8001536:	4950      	ldr	r1, [pc, #320]	; (8001678 <HAL_RCC_OscConfig+0x650>)
 8001538:	4313      	orrs	r3, r2
 800153a:	600b      	str	r3, [r1, #0]
 800153c:	e06a      	b.n	8001614 <HAL_RCC_OscConfig+0x5ec>
 800153e:	2301      	movs	r3, #1
 8001540:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001548:	fa93 f3a3 	rbit	r3, r3
 800154c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8001550:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001554:	fab3 f383 	clz	r3, r3
 8001558:	b2db      	uxtb	r3, r3
 800155a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800155e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	461a      	mov	r2, r3
 8001566:	2300      	movs	r3, #0
 8001568:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156a:	f7ff f9f3 	bl	8000954 <HAL_GetTick>
 800156e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001572:	e00a      	b.n	800158a <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001574:	f7ff f9ee 	bl	8000954 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d902      	bls.n	800158a <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	f000 bc50 	b.w	8001e2a <HAL_RCC_OscConfig+0xe02>
 800158a:	2302      	movs	r3, #2
 800158c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800159c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a0:	fab3 f383 	clz	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d102      	bne.n	80015ba <HAL_RCC_OscConfig+0x592>
 80015b4:	4b30      	ldr	r3, [pc, #192]	; (8001678 <HAL_RCC_OscConfig+0x650>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	e013      	b.n	80015e2 <HAL_RCC_OscConfig+0x5ba>
 80015ba:	2302      	movs	r3, #2
 80015bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80015c4:	fa93 f3a3 	rbit	r3, r3
 80015c8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80015cc:	2302      	movs	r3, #2
 80015ce:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80015d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d6:	fa93 f3a3 	rbit	r3, r3
 80015da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80015de:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_RCC_OscConfig+0x650>)
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	2202      	movs	r2, #2
 80015e4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80015e8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80015ec:	fa92 f2a2 	rbit	r2, r2
 80015f0:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80015f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80015f8:	fab2 f282 	clz	r2, r2
 80015fc:	b2d2      	uxtb	r2, r2
 80015fe:	f042 0220 	orr.w	r2, r2, #32
 8001602:	b2d2      	uxtb	r2, r2
 8001604:	f002 021f 	and.w	r2, r2, #31
 8001608:	2101      	movs	r1, #1
 800160a:	fa01 f202 	lsl.w	r2, r1, r2
 800160e:	4013      	ands	r3, r2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1af      	bne.n	8001574 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0308 	and.w	r3, r3, #8
 800161e:	2b00      	cmp	r3, #0
 8001620:	f000 80da 	beq.w	80017d8 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	699b      	ldr	r3, [r3, #24]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d069      	beq.n	8001702 <HAL_RCC_OscConfig+0x6da>
 800162e:	2301      	movs	r3, #1
 8001630:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001634:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001638:	fa93 f3a3 	rbit	r3, r3
 800163c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8001640:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001644:	fab3 f383 	clz	r3, r3
 8001648:	b2db      	uxtb	r3, r3
 800164a:	461a      	mov	r2, r3
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <HAL_RCC_OscConfig+0x654>)
 800164e:	4413      	add	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	461a      	mov	r2, r3
 8001654:	2301      	movs	r3, #1
 8001656:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001658:	f7ff f97c 	bl	8000954 <HAL_GetTick>
 800165c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001660:	e00e      	b.n	8001680 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001662:	f7ff f977 	bl	8000954 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d906      	bls.n	8001680 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e3d9      	b.n	8001e2a <HAL_RCC_OscConfig+0xe02>
 8001676:	bf00      	nop
 8001678:	40021000 	.word	0x40021000
 800167c:	10908120 	.word	0x10908120
 8001680:	2302      	movs	r3, #2
 8001682:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001686:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001692:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001696:	2202      	movs	r2, #2
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	fa93 f2a3 	rbit	r2, r3
 80016a4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80016ae:	2202      	movs	r2, #2
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	fa93 f2a3 	rbit	r2, r3
 80016bc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80016c0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016c2:	4ba5      	ldr	r3, [pc, #660]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 80016c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016ca:	2102      	movs	r1, #2
 80016cc:	6019      	str	r1, [r3, #0]
 80016ce:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	fa93 f1a3 	rbit	r1, r3
 80016d8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016dc:	6019      	str	r1, [r3, #0]
  return result;
 80016de:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	fab3 f383 	clz	r3, r3
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	2101      	movs	r1, #1
 80016f6:	fa01 f303 	lsl.w	r3, r1, r3
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0b0      	beq.n	8001662 <HAL_RCC_OscConfig+0x63a>
 8001700:	e06a      	b.n	80017d8 <HAL_RCC_OscConfig+0x7b0>
 8001702:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	fa93 f2a3 	rbit	r2, r3
 8001714:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001718:	601a      	str	r2, [r3, #0]
  return result;
 800171a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800171e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	b2db      	uxtb	r3, r3
 8001726:	461a      	mov	r2, r3
 8001728:	4b8c      	ldr	r3, [pc, #560]	; (800195c <HAL_RCC_OscConfig+0x934>)
 800172a:	4413      	add	r3, r2
 800172c:	009b      	lsls	r3, r3, #2
 800172e:	461a      	mov	r2, r3
 8001730:	2300      	movs	r3, #0
 8001732:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001734:	f7ff f90e 	bl	8000954 <HAL_GetTick>
 8001738:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800173c:	e009      	b.n	8001752 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800173e:	f7ff f909 	bl	8000954 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	2b02      	cmp	r3, #2
 800174c:	d901      	bls.n	8001752 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e36b      	b.n	8001e2a <HAL_RCC_OscConfig+0xe02>
 8001752:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001756:	2202      	movs	r2, #2
 8001758:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800175a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	fa93 f2a3 	rbit	r2, r3
 8001764:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800176e:	2202      	movs	r2, #2
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	fa93 f2a3 	rbit	r2, r3
 800177c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001786:	2202      	movs	r2, #2
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	fa93 f2a3 	rbit	r2, r3
 8001794:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001798:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179a:	4b6f      	ldr	r3, [pc, #444]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 800179c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017a2:	2102      	movs	r1, #2
 80017a4:	6019      	str	r1, [r3, #0]
 80017a6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	fa93 f1a3 	rbit	r1, r3
 80017b0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017b4:	6019      	str	r1, [r3, #0]
  return result;
 80017b6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	fab3 f383 	clz	r3, r3
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	2101      	movs	r1, #1
 80017ce:	fa01 f303 	lsl.w	r3, r1, r3
 80017d2:	4013      	ands	r3, r2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1b2      	bne.n	800173e <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0304 	and.w	r3, r3, #4
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8158 	beq.w	8001a98 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ee:	4b5a      	ldr	r3, [pc, #360]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d112      	bne.n	8001820 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b57      	ldr	r3, [pc, #348]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	4a56      	ldr	r2, [pc, #344]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	61d3      	str	r3, [r2, #28]
 8001806:	4b54      	ldr	r3, [pc, #336]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800181a:	2301      	movs	r3, #1
 800181c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	4b4f      	ldr	r3, [pc, #316]	; (8001960 <HAL_RCC_OscConfig+0x938>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d11a      	bne.n	8001862 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800182c:	4b4c      	ldr	r3, [pc, #304]	; (8001960 <HAL_RCC_OscConfig+0x938>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a4b      	ldr	r2, [pc, #300]	; (8001960 <HAL_RCC_OscConfig+0x938>)
 8001832:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001836:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001838:	f7ff f88c 	bl	8000954 <HAL_GetTick>
 800183c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	e009      	b.n	8001856 <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001842:	f7ff f887 	bl	8000954 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b64      	cmp	r3, #100	; 0x64
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e2e9      	b.n	8001e2a <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	4b42      	ldr	r3, [pc, #264]	; (8001960 <HAL_RCC_OscConfig+0x938>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0ef      	beq.n	8001842 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001862:	1d3b      	adds	r3, r7, #4
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d106      	bne.n	800187a <HAL_RCC_OscConfig+0x852>
 800186c:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4a39      	ldr	r2, [pc, #228]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6213      	str	r3, [r2, #32]
 8001878:	e02f      	b.n	80018da <HAL_RCC_OscConfig+0x8b2>
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10c      	bne.n	800189e <HAL_RCC_OscConfig+0x876>
 8001884:	4b34      	ldr	r3, [pc, #208]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	4a33      	ldr	r2, [pc, #204]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	6213      	str	r3, [r2, #32]
 8001890:	4b31      	ldr	r3, [pc, #196]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	4a30      	ldr	r2, [pc, #192]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 8001896:	f023 0304 	bic.w	r3, r3, #4
 800189a:	6213      	str	r3, [r2, #32]
 800189c:	e01d      	b.n	80018da <HAL_RCC_OscConfig+0x8b2>
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	2b05      	cmp	r3, #5
 80018a6:	d10c      	bne.n	80018c2 <HAL_RCC_OscConfig+0x89a>
 80018a8:	4b2b      	ldr	r3, [pc, #172]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 80018aa:	6a1b      	ldr	r3, [r3, #32]
 80018ac:	4a2a      	ldr	r2, [pc, #168]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 80018ae:	f043 0304 	orr.w	r3, r3, #4
 80018b2:	6213      	str	r3, [r2, #32]
 80018b4:	4b28      	ldr	r3, [pc, #160]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	4a27      	ldr	r2, [pc, #156]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 80018ba:	f043 0301 	orr.w	r3, r3, #1
 80018be:	6213      	str	r3, [r2, #32]
 80018c0:	e00b      	b.n	80018da <HAL_RCC_OscConfig+0x8b2>
 80018c2:	4b25      	ldr	r3, [pc, #148]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 80018c4:	6a1b      	ldr	r3, [r3, #32]
 80018c6:	4a24      	ldr	r2, [pc, #144]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	6213      	str	r3, [r2, #32]
 80018ce:	4b22      	ldr	r3, [pc, #136]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 80018d0:	6a1b      	ldr	r3, [r3, #32]
 80018d2:	4a21      	ldr	r2, [pc, #132]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 80018d4:	f023 0304 	bic.w	r3, r3, #4
 80018d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d06b      	beq.n	80019bc <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e4:	f7ff f836 	bl	8000954 <HAL_GetTick>
 80018e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ec:	e00b      	b.n	8001906 <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018ee:	f7ff f831 	bl	8000954 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e291      	b.n	8001e2a <HAL_RCC_OscConfig+0xe02>
 8001906:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800190a:	2202      	movs	r2, #2
 800190c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	fa93 f2a3 	rbit	r2, r3
 8001918:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001922:	2202      	movs	r2, #2
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	fa93 f2a3 	rbit	r2, r3
 8001930:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001934:	601a      	str	r2, [r3, #0]
  return result;
 8001936:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800193a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	b2db      	uxtb	r3, r3
 8001942:	095b      	lsrs	r3, r3, #5
 8001944:	b2db      	uxtb	r3, r3
 8001946:	f043 0302 	orr.w	r3, r3, #2
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d109      	bne.n	8001964 <HAL_RCC_OscConfig+0x93c>
 8001950:	4b01      	ldr	r3, [pc, #4]	; (8001958 <HAL_RCC_OscConfig+0x930>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	e014      	b.n	8001980 <HAL_RCC_OscConfig+0x958>
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	10908120 	.word	0x10908120
 8001960:	40007000 	.word	0x40007000
 8001964:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001968:	2202      	movs	r2, #2
 800196a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	fa93 f2a3 	rbit	r2, r3
 8001976:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	4bbb      	ldr	r3, [pc, #748]	; (8001c6c <HAL_RCC_OscConfig+0xc44>)
 800197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001980:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001984:	2102      	movs	r1, #2
 8001986:	6011      	str	r1, [r2, #0]
 8001988:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800198c:	6812      	ldr	r2, [r2, #0]
 800198e:	fa92 f1a2 	rbit	r1, r2
 8001992:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001996:	6011      	str	r1, [r2, #0]
  return result;
 8001998:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	fab2 f282 	clz	r2, r2
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019a8:	b2d2      	uxtb	r2, r2
 80019aa:	f002 021f 	and.w	r2, r2, #31
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f202 	lsl.w	r2, r1, r2
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d099      	beq.n	80018ee <HAL_RCC_OscConfig+0x8c6>
 80019ba:	e063      	b.n	8001a84 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019bc:	f7fe ffca 	bl	8000954 <HAL_GetTick>
 80019c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c4:	e00b      	b.n	80019de <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7fe ffc5 	bl	8000954 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e225      	b.n	8001e2a <HAL_RCC_OscConfig+0xe02>
 80019de:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019e2:	2202      	movs	r2, #2
 80019e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	fa93 f2a3 	rbit	r2, r3
 80019f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80019fa:	2202      	movs	r2, #2
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	fa93 f2a3 	rbit	r2, r3
 8001a08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a0c:	601a      	str	r2, [r3, #0]
  return result;
 8001a0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a12:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a14:	fab3 f383 	clz	r3, r3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	f043 0302 	orr.w	r3, r3, #2
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d102      	bne.n	8001a2e <HAL_RCC_OscConfig+0xa06>
 8001a28:	4b90      	ldr	r3, [pc, #576]	; (8001c6c <HAL_RCC_OscConfig+0xc44>)
 8001a2a:	6a1b      	ldr	r3, [r3, #32]
 8001a2c:	e00d      	b.n	8001a4a <HAL_RCC_OscConfig+0xa22>
 8001a2e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a32:	2202      	movs	r2, #2
 8001a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	fa93 f2a3 	rbit	r2, r3
 8001a40:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	4b89      	ldr	r3, [pc, #548]	; (8001c6c <HAL_RCC_OscConfig+0xc44>)
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a4e:	2102      	movs	r1, #2
 8001a50:	6011      	str	r1, [r2, #0]
 8001a52:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001a56:	6812      	ldr	r2, [r2, #0]
 8001a58:	fa92 f1a2 	rbit	r1, r2
 8001a5c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001a60:	6011      	str	r1, [r2, #0]
  return result;
 8001a62:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001a66:	6812      	ldr	r2, [r2, #0]
 8001a68:	fab2 f282 	clz	r2, r2
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a72:	b2d2      	uxtb	r2, r2
 8001a74:	f002 021f 	and.w	r2, r2, #31
 8001a78:	2101      	movs	r1, #1
 8001a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1a0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d105      	bne.n	8001a98 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8c:	4b77      	ldr	r3, [pc, #476]	; (8001c6c <HAL_RCC_OscConfig+0xc44>)
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	4a76      	ldr	r2, [pc, #472]	; (8001c6c <HAL_RCC_OscConfig+0xc44>)
 8001a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 81c2 	beq.w	8001e28 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa4:	4b71      	ldr	r3, [pc, #452]	; (8001c6c <HAL_RCC_OscConfig+0xc44>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	f000 819c 	beq.w	8001dea <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ab2:	1d3b      	adds	r3, r7, #4
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	f040 8114 	bne.w	8001ce6 <HAL_RCC_OscConfig+0xcbe>
 8001abe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ac2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ac6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	fa93 f2a3 	rbit	r2, r3
 8001ad2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ad6:	601a      	str	r2, [r3, #0]
  return result;
 8001ad8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001adc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ae8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	461a      	mov	r2, r3
 8001af0:	2300      	movs	r3, #0
 8001af2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7fe ff2e 	bl	8000954 <HAL_GetTick>
 8001af8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001afc:	e009      	b.n	8001b12 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001afe:	f7fe ff29 	bl	8000954 <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e18b      	b.n	8001e2a <HAL_RCC_OscConfig+0xe02>
 8001b12:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fa93 f2a3 	rbit	r2, r3
 8001b26:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b2a:	601a      	str	r2, [r3, #0]
  return result;
 8001b2c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001b30:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b32:	fab3 f383 	clz	r3, r3
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	095b      	lsrs	r3, r3, #5
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f043 0301 	orr.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d102      	bne.n	8001b4c <HAL_RCC_OscConfig+0xb24>
 8001b46:	4b49      	ldr	r3, [pc, #292]	; (8001c6c <HAL_RCC_OscConfig+0xc44>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	e01b      	b.n	8001b84 <HAL_RCC_OscConfig+0xb5c>
 8001b4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fa93 f2a3 	rbit	r2, r3
 8001b60:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b6a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	fa93 f2a3 	rbit	r2, r3
 8001b7a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <HAL_RCC_OscConfig+0xc44>)
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b88:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b8c:	6011      	str	r1, [r2, #0]
 8001b8e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	fa92 f1a2 	rbit	r1, r2
 8001b98:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001b9c:	6011      	str	r1, [r2, #0]
  return result;
 8001b9e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	fab2 f282 	clz	r2, r2
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	f042 0220 	orr.w	r2, r2, #32
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	f002 021f 	and.w	r2, r2, #31
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d19e      	bne.n	8001afe <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bc0:	4b2a      	ldr	r3, [pc, #168]	; (8001c6c <HAL_RCC_OscConfig+0xc44>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bc8:	1d3b      	adds	r3, r7, #4
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	4925      	ldr	r1, [pc, #148]	; (8001c6c <HAL_RCC_OscConfig+0xc44>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	604b      	str	r3, [r1, #4]
 8001bdc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001be0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001be4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	fa93 f2a3 	rbit	r2, r3
 8001bf0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bf4:	601a      	str	r2, [r3, #0]
  return result;
 8001bf6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bfa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bfc:	fab3 f383 	clz	r3, r3
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c06:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	2301      	movs	r3, #1
 8001c10:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7fe fe9f 	bl	8000954 <HAL_GetTick>
 8001c16:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c1a:	e009      	b.n	8001c30 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7fe fe9a 	bl	8000954 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0fc      	b.n	8001e2a <HAL_RCC_OscConfig+0xe02>
 8001c30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c48:	601a      	str	r2, [r3, #0]
  return result;
 8001c4a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c4e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c50:	fab3 f383 	clz	r3, r3
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	095b      	lsrs	r3, r3, #5
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d105      	bne.n	8001c70 <HAL_RCC_OscConfig+0xc48>
 8001c64:	4b01      	ldr	r3, [pc, #4]	; (8001c6c <HAL_RCC_OscConfig+0xc44>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	e01e      	b.n	8001ca8 <HAL_RCC_OscConfig+0xc80>
 8001c6a:	bf00      	nop
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	fa93 f2a3 	rbit	r2, r3
 8001c84:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	fa93 f2a3 	rbit	r2, r3
 8001c9e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	4b63      	ldr	r3, [pc, #396]	; (8001e34 <HAL_RCC_OscConfig+0xe0c>)
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cb0:	6011      	str	r1, [r2, #0]
 8001cb2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	fa92 f1a2 	rbit	r1, r2
 8001cbc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001cc0:	6011      	str	r1, [r2, #0]
  return result;
 8001cc2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	fab2 f282 	clz	r2, r2
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	f042 0220 	orr.w	r2, r2, #32
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	f002 021f 	and.w	r2, r2, #31
 8001cd8:	2101      	movs	r1, #1
 8001cda:	fa01 f202 	lsl.w	r2, r1, r2
 8001cde:	4013      	ands	r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d09b      	beq.n	8001c1c <HAL_RCC_OscConfig+0xbf4>
 8001ce4:	e0a0      	b.n	8001e28 <HAL_RCC_OscConfig+0xe00>
 8001ce6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001cee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	fa93 f2a3 	rbit	r2, r3
 8001cfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfe:	601a      	str	r2, [r3, #0]
  return result;
 8001d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d04:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	461a      	mov	r2, r3
 8001d18:	2300      	movs	r3, #0
 8001d1a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7fe fe1a 	bl	8000954 <HAL_GetTick>
 8001d20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d24:	e009      	b.n	8001d3a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d26:	f7fe fe15 	bl	8000954 <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e077      	b.n	8001e2a <HAL_RCC_OscConfig+0xe02>
 8001d3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fa93 f2a3 	rbit	r2, r3
 8001d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d52:	601a      	str	r2, [r3, #0]
  return result;
 8001d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d5a:	fab3 f383 	clz	r3, r3
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	095b      	lsrs	r3, r3, #5
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	f043 0301 	orr.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d102      	bne.n	8001d74 <HAL_RCC_OscConfig+0xd4c>
 8001d6e:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_RCC_OscConfig+0xe0c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	e01b      	b.n	8001dac <HAL_RCC_OscConfig+0xd84>
 8001d74:	f107 0320 	add.w	r3, r7, #32
 8001d78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d7c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	fa93 f2a3 	rbit	r2, r3
 8001d88:	f107 031c 	add.w	r3, r7, #28
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	f107 0318 	add.w	r3, r7, #24
 8001d92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	fa93 f2a3 	rbit	r2, r3
 8001da2:	f107 0314 	add.w	r3, r7, #20
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	4b22      	ldr	r3, [pc, #136]	; (8001e34 <HAL_RCC_OscConfig+0xe0c>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f107 0210 	add.w	r2, r7, #16
 8001db0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001db4:	6011      	str	r1, [r2, #0]
 8001db6:	f107 0210 	add.w	r2, r7, #16
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	fa92 f1a2 	rbit	r1, r2
 8001dc0:	f107 020c 	add.w	r2, r7, #12
 8001dc4:	6011      	str	r1, [r2, #0]
  return result;
 8001dc6:	f107 020c 	add.w	r2, r7, #12
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	fab2 f282 	clz	r2, r2
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	f042 0220 	orr.w	r2, r2, #32
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	f002 021f 	and.w	r2, r2, #31
 8001ddc:	2101      	movs	r1, #1
 8001dde:	fa01 f202 	lsl.w	r2, r1, r2
 8001de2:	4013      	ands	r3, r2
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d19e      	bne.n	8001d26 <HAL_RCC_OscConfig+0xcfe>
 8001de8:	e01e      	b.n	8001e28 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e018      	b.n	8001e2a <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001df8:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <HAL_RCC_OscConfig+0xe0c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e00:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e04:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d108      	bne.n	8001e24 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e000      	b.n	8001e2a <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b09e      	sub	sp, #120	; 0x78
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e162      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e50:	4b90      	ldr	r3, [pc, #576]	; (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d910      	bls.n	8001e80 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b8d      	ldr	r3, [pc, #564]	; (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f023 0207 	bic.w	r2, r3, #7
 8001e66:	498b      	ldr	r1, [pc, #556]	; (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b89      	ldr	r3, [pc, #548]	; (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d001      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e14a      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d008      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e8c:	4b82      	ldr	r3, [pc, #520]	; (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	497f      	ldr	r1, [pc, #508]	; (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f000 80dc 	beq.w	8002064 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d13c      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xf6>
 8001eb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ebc:	fa93 f3a3 	rbit	r3, r3
 8001ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec4:	fab3 f383 	clz	r3, r3
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_ClockConfig+0xa6>
 8001ed8:	4b6f      	ldr	r3, [pc, #444]	; (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	e00f      	b.n	8001efe <HAL_RCC_ClockConfig+0xc6>
 8001ede:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ee6:	fa93 f3a3 	rbit	r3, r3
 8001eea:	667b      	str	r3, [r7, #100]	; 0x64
 8001eec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ef0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ef4:	fa93 f3a3 	rbit	r3, r3
 8001ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001efa:	4b67      	ldr	r3, [pc, #412]	; (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f02:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f06:	fa92 f2a2 	rbit	r2, r2
 8001f0a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f0e:	fab2 f282 	clz	r2, r2
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	f042 0220 	orr.w	r2, r2, #32
 8001f18:	b2d2      	uxtb	r2, r2
 8001f1a:	f002 021f 	and.w	r2, r2, #31
 8001f1e:	2101      	movs	r1, #1
 8001f20:	fa01 f202 	lsl.w	r2, r1, r2
 8001f24:	4013      	ands	r3, r2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d17b      	bne.n	8002022 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0f3      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d13c      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0x178>
 8001f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f3e:	fa93 f3a3 	rbit	r3, r3
 8001f42:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f46:	fab3 f383 	clz	r3, r3
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	095b      	lsrs	r3, r3, #5
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d102      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x128>
 8001f5a:	4b4f      	ldr	r3, [pc, #316]	; (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	e00f      	b.n	8001f80 <HAL_RCC_ClockConfig+0x148>
 8001f60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f64:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f68:	fa93 f3a3 	rbit	r3, r3
 8001f6c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f72:	643b      	str	r3, [r7, #64]	; 0x40
 8001f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f76:	fa93 f3a3 	rbit	r3, r3
 8001f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f7c:	4b46      	ldr	r3, [pc, #280]	; (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f84:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f88:	fa92 f2a2 	rbit	r2, r2
 8001f8c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f90:	fab2 f282 	clz	r2, r2
 8001f94:	b2d2      	uxtb	r2, r2
 8001f96:	f042 0220 	orr.w	r2, r2, #32
 8001f9a:	b2d2      	uxtb	r2, r2
 8001f9c:	f002 021f 	and.w	r2, r2, #31
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d13a      	bne.n	8002022 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0b2      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	095b      	lsrs	r3, r3, #5
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d102      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x1a0>
 8001fd2:	4b31      	ldr	r3, [pc, #196]	; (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	e00d      	b.n	8001ff4 <HAL_RCC_ClockConfig+0x1bc>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	623b      	str	r3, [r7, #32]
 8001fe8:	6a3b      	ldr	r3, [r7, #32]
 8001fea:	fa93 f3a3 	rbit	r3, r3
 8001fee:	61fb      	str	r3, [r7, #28]
 8001ff0:	4b29      	ldr	r3, [pc, #164]	; (8002098 <HAL_RCC_ClockConfig+0x260>)
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	61ba      	str	r2, [r7, #24]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	fa92 f2a2 	rbit	r2, r2
 8001ffe:	617a      	str	r2, [r7, #20]
  return result;
 8002000:	697a      	ldr	r2, [r7, #20]
 8002002:	fab2 f282 	clz	r2, r2
 8002006:	b2d2      	uxtb	r2, r2
 8002008:	f042 0220 	orr.w	r2, r2, #32
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f002 021f 	and.w	r2, r2, #31
 8002012:	2101      	movs	r1, #1
 8002014:	fa01 f202 	lsl.w	r2, r1, r2
 8002018:	4013      	ands	r3, r2
 800201a:	2b00      	cmp	r3, #0
 800201c:	d101      	bne.n	8002022 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e079      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002022:	4b1d      	ldr	r3, [pc, #116]	; (8002098 <HAL_RCC_ClockConfig+0x260>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f023 0203 	bic.w	r2, r3, #3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	491a      	ldr	r1, [pc, #104]	; (8002098 <HAL_RCC_ClockConfig+0x260>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002034:	f7fe fc8e 	bl	8000954 <HAL_GetTick>
 8002038:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	e00a      	b.n	8002052 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800203c:	f7fe fc8a 	bl	8000954 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	f241 3288 	movw	r2, #5000	; 0x1388
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e061      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002052:	4b11      	ldr	r3, [pc, #68]	; (8002098 <HAL_RCC_ClockConfig+0x260>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f003 020c 	and.w	r2, r3, #12
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	429a      	cmp	r2, r3
 8002062:	d1eb      	bne.n	800203c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d214      	bcs.n	800209c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f023 0207 	bic.w	r2, r3, #7
 800207a:	4906      	ldr	r1, [pc, #24]	; (8002094 <HAL_RCC_ClockConfig+0x25c>)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b04      	ldr	r3, [pc, #16]	; (8002094 <HAL_RCC_ClockConfig+0x25c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0307 	and.w	r3, r3, #7
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d005      	beq.n	800209c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e040      	b.n	8002116 <HAL_RCC_ClockConfig+0x2de>
 8002094:	40022000 	.word	0x40022000
 8002098:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d008      	beq.n	80020ba <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <HAL_RCC_ClockConfig+0x2e8>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	491a      	ldr	r1, [pc, #104]	; (8002120 <HAL_RCC_ClockConfig+0x2e8>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d009      	beq.n	80020da <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020c6:	4b16      	ldr	r3, [pc, #88]	; (8002120 <HAL_RCC_ClockConfig+0x2e8>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4912      	ldr	r1, [pc, #72]	; (8002120 <HAL_RCC_ClockConfig+0x2e8>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020da:	f000 f829 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020de:	4601      	mov	r1, r0
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <HAL_RCC_ClockConfig+0x2e8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e8:	22f0      	movs	r2, #240	; 0xf0
 80020ea:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	fa92 f2a2 	rbit	r2, r2
 80020f2:	60fa      	str	r2, [r7, #12]
  return result;
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	fab2 f282 	clz	r2, r2
 80020fa:	b2d2      	uxtb	r2, r2
 80020fc:	40d3      	lsrs	r3, r2
 80020fe:	4a09      	ldr	r2, [pc, #36]	; (8002124 <HAL_RCC_ClockConfig+0x2ec>)
 8002100:	5cd3      	ldrb	r3, [r2, r3]
 8002102:	fa21 f303 	lsr.w	r3, r1, r3
 8002106:	4a08      	ldr	r2, [pc, #32]	; (8002128 <HAL_RCC_ClockConfig+0x2f0>)
 8002108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_RCC_ClockConfig+0x2f4>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe fbde 	bl	80008d0 <HAL_InitTick>
  
  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3778      	adds	r7, #120	; 0x78
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	080039f8 	.word	0x080039f8
 8002128:	20000020 	.word	0x20000020
 800212c:	20000024 	.word	0x20000024

08002130 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b08b      	sub	sp, #44	; 0x2c
 8002134:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	2300      	movs	r3, #0
 8002140:	627b      	str	r3, [r7, #36]	; 0x24
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800214a:	4b28      	ldr	r3, [pc, #160]	; (80021ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	2b04      	cmp	r3, #4
 8002158:	d002      	beq.n	8002160 <HAL_RCC_GetSysClockFreq+0x30>
 800215a:	2b08      	cmp	r3, #8
 800215c:	d003      	beq.n	8002166 <HAL_RCC_GetSysClockFreq+0x36>
 800215e:	e03c      	b.n	80021da <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002162:	623b      	str	r3, [r7, #32]
      break;
 8002164:	e03c      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800216c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002170:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002172:	68ba      	ldr	r2, [r7, #8]
 8002174:	fa92 f2a2 	rbit	r2, r2
 8002178:	607a      	str	r2, [r7, #4]
  return result;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	fab2 f282 	clz	r2, r2
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	40d3      	lsrs	r3, r2
 8002184:	4a1b      	ldr	r2, [pc, #108]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002186:	5cd3      	ldrb	r3, [r2, r3]
 8002188:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <HAL_RCC_GetSysClockFreq+0xbc>)
 800218c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	220f      	movs	r2, #15
 8002194:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	fa92 f2a2 	rbit	r2, r2
 800219c:	60fa      	str	r2, [r7, #12]
  return result;
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	fab2 f282 	clz	r2, r2
 80021a4:	b2d2      	uxtb	r2, r2
 80021a6:	40d3      	lsrs	r3, r2
 80021a8:	4a13      	ldr	r2, [pc, #76]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021b8:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	fb02 f303 	mul.w	r3, r2, r3
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
 80021c8:	e004      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	4a0b      	ldr	r2, [pc, #44]	; (80021fc <HAL_RCC_GetSysClockFreq+0xcc>)
 80021ce:	fb02 f303 	mul.w	r3, r2, r3
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	623b      	str	r3, [r7, #32]
      break;
 80021d8:	e002      	b.n	80021e0 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021dc:	623b      	str	r3, [r7, #32]
      break;
 80021de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021e0:	6a3b      	ldr	r3, [r7, #32]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	372c      	adds	r7, #44	; 0x2c
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr
 80021ec:	40021000 	.word	0x40021000
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	08003a10 	.word	0x08003a10
 80021f8:	08003a20 	.word	0x08003a20
 80021fc:	003d0900 	.word	0x003d0900

08002200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002204:	4b02      	ldr	r3, [pc, #8]	; (8002210 <HAL_RCC_GetHCLKFreq+0x10>)
 8002206:	681b      	ldr	r3, [r3, #0]
}
 8002208:	4618      	mov	r0, r3
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr
 8002210:	20000020 	.word	0x20000020

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800221a:	f7ff fff1 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 800221e:	4601      	mov	r1, r0
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002228:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800222c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	fa92 f2a2 	rbit	r2, r2
 8002234:	603a      	str	r2, [r7, #0]
  return result;
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	fab2 f282 	clz	r2, r2
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	40d3      	lsrs	r3, r2
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	08003a08 	.word	0x08003a08

08002258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800225e:	f7ff ffcf 	bl	8002200 <HAL_RCC_GetHCLKFreq>
 8002262:	4601      	mov	r1, r0
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800226c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002270:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	fa92 f2a2 	rbit	r2, r2
 8002278:	603a      	str	r2, [r7, #0]
  return result;
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	fab2 f282 	clz	r2, r2
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	40d3      	lsrs	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	08003a08 	.word	0x08003a08

0800229c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b092      	sub	sp, #72	; 0x48
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80d4 	beq.w	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c0:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10e      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	4b4b      	ldr	r3, [pc, #300]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4a4a      	ldr	r2, [pc, #296]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d6:	61d3      	str	r3, [r2, #28]
 80022d8:	4b48      	ldr	r3, [pc, #288]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b45      	ldr	r3, [pc, #276]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b42      	ldr	r3, [pc, #264]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a41      	ldr	r2, [pc, #260]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7fe fb27 	bl	8000954 <HAL_GetTick>
 8002306:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7fe fb23 	bl	8000954 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b64      	cmp	r3, #100	; 0x64
 8002316:	d901      	bls.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e169      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b38      	ldr	r3, [pc, #224]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002328:	4b34      	ldr	r3, [pc, #208]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002330:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8084 	beq.w	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002342:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002344:	429a      	cmp	r2, r3
 8002346:	d07c      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002348:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4b26      	ldr	r3, [pc, #152]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	461a      	mov	r2, r3
 8002372:	2301      	movs	r3, #1
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	461a      	mov	r2, r3
 8002396:	2300      	movs	r3, #0
 8002398:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800239a:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d04b      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fad3 	bl	8000954 <HAL_GetTick>
 80023ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe facf 	bl	8000954 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e113      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80023c8:	2302      	movs	r3, #2
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
 80023d4:	2302      	movs	r3, #2
 80023d6:	623b      	str	r3, [r7, #32]
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	61fb      	str	r3, [r7, #28]
  return result;
 80023e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d108      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023f6:	4b01      	ldr	r3, [pc, #4]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	e00d      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023fc:	40021000 	.word	0x40021000
 8002400:	40007000 	.word	0x40007000
 8002404:	10908100 	.word	0x10908100
 8002408:	2302      	movs	r3, #2
 800240a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	4b78      	ldr	r3, [pc, #480]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	2202      	movs	r2, #2
 800241a:	613a      	str	r2, [r7, #16]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	fa92 f2a2 	rbit	r2, r2
 8002422:	60fa      	str	r2, [r7, #12]
  return result;
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	fab2 f282 	clz	r2, r2
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f002 021f 	and.w	r2, r2, #31
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f202 	lsl.w	r2, r1, r2
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0b7      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002442:	4b6d      	ldr	r3, [pc, #436]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	496a      	ldr	r1, [pc, #424]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002450:	4313      	orrs	r3, r2
 8002452:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002454:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245c:	4b66      	ldr	r3, [pc, #408]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	4a65      	ldr	r2, [pc, #404]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002466:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002474:	4b60      	ldr	r3, [pc, #384]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f023 0203 	bic.w	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	495d      	ldr	r1, [pc, #372]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002482:	4313      	orrs	r3, r2
 8002484:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d008      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002492:	4b59      	ldr	r3, [pc, #356]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	4956      	ldr	r1, [pc, #344]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024b0:	4b51      	ldr	r3, [pc, #324]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	494e      	ldr	r1, [pc, #312]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ce:	4b4a      	ldr	r3, [pc, #296]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f023 0210 	bic.w	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4947      	ldr	r1, [pc, #284]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80024ec:	4b42      	ldr	r3, [pc, #264]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	493f      	ldr	r1, [pc, #252]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800250a:	4b3b      	ldr	r3, [pc, #236]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f023 0220 	bic.w	r2, r3, #32
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4938      	ldr	r1, [pc, #224]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002518:	4313      	orrs	r3, r2
 800251a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0308 	and.w	r3, r3, #8
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	4930      	ldr	r1, [pc, #192]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002536:	4313      	orrs	r3, r2
 8002538:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0310 	and.w	r3, r3, #16
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002546:	4b2c      	ldr	r3, [pc, #176]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	4929      	ldr	r1, [pc, #164]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002554:	4313      	orrs	r3, r2
 8002556:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	4921      	ldr	r1, [pc, #132]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002582:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	491a      	ldr	r1, [pc, #104]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80025a0:	4b15      	ldr	r3, [pc, #84]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	4912      	ldr	r1, [pc, #72]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	490b      	ldr	r1, [pc, #44]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e8:	4903      	ldr	r1, [pc, #12]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3748      	adds	r7, #72	; 0x48
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40021000 	.word	0x40021000

080025fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e040      	b.n	8002690 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002612:	2b00      	cmp	r3, #0
 8002614:	d106      	bne.n	8002624 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7fe f8a4 	bl	800076c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2224      	movs	r2, #36	; 0x24
 8002628:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f82c 	bl	8002698 <UART_SetConfig>
 8002640:	4603      	mov	r3, r0
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e022      	b.n	8002690 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f9f4 	bl	8002a40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002666:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002676:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f042 0201 	orr.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fa7a 	bl	8002b82 <UART_CheckIdleState>
 800268e:	4603      	mov	r3, r0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b088      	sub	sp, #32
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	691b      	ldr	r3, [r3, #16]
 80026ac:	431a      	orrs	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69db      	ldr	r3, [r3, #28]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80026c6:	f023 030c 	bic.w	r3, r3, #12
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	6979      	ldr	r1, [r7, #20]
 80026d0:	430b      	orrs	r3, r1
 80026d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68da      	ldr	r2, [r3, #12]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	430a      	orrs	r2, r1
 800270c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4aae      	ldr	r2, [pc, #696]	; (80029cc <UART_SetConfig+0x334>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d120      	bne.n	800275a <UART_SetConfig+0xc2>
 8002718:	4bad      	ldr	r3, [pc, #692]	; (80029d0 <UART_SetConfig+0x338>)
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	f003 0303 	and.w	r3, r3, #3
 8002720:	2b03      	cmp	r3, #3
 8002722:	d817      	bhi.n	8002754 <UART_SetConfig+0xbc>
 8002724:	a201      	add	r2, pc, #4	; (adr r2, 800272c <UART_SetConfig+0x94>)
 8002726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272a:	bf00      	nop
 800272c:	0800273d 	.word	0x0800273d
 8002730:	08002749 	.word	0x08002749
 8002734:	0800274f 	.word	0x0800274f
 8002738:	08002743 	.word	0x08002743
 800273c:	2301      	movs	r3, #1
 800273e:	77fb      	strb	r3, [r7, #31]
 8002740:	e0b5      	b.n	80028ae <UART_SetConfig+0x216>
 8002742:	2302      	movs	r3, #2
 8002744:	77fb      	strb	r3, [r7, #31]
 8002746:	e0b2      	b.n	80028ae <UART_SetConfig+0x216>
 8002748:	2304      	movs	r3, #4
 800274a:	77fb      	strb	r3, [r7, #31]
 800274c:	e0af      	b.n	80028ae <UART_SetConfig+0x216>
 800274e:	2308      	movs	r3, #8
 8002750:	77fb      	strb	r3, [r7, #31]
 8002752:	e0ac      	b.n	80028ae <UART_SetConfig+0x216>
 8002754:	2310      	movs	r3, #16
 8002756:	77fb      	strb	r3, [r7, #31]
 8002758:	e0a9      	b.n	80028ae <UART_SetConfig+0x216>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a9d      	ldr	r2, [pc, #628]	; (80029d4 <UART_SetConfig+0x33c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d124      	bne.n	80027ae <UART_SetConfig+0x116>
 8002764:	4b9a      	ldr	r3, [pc, #616]	; (80029d0 <UART_SetConfig+0x338>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800276c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002770:	d011      	beq.n	8002796 <UART_SetConfig+0xfe>
 8002772:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002776:	d817      	bhi.n	80027a8 <UART_SetConfig+0x110>
 8002778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800277c:	d011      	beq.n	80027a2 <UART_SetConfig+0x10a>
 800277e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002782:	d811      	bhi.n	80027a8 <UART_SetConfig+0x110>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <UART_SetConfig+0xf8>
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d006      	beq.n	800279c <UART_SetConfig+0x104>
 800278e:	e00b      	b.n	80027a8 <UART_SetConfig+0x110>
 8002790:	2300      	movs	r3, #0
 8002792:	77fb      	strb	r3, [r7, #31]
 8002794:	e08b      	b.n	80028ae <UART_SetConfig+0x216>
 8002796:	2302      	movs	r3, #2
 8002798:	77fb      	strb	r3, [r7, #31]
 800279a:	e088      	b.n	80028ae <UART_SetConfig+0x216>
 800279c:	2304      	movs	r3, #4
 800279e:	77fb      	strb	r3, [r7, #31]
 80027a0:	e085      	b.n	80028ae <UART_SetConfig+0x216>
 80027a2:	2308      	movs	r3, #8
 80027a4:	77fb      	strb	r3, [r7, #31]
 80027a6:	e082      	b.n	80028ae <UART_SetConfig+0x216>
 80027a8:	2310      	movs	r3, #16
 80027aa:	77fb      	strb	r3, [r7, #31]
 80027ac:	e07f      	b.n	80028ae <UART_SetConfig+0x216>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a89      	ldr	r2, [pc, #548]	; (80029d8 <UART_SetConfig+0x340>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d124      	bne.n	8002802 <UART_SetConfig+0x16a>
 80027b8:	4b85      	ldr	r3, [pc, #532]	; (80029d0 <UART_SetConfig+0x338>)
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80027c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027c4:	d011      	beq.n	80027ea <UART_SetConfig+0x152>
 80027c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80027ca:	d817      	bhi.n	80027fc <UART_SetConfig+0x164>
 80027cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027d0:	d011      	beq.n	80027f6 <UART_SetConfig+0x15e>
 80027d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80027d6:	d811      	bhi.n	80027fc <UART_SetConfig+0x164>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d003      	beq.n	80027e4 <UART_SetConfig+0x14c>
 80027dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80027e0:	d006      	beq.n	80027f0 <UART_SetConfig+0x158>
 80027e2:	e00b      	b.n	80027fc <UART_SetConfig+0x164>
 80027e4:	2300      	movs	r3, #0
 80027e6:	77fb      	strb	r3, [r7, #31]
 80027e8:	e061      	b.n	80028ae <UART_SetConfig+0x216>
 80027ea:	2302      	movs	r3, #2
 80027ec:	77fb      	strb	r3, [r7, #31]
 80027ee:	e05e      	b.n	80028ae <UART_SetConfig+0x216>
 80027f0:	2304      	movs	r3, #4
 80027f2:	77fb      	strb	r3, [r7, #31]
 80027f4:	e05b      	b.n	80028ae <UART_SetConfig+0x216>
 80027f6:	2308      	movs	r3, #8
 80027f8:	77fb      	strb	r3, [r7, #31]
 80027fa:	e058      	b.n	80028ae <UART_SetConfig+0x216>
 80027fc:	2310      	movs	r3, #16
 80027fe:	77fb      	strb	r3, [r7, #31]
 8002800:	e055      	b.n	80028ae <UART_SetConfig+0x216>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a75      	ldr	r2, [pc, #468]	; (80029dc <UART_SetConfig+0x344>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d124      	bne.n	8002856 <UART_SetConfig+0x1be>
 800280c:	4b70      	ldr	r3, [pc, #448]	; (80029d0 <UART_SetConfig+0x338>)
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002814:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002818:	d011      	beq.n	800283e <UART_SetConfig+0x1a6>
 800281a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800281e:	d817      	bhi.n	8002850 <UART_SetConfig+0x1b8>
 8002820:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002824:	d011      	beq.n	800284a <UART_SetConfig+0x1b2>
 8002826:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800282a:	d811      	bhi.n	8002850 <UART_SetConfig+0x1b8>
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <UART_SetConfig+0x1a0>
 8002830:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002834:	d006      	beq.n	8002844 <UART_SetConfig+0x1ac>
 8002836:	e00b      	b.n	8002850 <UART_SetConfig+0x1b8>
 8002838:	2300      	movs	r3, #0
 800283a:	77fb      	strb	r3, [r7, #31]
 800283c:	e037      	b.n	80028ae <UART_SetConfig+0x216>
 800283e:	2302      	movs	r3, #2
 8002840:	77fb      	strb	r3, [r7, #31]
 8002842:	e034      	b.n	80028ae <UART_SetConfig+0x216>
 8002844:	2304      	movs	r3, #4
 8002846:	77fb      	strb	r3, [r7, #31]
 8002848:	e031      	b.n	80028ae <UART_SetConfig+0x216>
 800284a:	2308      	movs	r3, #8
 800284c:	77fb      	strb	r3, [r7, #31]
 800284e:	e02e      	b.n	80028ae <UART_SetConfig+0x216>
 8002850:	2310      	movs	r3, #16
 8002852:	77fb      	strb	r3, [r7, #31]
 8002854:	e02b      	b.n	80028ae <UART_SetConfig+0x216>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a61      	ldr	r2, [pc, #388]	; (80029e0 <UART_SetConfig+0x348>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d124      	bne.n	80028aa <UART_SetConfig+0x212>
 8002860:	4b5b      	ldr	r3, [pc, #364]	; (80029d0 <UART_SetConfig+0x338>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002864:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002868:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800286c:	d011      	beq.n	8002892 <UART_SetConfig+0x1fa>
 800286e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002872:	d817      	bhi.n	80028a4 <UART_SetConfig+0x20c>
 8002874:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002878:	d011      	beq.n	800289e <UART_SetConfig+0x206>
 800287a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800287e:	d811      	bhi.n	80028a4 <UART_SetConfig+0x20c>
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <UART_SetConfig+0x1f4>
 8002884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002888:	d006      	beq.n	8002898 <UART_SetConfig+0x200>
 800288a:	e00b      	b.n	80028a4 <UART_SetConfig+0x20c>
 800288c:	2300      	movs	r3, #0
 800288e:	77fb      	strb	r3, [r7, #31]
 8002890:	e00d      	b.n	80028ae <UART_SetConfig+0x216>
 8002892:	2302      	movs	r3, #2
 8002894:	77fb      	strb	r3, [r7, #31]
 8002896:	e00a      	b.n	80028ae <UART_SetConfig+0x216>
 8002898:	2304      	movs	r3, #4
 800289a:	77fb      	strb	r3, [r7, #31]
 800289c:	e007      	b.n	80028ae <UART_SetConfig+0x216>
 800289e:	2308      	movs	r3, #8
 80028a0:	77fb      	strb	r3, [r7, #31]
 80028a2:	e004      	b.n	80028ae <UART_SetConfig+0x216>
 80028a4:	2310      	movs	r3, #16
 80028a6:	77fb      	strb	r3, [r7, #31]
 80028a8:	e001      	b.n	80028ae <UART_SetConfig+0x216>
 80028aa:	2310      	movs	r3, #16
 80028ac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028b6:	d15c      	bne.n	8002972 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 80028b8:	7ffb      	ldrb	r3, [r7, #31]
 80028ba:	2b08      	cmp	r3, #8
 80028bc:	d827      	bhi.n	800290e <UART_SetConfig+0x276>
 80028be:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <UART_SetConfig+0x22c>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	080028e9 	.word	0x080028e9
 80028c8:	080028f1 	.word	0x080028f1
 80028cc:	080028f9 	.word	0x080028f9
 80028d0:	0800290f 	.word	0x0800290f
 80028d4:	080028ff 	.word	0x080028ff
 80028d8:	0800290f 	.word	0x0800290f
 80028dc:	0800290f 	.word	0x0800290f
 80028e0:	0800290f 	.word	0x0800290f
 80028e4:	08002907 	.word	0x08002907
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028e8:	f7ff fc94 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 80028ec:	61b8      	str	r0, [r7, #24]
        break;
 80028ee:	e013      	b.n	8002918 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028f0:	f7ff fcb2 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 80028f4:	61b8      	str	r0, [r7, #24]
        break;
 80028f6:	e00f      	b.n	8002918 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028f8:	4b3a      	ldr	r3, [pc, #232]	; (80029e4 <UART_SetConfig+0x34c>)
 80028fa:	61bb      	str	r3, [r7, #24]
        break;
 80028fc:	e00c      	b.n	8002918 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028fe:	f7ff fc17 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8002902:	61b8      	str	r0, [r7, #24]
        break;
 8002904:	e008      	b.n	8002918 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002906:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800290a:	61bb      	str	r3, [r7, #24]
        break;
 800290c:	e004      	b.n	8002918 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	77bb      	strb	r3, [r7, #30]
        break;
 8002916:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8085 	beq.w	8002a2a <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	005a      	lsls	r2, r3, #1
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	085b      	lsrs	r3, r3, #1
 800292a:	441a      	add	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	fbb2 f3f3 	udiv	r3, r2, r3
 8002934:	b29b      	uxth	r3, r3
 8002936:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2b0f      	cmp	r3, #15
 800293c:	d916      	bls.n	800296c <UART_SetConfig+0x2d4>
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002944:	d212      	bcs.n	800296c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f023 030f 	bic.w	r3, r3, #15
 800294e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	b29b      	uxth	r3, r3
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	b29a      	uxth	r2, r3
 800295c:	89fb      	ldrh	r3, [r7, #14]
 800295e:	4313      	orrs	r3, r2
 8002960:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	89fa      	ldrh	r2, [r7, #14]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	e05e      	b.n	8002a2a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	77bb      	strb	r3, [r7, #30]
 8002970:	e05b      	b.n	8002a2a <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002972:	7ffb      	ldrb	r3, [r7, #31]
 8002974:	2b08      	cmp	r3, #8
 8002976:	d837      	bhi.n	80029e8 <UART_SetConfig+0x350>
 8002978:	a201      	add	r2, pc, #4	; (adr r2, 8002980 <UART_SetConfig+0x2e8>)
 800297a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297e:	bf00      	nop
 8002980:	080029a5 	.word	0x080029a5
 8002984:	080029ad 	.word	0x080029ad
 8002988:	080029b5 	.word	0x080029b5
 800298c:	080029e9 	.word	0x080029e9
 8002990:	080029bb 	.word	0x080029bb
 8002994:	080029e9 	.word	0x080029e9
 8002998:	080029e9 	.word	0x080029e9
 800299c:	080029e9 	.word	0x080029e9
 80029a0:	080029c3 	.word	0x080029c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029a4:	f7ff fc36 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 80029a8:	61b8      	str	r0, [r7, #24]
        break;
 80029aa:	e022      	b.n	80029f2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029ac:	f7ff fc54 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 80029b0:	61b8      	str	r0, [r7, #24]
        break;
 80029b2:	e01e      	b.n	80029f2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029b4:	4b0b      	ldr	r3, [pc, #44]	; (80029e4 <UART_SetConfig+0x34c>)
 80029b6:	61bb      	str	r3, [r7, #24]
        break;
 80029b8:	e01b      	b.n	80029f2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029ba:	f7ff fbb9 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80029be:	61b8      	str	r0, [r7, #24]
        break;
 80029c0:	e017      	b.n	80029f2 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029c6:	61bb      	str	r3, [r7, #24]
        break;
 80029c8:	e013      	b.n	80029f2 <UART_SetConfig+0x35a>
 80029ca:	bf00      	nop
 80029cc:	40013800 	.word	0x40013800
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40004400 	.word	0x40004400
 80029d8:	40004800 	.word	0x40004800
 80029dc:	40004c00 	.word	0x40004c00
 80029e0:	40005000 	.word	0x40005000
 80029e4:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	77bb      	strb	r3, [r7, #30]
        break;
 80029f0:	bf00      	nop
    }

    if (pclk != 0U)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d018      	beq.n	8002a2a <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	085a      	lsrs	r2, r3, #1
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	441a      	add	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	2b0f      	cmp	r3, #15
 8002a12:	d908      	bls.n	8002a26 <UART_SetConfig+0x38e>
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1a:	d204      	bcs.n	8002a26 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	e001      	b.n	8002a2a <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002a36:	7fbb      	ldrb	r3, [r7, #30]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3720      	adds	r7, #32
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00a      	beq.n	8002a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	430a      	orrs	r2, r1
 8002a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	430a      	orrs	r2, r1
 8002a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00a      	beq.n	8002aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	430a      	orrs	r2, r1
 8002ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	f003 0310 	and.w	r3, r3, #16
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d00a      	beq.n	8002af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	430a      	orrs	r2, r1
 8002af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00a      	beq.n	8002b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d01a      	beq.n	8002b56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b3e:	d10a      	bne.n	8002b56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	605a      	str	r2, [r3, #4]
  }
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr

08002b82 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af02      	add	r7, sp, #8
 8002b88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b92:	f7fd fedf 	bl	8000954 <HAL_GetTick>
 8002b96:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b08      	cmp	r3, #8
 8002ba4:	d10e      	bne.n	8002bc4 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ba6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f82d 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e023      	b.n	8002c0c <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0304 	and.w	r3, r3, #4
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d10e      	bne.n	8002bf0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002bd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f817 	bl	8002c14 <UART_WaitOnFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	e00d      	b.n	8002c0c <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b09c      	sub	sp, #112	; 0x70
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	603b      	str	r3, [r7, #0]
 8002c20:	4613      	mov	r3, r2
 8002c22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c24:	e0a5      	b.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c2c:	f000 80a1 	beq.w	8002d72 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c30:	f7fd fe90 	bl	8000954 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d302      	bcc.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x32>
 8002c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d13e      	bne.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c4e:	e853 3f00 	ldrex	r3, [r3]
 8002c52:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002c54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c5a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c66:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c6c:	e841 2300 	strex	r3, r2, [r1]
 8002c70:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002c72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1e6      	bne.n	8002c46 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	3308      	adds	r3, #8
 8002c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c82:	e853 3f00 	ldrex	r3, [r3]
 8002c86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c8a:	f023 0301 	bic.w	r3, r3, #1
 8002c8e:	663b      	str	r3, [r7, #96]	; 0x60
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3308      	adds	r3, #8
 8002c96:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c98:	64ba      	str	r2, [r7, #72]	; 0x48
 8002c9a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ca0:	e841 2300 	strex	r3, r2, [r1]
 8002ca4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1e5      	bne.n	8002c78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2220      	movs	r2, #32
 8002cb6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e067      	b.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d04f      	beq.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ce0:	d147      	bne.n	8002d72 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d00:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002d0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e6      	bne.n	8002cec <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3308      	adds	r3, #8
 8002d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	66bb      	str	r3, [r7, #104]	; 0x68
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002d3e:	623a      	str	r2, [r7, #32]
 8002d40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	69f9      	ldr	r1, [r7, #28]
 8002d44:	6a3a      	ldr	r2, [r7, #32]
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e5      	bne.n	8002d1e <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e010      	b.n	8002d94 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	68ba      	ldr	r2, [r7, #8]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	bf0c      	ite	eq
 8002d82:	2301      	moveq	r3, #1
 8002d84:	2300      	movne	r3, #0
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	461a      	mov	r2, r3
 8002d8a:	79fb      	ldrb	r3, [r7, #7]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	f43f af4a 	beq.w	8002c26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3770      	adds	r7, #112	; 0x70
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <AES_keyschedule_enc_LL>:
 8002d9c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002da0:	1092      	asrs	r2, r2, #2
 8002da2:	2a00      	cmp	r2, #0
 8002da4:	b084      	sub	sp, #16
 8002da6:	dd06      	ble.n	8002db6 <AES_keyschedule_enc_LL+0x1a>
 8002da8:	0095      	lsls	r5, r2, #2
 8002daa:	2300      	movs	r3, #0
 8002dac:	58c4      	ldr	r4, [r0, r3]
 8002dae:	50cc      	str	r4, [r1, r3]
 8002db0:	3304      	adds	r3, #4
 8002db2:	42ab      	cmp	r3, r5
 8002db4:	d1fa      	bne.n	8002dac <AES_keyschedule_enc_LL+0x10>
 8002db6:	2a06      	cmp	r2, #6
 8002db8:	d007      	beq.n	8002dca <AES_keyschedule_enc_LL+0x2e>
 8002dba:	2a08      	cmp	r2, #8
 8002dbc:	d06c      	beq.n	8002e98 <AES_keyschedule_enc_LL+0xfc>
 8002dbe:	2a04      	cmp	r2, #4
 8002dc0:	d03a      	beq.n	8002e38 <AES_keyschedule_enc_LL+0x9c>
 8002dc2:	b004      	add	sp, #16
 8002dc4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002dc8:	4770      	bx	lr
 8002dca:	f8df c190 	ldr.w	ip, [pc, #400]	; 8002f5c <AES_keyschedule_enc_LL+0x1c0>
 8002dce:	684c      	ldr	r4, [r1, #4]
 8002dd0:	688d      	ldr	r5, [r1, #8]
 8002dd2:	68c8      	ldr	r0, [r1, #12]
 8002dd4:	680e      	ldr	r6, [r1, #0]
 8002dd6:	4b60      	ldr	r3, [pc, #384]	; (8002f58 <AES_keyschedule_enc_LL+0x1bc>)
 8002dd8:	f101 08a8 	add.w	r8, r1, #168	; 0xa8
 8002ddc:	e005      	b.n	8002dea <AES_keyschedule_enc_LL+0x4e>
 8002dde:	690f      	ldr	r7, [r1, #16]
 8002de0:	4047      	eors	r7, r0
 8002de2:	407a      	eors	r2, r7
 8002de4:	62ca      	str	r2, [r1, #44]	; 0x2c
 8002de6:	628f      	str	r7, [r1, #40]	; 0x28
 8002de8:	3118      	adds	r1, #24
 8002dea:	694a      	ldr	r2, [r1, #20]
 8002dec:	f85c af04 	ldr.w	sl, [ip, #4]!
 8002df0:	fa5f f982 	uxtb.w	r9, r2
 8002df4:	0e17      	lsrs	r7, r2, #24
 8002df6:	f813 9009 	ldrb.w	r9, [r3, r9]
 8002dfa:	5ddf      	ldrb	r7, [r3, r7]
 8002dfc:	f3c2 4b07 	ubfx	fp, r2, #16, #8
 8002e00:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8002e04:	f3c2 2907 	ubfx	r9, r2, #8, #8
 8002e08:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8002e0c:	f813 9009 	ldrb.w	r9, [r3, r9]
 8002e10:	ea47 670b 	orr.w	r7, r7, fp, lsl #24
 8002e14:	ea86 060a 	eor.w	r6, r6, sl
 8002e18:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 8002e1c:	407e      	eors	r6, r7
 8002e1e:	4074      	eors	r4, r6
 8002e20:	4065      	eors	r5, r4
 8002e22:	4068      	eors	r0, r5
 8002e24:	4541      	cmp	r1, r8
 8002e26:	6248      	str	r0, [r1, #36]	; 0x24
 8002e28:	620d      	str	r5, [r1, #32]
 8002e2a:	61cc      	str	r4, [r1, #28]
 8002e2c:	618e      	str	r6, [r1, #24]
 8002e2e:	d1d6      	bne.n	8002dde <AES_keyschedule_enc_LL+0x42>
 8002e30:	b004      	add	sp, #16
 8002e32:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e36:	4770      	bx	lr
 8002e38:	4608      	mov	r0, r1
 8002e3a:	4f48      	ldr	r7, [pc, #288]	; (8002f5c <AES_keyschedule_enc_LL+0x1c0>)
 8002e3c:	f850 4b90 	ldr.w	r4, [r0], #144
 8002e40:	68ca      	ldr	r2, [r1, #12]
 8002e42:	684d      	ldr	r5, [r1, #4]
 8002e44:	688e      	ldr	r6, [r1, #8]
 8002e46:	4b44      	ldr	r3, [pc, #272]	; (8002f58 <AES_keyschedule_enc_LL+0x1bc>)
 8002e48:	e000      	b.n	8002e4c <AES_keyschedule_enc_LL+0xb0>
 8002e4a:	3110      	adds	r1, #16
 8002e4c:	fa5f f982 	uxtb.w	r9, r2
 8002e50:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8002e54:	f3c2 4807 	ubfx	r8, r2, #16, #8
 8002e58:	f813 b009 	ldrb.w	fp, [r3, r9]
 8002e5c:	f813 c00c 	ldrb.w	ip, [r3, ip]
 8002e60:	f813 a008 	ldrb.w	sl, [r3, r8]
 8002e64:	f857 8f04 	ldr.w	r8, [r7, #4]!
 8002e68:	f3c2 2907 	ubfx	r9, r2, #8, #8
 8002e6c:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
 8002e70:	f813 9009 	ldrb.w	r9, [r3, r9]
 8002e74:	ea4c 6c0a 	orr.w	ip, ip, sl, lsl #24
 8002e78:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8002e7c:	ea84 0408 	eor.w	r4, r4, r8
 8002e80:	ea84 040c 	eor.w	r4, r4, ip
 8002e84:	4065      	eors	r5, r4
 8002e86:	406e      	eors	r6, r5
 8002e88:	4072      	eors	r2, r6
 8002e8a:	4281      	cmp	r1, r0
 8002e8c:	61ca      	str	r2, [r1, #28]
 8002e8e:	618e      	str	r6, [r1, #24]
 8002e90:	614d      	str	r5, [r1, #20]
 8002e92:	610c      	str	r4, [r1, #16]
 8002e94:	d1d9      	bne.n	8002e4a <AES_keyschedule_enc_LL+0xae>
 8002e96:	e794      	b.n	8002dc2 <AES_keyschedule_enc_LL+0x26>
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <AES_keyschedule_enc_LL+0x1bc>)
 8002e9a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8002f5c <AES_keyschedule_enc_LL+0x1c0>
 8002e9e:	68ca      	ldr	r2, [r1, #12]
 8002ea0:	688c      	ldr	r4, [r1, #8]
 8002ea2:	684d      	ldr	r5, [r1, #4]
 8002ea4:	f8d1 c000 	ldr.w	ip, [r1]
 8002ea8:	f101 00c0 	add.w	r0, r1, #192	; 0xc0
 8002eac:	4699      	mov	r9, r3
 8002eae:	9003      	str	r0, [sp, #12]
 8002eb0:	e023      	b.n	8002efa <AES_keyschedule_enc_LL+0x15e>
 8002eb2:	f819 b00b 	ldrb.w	fp, [r9, fp]
 8002eb6:	f819 7007 	ldrb.w	r7, [r9, r7]
 8002eba:	f819 8008 	ldrb.w	r8, [r9, r8]
 8002ebe:	9702      	str	r7, [sp, #8]
 8002ec0:	9f01      	ldr	r7, [sp, #4]
 8002ec2:	ea48 680b 	orr.w	r8, r8, fp, lsl #24
 8002ec6:	f8dd b008 	ldr.w	fp, [sp, #8]
 8002eca:	f819 6007 	ldrb.w	r6, [r9, r7]
 8002ece:	ea48 470b 	orr.w	r7, r8, fp, lsl #16
 8002ed2:	ea47 2806 	orr.w	r8, r7, r6, lsl #8
 8002ed6:	690e      	ldr	r6, [r1, #16]
 8002ed8:	694f      	ldr	r7, [r1, #20]
 8002eda:	ea88 0806 	eor.w	r8, r8, r6
 8002ede:	698e      	ldr	r6, [r1, #24]
 8002ee0:	f8c1 8030 	str.w	r8, [r1, #48]	; 0x30
 8002ee4:	ea88 0707 	eor.w	r7, r8, r7
 8002ee8:	ea87 0b06 	eor.w	fp, r7, r6
 8002eec:	ea8b 0000 	eor.w	r0, fp, r0
 8002ef0:	634f      	str	r7, [r1, #52]	; 0x34
 8002ef2:	63c8      	str	r0, [r1, #60]	; 0x3c
 8002ef4:	f8c1 b038 	str.w	fp, [r1, #56]	; 0x38
 8002ef8:	3120      	adds	r1, #32
 8002efa:	69c8      	ldr	r0, [r1, #28]
 8002efc:	f85a 8f04 	ldr.w	r8, [sl, #4]!
 8002f00:	b2c7      	uxtb	r7, r0
 8002f02:	0e06      	lsrs	r6, r0, #24
 8002f04:	f813 b007 	ldrb.w	fp, [r3, r7]
 8002f08:	5d9e      	ldrb	r6, [r3, r6]
 8002f0a:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8002f0e:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 8002f12:	f813 b007 	ldrb.w	fp, [r3, r7]
 8002f16:	f3c0 2707 	ubfx	r7, r0, #8, #8
 8002f1a:	ea46 660b 	orr.w	r6, r6, fp, lsl #24
 8002f1e:	5ddf      	ldrb	r7, [r3, r7]
 8002f20:	ea8c 0c08 	eor.w	ip, ip, r8
 8002f24:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 8002f28:	ea8c 0c06 	eor.w	ip, ip, r6
 8002f2c:	ea8c 0505 	eor.w	r5, ip, r5
 8002f30:	406c      	eors	r4, r5
 8002f32:	4062      	eors	r2, r4
 8002f34:	f3c2 2607 	ubfx	r6, r2, #8, #8
 8002f38:	9601      	str	r6, [sp, #4]
 8002f3a:	9e03      	ldr	r6, [sp, #12]
 8002f3c:	62ca      	str	r2, [r1, #44]	; 0x2c
 8002f3e:	42b1      	cmp	r1, r6
 8002f40:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 8002f44:	fa5f f882 	uxtb.w	r8, r2
 8002f48:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8002f4c:	628c      	str	r4, [r1, #40]	; 0x28
 8002f4e:	624d      	str	r5, [r1, #36]	; 0x24
 8002f50:	f8c1 c020 	str.w	ip, [r1, #32]
 8002f54:	d1ad      	bne.n	8002eb2 <AES_keyschedule_enc_LL+0x116>
 8002f56:	e734      	b.n	8002dc2 <AES_keyschedule_enc_LL+0x26>
 8002f58:	08003e58 	.word	0x08003e58
 8002f5c:	08003a2c 	.word	0x08003a2c

08002f60 <AES_keyschedule_enc>:
 8002f60:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8002f64:	ea4f 08a2 	mov.w	r8, r2, asr #2
 8002f68:	f1b8 0f00 	cmp.w	r8, #0
 8002f6c:	dd13      	ble.n	8002f96 <AES_keyschedule_enc+0x36>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8002f74:	1f0c      	subs	r4, r1, #4
 8002f76:	785d      	ldrb	r5, [r3, #1]
 8002f78:	f893 c000 	ldrb.w	ip, [r3]
 8002f7c:	78df      	ldrb	r7, [r3, #3]
 8002f7e:	789e      	ldrb	r6, [r3, #2]
 8002f80:	042d      	lsls	r5, r5, #16
 8002f82:	ea45 650c 	orr.w	r5, r5, ip, lsl #24
 8002f86:	433d      	orrs	r5, r7
 8002f88:	3304      	adds	r3, #4
 8002f8a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8002f8e:	4543      	cmp	r3, r8
 8002f90:	f844 5f04 	str.w	r5, [r4, #4]!
 8002f94:	d1ef      	bne.n	8002f76 <AES_keyschedule_enc+0x16>
 8002f96:	4608      	mov	r0, r1
 8002f98:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 8002f9c:	f7ff befe 	b.w	8002d9c <AES_keyschedule_enc_LL>

08002fa0 <AES_general_SW_enc>:
 8002fa0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002fa4:	4cbe      	ldr	r4, [pc, #760]	; (80032a0 <AES_general_SW_enc+0x300>)
 8002fa6:	4dbf      	ldr	r5, [pc, #764]	; (80032a4 <AES_general_SW_enc+0x304>)
 8002fa8:	b08a      	sub	sp, #40	; 0x28
 8002faa:	2700      	movs	r7, #0
 8002fac:	2601      	movs	r6, #1
 8002fae:	9709      	str	r7, [sp, #36]	; 0x24
 8002fb0:	6026      	str	r6, [r4, #0]
 8002fb2:	6824      	ldr	r4, [r4, #0]
 8002fb4:	9409      	str	r4, [sp, #36]	; 0x24
 8002fb6:	682c      	ldr	r4, [r5, #0]
 8002fb8:	9409      	str	r4, [sp, #36]	; 0x24
 8002fba:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8002fbc:	9107      	str	r1, [sp, #28]
 8002fbe:	10db      	asrs	r3, r3, #3
 8002fc0:	3303      	adds	r3, #3
 8002fc2:	3401      	adds	r4, #1
 8002fc4:	9306      	str	r3, [sp, #24]
 8002fc6:	f000 8151 	beq.w	800326c <AES_general_SW_enc+0x2cc>
 8002fca:	6804      	ldr	r4, [r0, #0]
 8002fcc:	6811      	ldr	r1, [r2, #0]
 8002fce:	6840      	ldr	r0, [r0, #4]
 8002fd0:	6853      	ldr	r3, [r2, #4]
 8002fd2:	ea81 0b04 	eor.w	fp, r1, r4
 8002fd6:	4058      	eors	r0, r3
 8002fd8:	9003      	str	r0, [sp, #12]
 8002fda:	46d9      	mov	r9, fp
 8002fdc:	46dc      	mov	ip, fp
 8002fde:	4bb2      	ldr	r3, [pc, #712]	; (80032a8 <AES_general_SW_enc+0x308>)
 8002fe0:	9c03      	ldr	r4, [sp, #12]
 8002fe2:	4698      	mov	r8, r3
 8002fe4:	e067      	b.n	80030b6 <AES_general_SW_enc+0x116>
 8002fe6:	ea4f 611b 	mov.w	r1, fp, lsr #24
 8002fea:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 8002fee:	0e07      	lsrs	r7, r0, #24
 8002ff0:	ea4f 651a 	mov.w	r5, sl, lsr #24
 8002ff4:	f858 902c 	ldr.w	r9, [r8, ip, lsl #2]
 8002ff8:	f858 6021 	ldr.w	r6, [r8, r1, lsl #2]
 8002ffc:	f858 c027 	ldr.w	ip, [r8, r7, lsl #2]
 8003000:	f858 7025 	ldr.w	r7, [r8, r5, lsl #2]
 8003004:	e892 0022 	ldmia.w	r2, {r1, r5}
 8003008:	404e      	eors	r6, r1
 800300a:	fa5f f18a 	uxtb.w	r1, sl
 800300e:	ea89 0505 	eor.w	r5, r9, r5
 8003012:	f858 9021 	ldr.w	r9, [r8, r1, lsl #2]
 8003016:	6891      	ldr	r1, [r2, #8]
 8003018:	ea8c 0c01 	eor.w	ip, ip, r1
 800301c:	68d1      	ldr	r1, [r2, #12]
 800301e:	404f      	eors	r7, r1
 8003020:	9704      	str	r7, [sp, #16]
 8003022:	fa5f f78b 	uxtb.w	r7, fp
 8003026:	ea86 6939 	eor.w	r9, r6, r9, ror #24
 800302a:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 800302e:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8003032:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 8003036:	b2e5      	uxtb	r5, r4
 8003038:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800303c:	b2c1      	uxtb	r1, r0
 800303e:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8003042:	9405      	str	r4, [sp, #20]
 8003044:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8003048:	9c04      	ldr	r4, [sp, #16]
 800304a:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800304e:	9703      	str	r7, [sp, #12]
 8003050:	ea84 6131 	eor.w	r1, r4, r1, ror #24
 8003054:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8003058:	f3c0 2007 	ubfx	r0, r0, #8, #8
 800305c:	ea8c 6535 	eor.w	r5, ip, r5, ror #24
 8003060:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8003064:	f858 c024 	ldr.w	ip, [r8, r4, lsl #2]
 8003068:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 800306c:	f3ca 2007 	ubfx	r0, sl, #8, #8
 8003070:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8003074:	ea89 2636 	eor.w	r6, r9, r6, ror #8
 8003078:	f858 a024 	ldr.w	sl, [r8, r4, lsl #2]
 800307c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8003080:	f3cb 4007 	ubfx	r0, fp, #16, #8
 8003084:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8003088:	f858 9020 	ldr.w	r9, [r8, r0, lsl #2]
 800308c:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 8003090:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003094:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 8003098:	ea8b 2c3c 	eor.w	ip, fp, ip, ror #8
 800309c:	ea85 4b30 	eor.w	fp, r5, r0, ror #16
 80030a0:	9805      	ldr	r0, [sp, #20]
 80030a2:	ea86 4737 	eor.w	r7, r6, r7, ror #16
 80030a6:	ea81 2939 	eor.w	r9, r1, r9, ror #8
 80030aa:	ea8c 4c34 	eor.w	ip, ip, r4, ror #16
 80030ae:	9703      	str	r7, [sp, #12]
 80030b0:	ea89 4930 	eor.w	r9, r9, r0, ror #16
 80030b4:	463c      	mov	r4, r7
 80030b6:	0e21      	lsrs	r1, r4, #24
 80030b8:	ea4f 661c 	mov.w	r6, ip, lsr #24
 80030bc:	ea4f 6419 	mov.w	r4, r9, lsr #24
 80030c0:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 80030c4:	6911      	ldr	r1, [r2, #16]
 80030c6:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 80030ca:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 80030ce:	6954      	ldr	r4, [r2, #20]
 80030d0:	404d      	eors	r5, r1
 80030d2:	ea4f 601b 	mov.w	r0, fp, lsr #24
 80030d6:	fa5f f189 	uxtb.w	r1, r9
 80030da:	407c      	eors	r4, r7
 80030dc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80030e0:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
 80030e4:	6991      	ldr	r1, [r2, #24]
 80030e6:	4048      	eors	r0, r1
 80030e8:	69d1      	ldr	r1, [r2, #28]
 80030ea:	404e      	eors	r6, r1
 80030ec:	9604      	str	r6, [sp, #16]
 80030ee:	9e03      	ldr	r6, [sp, #12]
 80030f0:	9904      	ldr	r1, [sp, #16]
 80030f2:	fa5f fa86 	uxtb.w	sl, r6
 80030f6:	fa5f f68b 	uxtb.w	r6, fp
 80030fa:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 80030fe:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 8003102:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 8003106:	ea84 6a3a 	eor.w	sl, r4, sl, ror #24
 800310a:	f3cc 4507 	ubfx	r5, ip, #16, #8
 800310e:	fa5f f48c 	uxtb.w	r4, ip
 8003112:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 8003116:	9702      	str	r7, [sp, #8]
 8003118:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800311c:	9705      	str	r7, [sp, #20]
 800311e:	ea81 6c36 	eor.w	ip, r1, r6, ror #24
 8003122:	f3cb 4107 	ubfx	r1, fp, #16, #8
 8003126:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800312a:	9f06      	ldr	r7, [sp, #24]
 800312c:	f853 602b 	ldr.w	r6, [r3, fp, lsl #2]
 8003130:	9601      	str	r6, [sp, #4]
 8003132:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8003136:	f3c9 2907 	ubfx	r9, r9, #8, #8
 800313a:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 800313e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003142:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8003146:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 800314a:	9604      	str	r6, [sp, #16]
 800314c:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 8003150:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8003154:	3f01      	subs	r7, #1
 8003156:	ea80 6034 	eor.w	r0, r0, r4, ror #24
 800315a:	9706      	str	r7, [sp, #24]
 800315c:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8003160:	9904      	ldr	r1, [sp, #16]
 8003162:	ea89 2735 	eor.w	r7, r9, r5, ror #8
 8003166:	f3cb 4507 	ubfx	r5, fp, #16, #8
 800316a:	f3cb 2907 	ubfx	r9, fp, #8, #8
 800316e:	ea80 2031 	eor.w	r0, r0, r1, ror #8
 8003172:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
 8003176:	9901      	ldr	r1, [sp, #4]
 8003178:	f853 5029 	ldr.w	r5, [r3, r9, lsl #2]
 800317c:	ea8a 2434 	eor.w	r4, sl, r4, ror #8
 8003180:	ea8c 2a3b 	eor.w	sl, ip, fp, ror #8
 8003184:	ea87 4b31 	eor.w	fp, r7, r1, ror #16
 8003188:	9f06      	ldr	r7, [sp, #24]
 800318a:	ea84 4436 	eor.w	r4, r4, r6, ror #16
 800318e:	9e05      	ldr	r6, [sp, #20]
 8003190:	2f00      	cmp	r7, #0
 8003192:	ea80 4035 	eor.w	r0, r0, r5, ror #16
 8003196:	ea8a 4a36 	eor.w	sl, sl, r6, ror #16
 800319a:	f102 0220 	add.w	r2, r2, #32
 800319e:	f73f af22 	bgt.w	8002fe6 <AES_general_SW_enc+0x46>
 80031a2:	4b42      	ldr	r3, [pc, #264]	; (80032ac <AES_general_SW_enc+0x30c>)
 80031a4:	6811      	ldr	r1, [r2, #0]
 80031a6:	ea4f 671b 	mov.w	r7, fp, lsr #24
 80031aa:	fa5f f68a 	uxtb.w	r6, sl
 80031ae:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80031b2:	f813 8007 	ldrb.w	r8, [r3, r7]
 80031b6:	5d9f      	ldrb	r7, [r3, r6]
 80031b8:	5d5d      	ldrb	r5, [r3, r5]
 80031ba:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80031be:	ea47 6808 	orr.w	r8, r7, r8, lsl #24
 80031c2:	f813 c006 	ldrb.w	ip, [r3, r6]
 80031c6:	0e27      	lsrs	r7, r4, #24
 80031c8:	fa5f f68b 	uxtb.w	r6, fp
 80031cc:	ea48 4805 	orr.w	r8, r8, r5, lsl #16
 80031d0:	f3c0 4507 	ubfx	r5, r0, #16, #8
 80031d4:	ea48 280c 	orr.w	r8, r8, ip, lsl #8
 80031d8:	ea88 0101 	eor.w	r1, r8, r1
 80031dc:	f813 c007 	ldrb.w	ip, [r3, r7]
 80031e0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80031e4:	5d9f      	ldrb	r7, [r3, r6]
 80031e6:	5d5e      	ldrb	r6, [r3, r5]
 80031e8:	f8c8 1000 	str.w	r1, [r8]
 80031ec:	f3ca 2507 	ubfx	r5, sl, #8, #8
 80031f0:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 80031f4:	f813 8005 	ldrb.w	r8, [r3, r5]
 80031f8:	6851      	ldr	r1, [r2, #4]
 80031fa:	0e07      	lsrs	r7, r0, #24
 80031fc:	b2e5      	uxtb	r5, r4
 80031fe:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
 8003202:	f3ca 4607 	ubfx	r6, sl, #16, #8
 8003206:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 800320a:	5ddf      	ldrb	r7, [r3, r7]
 800320c:	f813 9006 	ldrb.w	r9, [r3, r6]
 8003210:	5d5d      	ldrb	r5, [r3, r5]
 8003212:	ea8c 0101 	eor.w	r1, ip, r1
 8003216:	f3cb 2607 	ubfx	r6, fp, #8, #8
 800321a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 800321e:	5d9e      	ldrb	r6, [r3, r6]
 8003220:	f8cc 1004 	str.w	r1, [ip, #4]
 8003224:	b2c0      	uxtb	r0, r0
 8003226:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
 800322a:	ea4f 671a 	mov.w	r7, sl, lsr #24
 800322e:	f813 8000 	ldrb.w	r8, [r3, r0]
 8003232:	6890      	ldr	r0, [r2, #8]
 8003234:	5ddf      	ldrb	r7, [r3, r7]
 8003236:	f3cb 4107 	ubfx	r1, fp, #16, #8
 800323a:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 800323e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003242:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8003246:	4045      	eors	r5, r0
 8003248:	5c58      	ldrb	r0, [r3, r1]
 800324a:	f8cc 5008 	str.w	r5, [ip, #8]
 800324e:	5d19      	ldrb	r1, [r3, r4]
 8003250:	68d2      	ldr	r2, [r2, #12]
 8003252:	ea48 6307 	orr.w	r3, r8, r7, lsl #24
 8003256:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800325a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800325e:	4053      	eors	r3, r2
 8003260:	f8cc 300c 	str.w	r3, [ip, #12]
 8003264:	b00a      	add	sp, #40	; 0x28
 8003266:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800326a:	4770      	bx	lr
 800326c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800326e:	602b      	str	r3, [r5, #0]
 8003270:	682b      	ldr	r3, [r5, #0]
 8003272:	9309      	str	r3, [sp, #36]	; 0x24
 8003274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003276:	2b00      	cmp	r3, #0
 8003278:	f47f aea7 	bne.w	8002fca <AES_general_SW_enc+0x2a>
 800327c:	6803      	ldr	r3, [r0, #0]
 800327e:	6815      	ldr	r5, [r2, #0]
 8003280:	6847      	ldr	r7, [r0, #4]
 8003282:	6886      	ldr	r6, [r0, #8]
 8003284:	6854      	ldr	r4, [r2, #4]
 8003286:	68c0      	ldr	r0, [r0, #12]
 8003288:	6891      	ldr	r1, [r2, #8]
 800328a:	406b      	eors	r3, r5
 800328c:	9303      	str	r3, [sp, #12]
 800328e:	68d3      	ldr	r3, [r2, #12]
 8003290:	ea84 0c07 	eor.w	ip, r4, r7
 8003294:	ea81 0b06 	eor.w	fp, r1, r6
 8003298:	ea83 0900 	eor.w	r9, r3, r0
 800329c:	e69f      	b.n	8002fde <AES_general_SW_enc+0x3e>
 800329e:	bf00      	nop
 80032a0:	40023008 	.word	0x40023008
 80032a4:	40023000 	.word	0x40023000
 80032a8:	08003a58 	.word	0x08003a58
 80032ac:	08003e58 	.word	0x08003e58

080032b0 <AES_CTR_Encrypt_Init>:
 80032b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032b4:	4604      	mov	r4, r0
 80032b6:	b170      	cbz	r0, 80032d6 <AES_CTR_Encrypt_Init+0x26>
 80032b8:	b169      	cbz	r1, 80032d6 <AES_CTR_Encrypt_Init+0x26>
 80032ba:	b162      	cbz	r2, 80032d6 <AES_CTR_Encrypt_Init+0x26>
 80032bc:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 80032c0:	f02c 0308 	bic.w	r3, ip, #8
 80032c4:	2b10      	cmp	r3, #16
 80032c6:	d00a      	beq.n	80032de <AES_CTR_Encrypt_Init+0x2e>
 80032c8:	f1bc 0f20 	cmp.w	ip, #32
 80032cc:	d007      	beq.n	80032de <AES_CTR_Encrypt_Init+0x2e>
 80032ce:	f640 401f 	movw	r0, #3103	; 0xc1f
 80032d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032d6:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80032da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032de:	6920      	ldr	r0, [r4, #16]
 80032e0:	1e43      	subs	r3, r0, #1
 80032e2:	2b0f      	cmp	r3, #15
 80032e4:	d8f3      	bhi.n	80032ce <AES_CTR_Encrypt_Init+0x1e>
 80032e6:	f894 8004 	ldrb.w	r8, [r4, #4]
 80032ea:	60e2      	str	r2, [r4, #12]
 80032ec:	2300      	movs	r3, #0
 80032ee:	f028 0506 	bic.w	r5, r8, #6
 80032f2:	7125      	strb	r5, [r4, #4]
 80032f4:	461e      	mov	r6, r3
 80032f6:	6163      	str	r3, [r4, #20]
 80032f8:	61a3      	str	r3, [r4, #24]
 80032fa:	61e3      	str	r3, [r4, #28]
 80032fc:	6223      	str	r3, [r4, #32]
 80032fe:	461d      	mov	r5, r3
 8003300:	e002      	b.n	8003308 <AES_CTR_Encrypt_Init+0x58>
 8003302:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 8003306:	6976      	ldr	r6, [r6, #20]
 8003308:	f003 0703 	and.w	r7, r3, #3
 800330c:	f812 9003 	ldrb.w	r9, [r2, r3]
 8003310:	f1c7 0703 	rsb	r7, r7, #3
 8003314:	00ff      	lsls	r7, r7, #3
 8003316:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800331a:	3301      	adds	r3, #1
 800331c:	fa09 f707 	lsl.w	r7, r9, r7
 8003320:	433e      	orrs	r6, r7
 8003322:	4283      	cmp	r3, r0
 8003324:	616e      	str	r6, [r5, #20]
 8003326:	ea4f 05a3 	mov.w	r5, r3, asr #2
 800332a:	d1ea      	bne.n	8003302 <AES_CTR_Encrypt_Init+0x52>
 800332c:	f018 0801 	ands.w	r8, r8, #1
 8003330:	d109      	bne.n	8003346 <AES_CTR_Encrypt_Init+0x96>
 8003332:	60a1      	str	r1, [r4, #8]
 8003334:	4608      	mov	r0, r1
 8003336:	4662      	mov	r2, ip
 8003338:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800333c:	f7ff fe10 	bl	8002f60 <AES_keyschedule_enc>
 8003340:	4640      	mov	r0, r8
 8003342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003346:	2000      	movs	r0, #0
 8003348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800334c <AES_CTR_Encrypt_Append>:
 800334c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003350:	b08f      	sub	sp, #60	; 0x3c
 8003352:	4681      	mov	r9, r0
 8003354:	2000      	movs	r0, #0
 8003356:	468b      	mov	fp, r1
 8003358:	9202      	str	r2, [sp, #8]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	900a      	str	r0, [sp, #40]	; 0x28
 800335e:	900b      	str	r0, [sp, #44]	; 0x2c
 8003360:	900c      	str	r0, [sp, #48]	; 0x30
 8003362:	900d      	str	r0, [sp, #52]	; 0x34
 8003364:	9009      	str	r0, [sp, #36]	; 0x24
 8003366:	f1b9 0f00 	cmp.w	r9, #0
 800336a:	d00d      	beq.n	8003388 <AES_CTR_Encrypt_Append+0x3c>
 800336c:	b161      	cbz	r1, 8003388 <AES_CTR_Encrypt_Append+0x3c>
 800336e:	b15b      	cbz	r3, 8003388 <AES_CTR_Encrypt_Append+0x3c>
 8003370:	9818      	ldr	r0, [sp, #96]	; 0x60
 8003372:	b148      	cbz	r0, 8003388 <AES_CTR_Encrypt_Append+0x3c>
 8003374:	f899 3004 	ldrb.w	r3, [r9, #4]
 8003378:	f013 0f06 	tst.w	r3, #6
 800337c:	d009      	beq.n	8003392 <AES_CTR_Encrypt_Append+0x46>
 800337e:	f640 401e 	movw	r0, #3102	; 0xc1e
 8003382:	b00f      	add	sp, #60	; 0x3c
 8003384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003388:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800338c:	b00f      	add	sp, #60	; 0x3c
 800338e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003392:	0712      	lsls	r2, r2, #28
 8003394:	bf1c      	itt	ne
 8003396:	f043 0304 	orrne.w	r3, r3, #4
 800339a:	f889 3004 	strbne.w	r3, [r9, #4]
 800339e:	4bca      	ldr	r3, [pc, #808]	; (80036c8 <AES_CTR_Encrypt_Append+0x37c>)
 80033a0:	4aca      	ldr	r2, [pc, #808]	; (80036cc <AES_CTR_Encrypt_Append+0x380>)
 80033a2:	2101      	movs	r1, #1
 80033a4:	6019      	str	r1, [r3, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	9309      	str	r3, [sp, #36]	; 0x24
 80033aa:	6813      	ldr	r3, [r2, #0]
 80033ac:	9309      	str	r3, [sp, #36]	; 0x24
 80033ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033b0:	3301      	adds	r3, #1
 80033b2:	f000 8133 	beq.w	800361c <AES_CTR_Encrypt_Append+0x2d0>
 80033b6:	9c02      	ldr	r4, [sp, #8]
 80033b8:	2c0f      	cmp	r4, #15
 80033ba:	f340 8232 	ble.w	8003822 <AES_CTR_Encrypt_Append+0x4d6>
 80033be:	f1a4 0310 	sub.w	r3, r4, #16
 80033c2:	091b      	lsrs	r3, r3, #4
 80033c4:	f109 0628 	add.w	r6, r9, #40	; 0x28
 80033c8:	9305      	str	r3, [sp, #20]
 80033ca:	9603      	str	r6, [sp, #12]
 80033cc:	eb0b 1303 	add.w	r3, fp, r3, lsl #4
 80033d0:	9e00      	ldr	r6, [sp, #0]
 80033d2:	f8cd b01c 	str.w	fp, [sp, #28]
 80033d6:	f109 0514 	add.w	r5, r9, #20
 80033da:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80033de:	3310      	adds	r3, #16
 80033e0:	9501      	str	r5, [sp, #4]
 80033e2:	465c      	mov	r4, fp
 80033e4:	9304      	str	r3, [sp, #16]
 80033e6:	1cf5      	adds	r5, r6, #3
 80033e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80033ec:	46c3      	mov	fp, r8
 80033ee:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 80033f2:	9801      	ldr	r0, [sp, #4]
 80033f4:	9a03      	ldr	r2, [sp, #12]
 80033f6:	f894 8000 	ldrb.w	r8, [r4]
 80033fa:	7867      	ldrb	r7, [r4, #1]
 80033fc:	78a6      	ldrb	r6, [r4, #2]
 80033fe:	f894 a003 	ldrb.w	sl, [r4, #3]
 8003402:	4659      	mov	r1, fp
 8003404:	f7ff fdcc 	bl	8002fa0 <AES_general_SW_enc>
 8003408:	990a      	ldr	r1, [sp, #40]	; 0x28
 800340a:	f8d9 2020 	ldr.w	r2, [r9, #32]
 800340e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003410:	ea4a 0101 	orr.w	r1, sl, r1
 8003414:	ea4f 6808 	mov.w	r8, r8, lsl #24
 8003418:	ea41 0808 	orr.w	r8, r1, r8
 800341c:	043f      	lsls	r7, r7, #16
 800341e:	ea48 0707 	orr.w	r7, r8, r7
 8003422:	0236      	lsls	r6, r6, #8
 8003424:	433e      	orrs	r6, r7
 8003426:	960a      	str	r6, [sp, #40]	; 0x28
 8003428:	9e04      	ldr	r6, [sp, #16]
 800342a:	3410      	adds	r4, #16
 800342c:	1c57      	adds	r7, r2, #1
 800342e:	0a18      	lsrs	r0, r3, #8
 8003430:	0c19      	lsrs	r1, r3, #16
 8003432:	0e1a      	lsrs	r2, r3, #24
 8003434:	42b4      	cmp	r4, r6
 8003436:	f8c9 7020 	str.w	r7, [r9, #32]
 800343a:	f105 0510 	add.w	r5, r5, #16
 800343e:	f805 3c10 	strb.w	r3, [r5, #-16]
 8003442:	f805 0c11 	strb.w	r0, [r5, #-17]
 8003446:	f805 1c12 	strb.w	r1, [r5, #-18]
 800344a:	f805 2c13 	strb.w	r2, [r5, #-19]
 800344e:	d1ce      	bne.n	80033ee <AES_CTR_Encrypt_Append+0xa2>
 8003450:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8003454:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8003458:	f108 0301 	add.w	r3, r8, #1
 800345c:	011b      	lsls	r3, r3, #4
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	461d      	mov	r5, r3
 8003462:	9c02      	ldr	r4, [sp, #8]
 8003464:	42a5      	cmp	r5, r4
 8003466:	db06      	blt.n	8003476 <AES_CTR_Encrypt_Append+0x12a>
 8003468:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800346c:	9e02      	ldr	r6, [sp, #8]
 800346e:	f8c8 6000 	str.w	r6, [r8]
 8003472:	2000      	movs	r0, #0
 8003474:	e78a      	b.n	800338c <AES_CTR_Encrypt_Append+0x40>
 8003476:	a90a      	add	r1, sp, #40	; 0x28
 8003478:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800347c:	f109 0014 	add.w	r0, r9, #20
 8003480:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8003484:	f7ff fd8c 	bl	8002fa0 <AES_general_SW_enc>
 8003488:	9c02      	ldr	r4, [sp, #8]
 800348a:	9d01      	ldr	r5, [sp, #4]
 800348c:	1b61      	subs	r1, r4, r5
 800348e:	2900      	cmp	r1, #0
 8003490:	460b      	mov	r3, r1
 8003492:	bfb8      	it	lt
 8003494:	1ccb      	addlt	r3, r1, #3
 8003496:	109b      	asrs	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	f340 81c5 	ble.w	8003828 <AES_CTR_Encrypt_Append+0x4dc>
 800349e:	9e01      	ldr	r6, [sp, #4]
 80034a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80034a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034a6:	f81b 7008 	ldrb.w	r7, [fp, r8]
 80034aa:	f8dd 9000 	ldr.w	r9, [sp]
 80034ae:	1cf5      	adds	r5, r6, #3
 80034b0:	1cb4      	adds	r4, r6, #2
 80034b2:	f108 0001 	add.w	r0, r8, #1
 80034b6:	f81b 6005 	ldrb.w	r6, [fp, r5]
 80034ba:	f81b c004 	ldrb.w	ip, [fp, r4]
 80034be:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
 80034c2:	f81b 7000 	ldrb.w	r7, [fp, r0]
 80034c6:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
 80034ca:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 80034ce:	4072      	eors	r2, r6
 80034d0:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80034d4:	0c17      	lsrs	r7, r2, #16
 80034d6:	0e16      	lsrs	r6, r2, #24
 80034d8:	2b01      	cmp	r3, #1
 80034da:	f809 2005 	strb.w	r2, [r9, r5]
 80034de:	920a      	str	r2, [sp, #40]	; 0x28
 80034e0:	f809 c004 	strb.w	ip, [r9, r4]
 80034e4:	f809 7000 	strb.w	r7, [r9, r0]
 80034e8:	f809 6008 	strb.w	r6, [r9, r8]
 80034ec:	dd78      	ble.n	80035e0 <AES_CTR_Encrypt_Append+0x294>
 80034ee:	f108 0004 	add.w	r0, r8, #4
 80034f2:	f108 0607 	add.w	r6, r8, #7
 80034f6:	46c1      	mov	r9, r8
 80034f8:	f108 0506 	add.w	r5, r8, #6
 80034fc:	f81b 7006 	ldrb.w	r7, [fp, r6]
 8003500:	f81b c000 	ldrb.w	ip, [fp, r0]
 8003504:	f81b 8005 	ldrb.w	r8, [fp, r5]
 8003508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800350a:	f109 0405 	add.w	r4, r9, #5
 800350e:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 8003512:	f81b 7004 	ldrb.w	r7, [fp, r4]
 8003516:	f8dd 9000 	ldr.w	r9, [sp]
 800351a:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 800351e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
 8003522:	407a      	eors	r2, r7
 8003524:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8003528:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800352c:	0e17      	lsrs	r7, r2, #24
 800352e:	2b02      	cmp	r3, #2
 8003530:	f809 2006 	strb.w	r2, [r9, r6]
 8003534:	920b      	str	r2, [sp, #44]	; 0x2c
 8003536:	f809 8005 	strb.w	r8, [r9, r5]
 800353a:	f809 c004 	strb.w	ip, [r9, r4]
 800353e:	f809 7000 	strb.w	r7, [r9, r0]
 8003542:	dd4d      	ble.n	80035e0 <AES_CTR_Encrypt_Append+0x294>
 8003544:	9c01      	ldr	r4, [sp, #4]
 8003546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003548:	f104 0008 	add.w	r0, r4, #8
 800354c:	f104 060b 	add.w	r6, r4, #11
 8003550:	f104 050a 	add.w	r5, r4, #10
 8003554:	f81b 7006 	ldrb.w	r7, [fp, r6]
 8003558:	f81b c000 	ldrb.w	ip, [fp, r0]
 800355c:	f81b 8005 	ldrb.w	r8, [fp, r5]
 8003560:	3409      	adds	r4, #9
 8003562:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 8003566:	f81b 7004 	ldrb.w	r7, [fp, r4]
 800356a:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 800356e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
 8003572:	407a      	eors	r2, r7
 8003574:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8003578:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800357c:	0e17      	lsrs	r7, r2, #24
 800357e:	2b03      	cmp	r3, #3
 8003580:	f809 2006 	strb.w	r2, [r9, r6]
 8003584:	920c      	str	r2, [sp, #48]	; 0x30
 8003586:	f809 8005 	strb.w	r8, [r9, r5]
 800358a:	f809 c004 	strb.w	ip, [r9, r4]
 800358e:	f809 7000 	strb.w	r7, [r9, r0]
 8003592:	dd25      	ble.n	80035e0 <AES_CTR_Encrypt_Append+0x294>
 8003594:	9d01      	ldr	r5, [sp, #4]
 8003596:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003598:	f105 000c 	add.w	r0, r5, #12
 800359c:	f105 060f 	add.w	r6, r5, #15
 80035a0:	f105 040d 	add.w	r4, r5, #13
 80035a4:	f81b 7006 	ldrb.w	r7, [fp, r6]
 80035a8:	f81b c000 	ldrb.w	ip, [fp, r0]
 80035ac:	f81b 8004 	ldrb.w	r8, [fp, r4]
 80035b0:	350e      	adds	r5, #14
 80035b2:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 80035b6:	f81b 7005 	ldrb.w	r7, [fp, r5]
 80035ba:	ea4c 4c08 	orr.w	ip, ip, r8, lsl #16
 80035be:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
 80035c2:	407a      	eors	r2, r7
 80035c4:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80035c8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80035cc:	0e17      	lsrs	r7, r2, #24
 80035ce:	f809 2006 	strb.w	r2, [r9, r6]
 80035d2:	f809 8005 	strb.w	r8, [r9, r5]
 80035d6:	f809 c004 	strb.w	ip, [r9, r4]
 80035da:	f809 7000 	strb.w	r7, [r9, r0]
 80035de:	920d      	str	r2, [sp, #52]	; 0x34
 80035e0:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 80035e4:	0092      	lsls	r2, r2, #2
 80035e6:	4411      	add	r1, r2
 80035e8:	2900      	cmp	r1, #0
 80035ea:	f77f af3d 	ble.w	8003468 <AES_CTR_Encrypt_Append+0x11c>
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	aa0e      	add	r2, sp, #56	; 0x38
 80035f2:	9d01      	ldr	r5, [sp, #4]
 80035f4:	9e00      	ldr	r6, [sp, #0]
 80035f6:	441a      	add	r2, r3
 80035f8:	441d      	add	r5, r3
 80035fa:	f852 7c10 	ldr.w	r7, [r2, #-16]
 80035fe:	442e      	add	r6, r5
 8003600:	2218      	movs	r2, #24
 8003602:	445d      	add	r5, fp
 8003604:	2300      	movs	r3, #0
 8003606:	5ce8      	ldrb	r0, [r5, r3]
 8003608:	fa27 f402 	lsr.w	r4, r7, r2
 800360c:	4060      	eors	r0, r4
 800360e:	54f0      	strb	r0, [r6, r3]
 8003610:	3301      	adds	r3, #1
 8003612:	428b      	cmp	r3, r1
 8003614:	f1a2 0208 	sub.w	r2, r2, #8
 8003618:	d1f5      	bne.n	8003606 <AES_CTR_Encrypt_Append+0x2ba>
 800361a:	e725      	b.n	8003468 <AES_CTR_Encrypt_Append+0x11c>
 800361c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	6813      	ldr	r3, [r2, #0]
 8003622:	9309      	str	r3, [sp, #36]	; 0x24
 8003624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003626:	2b00      	cmp	r3, #0
 8003628:	d052      	beq.n	80036d0 <AES_CTR_Encrypt_Append+0x384>
 800362a:	9e02      	ldr	r6, [sp, #8]
 800362c:	2e0f      	cmp	r6, #15
 800362e:	f340 80f8 	ble.w	8003822 <AES_CTR_Encrypt_Append+0x4d6>
 8003632:	f1a6 0310 	sub.w	r3, r6, #16
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	f109 0614 	add.w	r6, r9, #20
 800363c:	f109 0828 	add.w	r8, r9, #40	; 0x28
 8003640:	9305      	str	r3, [sp, #20]
 8003642:	9601      	str	r6, [sp, #4]
 8003644:	eb0b 1303 	add.w	r3, fp, r3, lsl #4
 8003648:	9e00      	ldr	r6, [sp, #0]
 800364a:	f8cd 800c 	str.w	r8, [sp, #12]
 800364e:	3310      	adds	r3, #16
 8003650:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8003654:	465c      	mov	r4, fp
 8003656:	f8cd b01c 	str.w	fp, [sp, #28]
 800365a:	9304      	str	r3, [sp, #16]
 800365c:	1cf5      	adds	r5, r6, #3
 800365e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003662:	46c3      	mov	fp, r8
 8003664:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003668:	9801      	ldr	r0, [sp, #4]
 800366a:	9a03      	ldr	r2, [sp, #12]
 800366c:	f894 8000 	ldrb.w	r8, [r4]
 8003670:	7867      	ldrb	r7, [r4, #1]
 8003672:	78a6      	ldrb	r6, [r4, #2]
 8003674:	f894 a003 	ldrb.w	sl, [r4, #3]
 8003678:	4659      	mov	r1, fp
 800367a:	f7ff fc91 	bl	8002fa0 <AES_general_SW_enc>
 800367e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003680:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8003684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003686:	ea4a 0101 	orr.w	r1, sl, r1
 800368a:	ea4f 6808 	mov.w	r8, r8, lsl #24
 800368e:	ea41 0808 	orr.w	r8, r1, r8
 8003692:	043f      	lsls	r7, r7, #16
 8003694:	ea48 0707 	orr.w	r7, r8, r7
 8003698:	0236      	lsls	r6, r6, #8
 800369a:	433e      	orrs	r6, r7
 800369c:	960a      	str	r6, [sp, #40]	; 0x28
 800369e:	9e04      	ldr	r6, [sp, #16]
 80036a0:	3410      	adds	r4, #16
 80036a2:	1c57      	adds	r7, r2, #1
 80036a4:	0a18      	lsrs	r0, r3, #8
 80036a6:	0c19      	lsrs	r1, r3, #16
 80036a8:	0e1a      	lsrs	r2, r3, #24
 80036aa:	42b4      	cmp	r4, r6
 80036ac:	f8c9 7020 	str.w	r7, [r9, #32]
 80036b0:	f105 0510 	add.w	r5, r5, #16
 80036b4:	f805 3c10 	strb.w	r3, [r5, #-16]
 80036b8:	f805 0c11 	strb.w	r0, [r5, #-17]
 80036bc:	f805 1c12 	strb.w	r1, [r5, #-18]
 80036c0:	f805 2c13 	strb.w	r2, [r5, #-19]
 80036c4:	d1ce      	bne.n	8003664 <AES_CTR_Encrypt_Append+0x318>
 80036c6:	e6c3      	b.n	8003450 <AES_CTR_Encrypt_Append+0x104>
 80036c8:	40023008 	.word	0x40023008
 80036cc:	40023000 	.word	0x40023000
 80036d0:	9c02      	ldr	r4, [sp, #8]
 80036d2:	2c0f      	cmp	r4, #15
 80036d4:	f340 80a5 	ble.w	8003822 <AES_CTR_Encrypt_Append+0x4d6>
 80036d8:	f1a4 0210 	sub.w	r2, r4, #16
 80036dc:	f022 020f 	bic.w	r2, r2, #15
 80036e0:	f109 0514 	add.w	r5, r9, #20
 80036e4:	f109 0628 	add.w	r6, r9, #40	; 0x28
 80036e8:	3210      	adds	r2, #16
 80036ea:	ac0a      	add	r4, sp, #40	; 0x28
 80036ec:	46da      	mov	sl, fp
 80036ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80036f2:	9201      	str	r2, [sp, #4]
 80036f4:	46cb      	mov	fp, r9
 80036f6:	9504      	str	r5, [sp, #16]
 80036f8:	9605      	str	r6, [sp, #20]
 80036fa:	9406      	str	r4, [sp, #24]
 80036fc:	4699      	mov	r9, r3
 80036fe:	9d03      	ldr	r5, [sp, #12]
 8003700:	f89a 1001 	ldrb.w	r1, [sl, #1]
 8003704:	f815 e009 	ldrb.w	lr, [r5, r9]
 8003708:	f89a 2005 	ldrb.w	r2, [sl, #5]
 800370c:	f89a 3009 	ldrb.w	r3, [sl, #9]
 8003710:	f89a 400d 	ldrb.w	r4, [sl, #13]
 8003714:	f89a 0004 	ldrb.w	r0, [sl, #4]
 8003718:	f89a c008 	ldrb.w	ip, [sl, #8]
 800371c:	f89a 700c 	ldrb.w	r7, [sl, #12]
 8003720:	f89a 6003 	ldrb.w	r6, [sl, #3]
 8003724:	f89a 5007 	ldrb.w	r5, [sl, #7]
 8003728:	f89a 8006 	ldrb.w	r8, [sl, #6]
 800372c:	0409      	lsls	r1, r1, #16
 800372e:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 8003732:	0412      	lsls	r2, r2, #16
 8003734:	f89a e00b 	ldrb.w	lr, [sl, #11]
 8003738:	041b      	lsls	r3, r3, #16
 800373a:	0424      	lsls	r4, r4, #16
 800373c:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 8003740:	4331      	orrs	r1, r6
 8003742:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8003746:	f89a 600a 	ldrb.w	r6, [sl, #10]
 800374a:	f89a 000f 	ldrb.w	r0, [sl, #15]
 800374e:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 8003752:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8003756:	432a      	orrs	r2, r5
 8003758:	ea43 030e 	orr.w	r3, r3, lr
 800375c:	4304      	orrs	r4, r0
 800375e:	ea41 2707 	orr.w	r7, r1, r7, lsl #8
 8003762:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
 8003766:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 800376a:	9804      	ldr	r0, [sp, #16]
 800376c:	9906      	ldr	r1, [sp, #24]
 800376e:	9a05      	ldr	r2, [sp, #20]
 8003770:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8003774:	f89a 500e 	ldrb.w	r5, [sl, #14]
 8003778:	f7ff fc12 	bl	8002fa0 <AES_general_SW_enc>
 800377c:	a80b      	add	r0, sp, #44	; 0x2c
 800377e:	c807      	ldmia	r0, {r0, r1, r2}
 8003780:	f8dd c000 	ldr.w	ip, [sp]
 8003784:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003788:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
 800378c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800378e:	44cc      	add	ip, r9
 8003790:	ea88 0000 	eor.w	r0, r8, r0
 8003794:	4071      	eors	r1, r6
 8003796:	407c      	eors	r4, r7
 8003798:	3301      	adds	r3, #1
 800379a:	f8dd 8000 	ldr.w	r8, [sp]
 800379e:	f8cb 3020 	str.w	r3, [fp, #32]
 80037a2:	406a      	eors	r2, r5
 80037a4:	0a27      	lsrs	r7, r4, #8
 80037a6:	0c25      	lsrs	r5, r4, #16
 80037a8:	0e26      	lsrs	r6, r4, #24
 80037aa:	f88c 4003 	strb.w	r4, [ip, #3]
 80037ae:	940a      	str	r4, [sp, #40]	; 0x28
 80037b0:	0c0c      	lsrs	r4, r1, #16
 80037b2:	f88c 7002 	strb.w	r7, [ip, #2]
 80037b6:	f88c 5001 	strb.w	r5, [ip, #1]
 80037ba:	f808 6009 	strb.w	r6, [r8, r9]
 80037be:	f88c 4009 	strb.w	r4, [ip, #9]
 80037c2:	9c01      	ldr	r4, [sp, #4]
 80037c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80037c6:	f109 0910 	add.w	r9, r9, #16
 80037ca:	0a05      	lsrs	r5, r0, #8
 80037cc:	0c07      	lsrs	r7, r0, #16
 80037ce:	0e06      	lsrs	r6, r0, #24
 80037d0:	0a0b      	lsrs	r3, r1, #8
 80037d2:	ea4f 4812 	mov.w	r8, r2, lsr #16
 80037d6:	910c      	str	r1, [sp, #48]	; 0x30
 80037d8:	920d      	str	r2, [sp, #52]	; 0x34
 80037da:	f88c 0007 	strb.w	r0, [ip, #7]
 80037de:	f88c 100b 	strb.w	r1, [ip, #11]
 80037e2:	0e08      	lsrs	r0, r1, #24
 80037e4:	f88c 200f 	strb.w	r2, [ip, #15]
 80037e8:	0a11      	lsrs	r1, r2, #8
 80037ea:	45a1      	cmp	r9, r4
 80037ec:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80037f0:	f10a 0a10 	add.w	sl, sl, #16
 80037f4:	f88c 5006 	strb.w	r5, [ip, #6]
 80037f8:	f88c 7005 	strb.w	r7, [ip, #5]
 80037fc:	f88c 6004 	strb.w	r6, [ip, #4]
 8003800:	f88c 300a 	strb.w	r3, [ip, #10]
 8003804:	f88c 0008 	strb.w	r0, [ip, #8]
 8003808:	f88c 100e 	strb.w	r1, [ip, #14]
 800380c:	f88c 800d 	strb.w	r8, [ip, #13]
 8003810:	f88c 200c 	strb.w	r2, [ip, #12]
 8003814:	f47f af73 	bne.w	80036fe <AES_CTR_Encrypt_Append+0x3b2>
 8003818:	46d9      	mov	r9, fp
 800381a:	9d01      	ldr	r5, [sp, #4]
 800381c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003820:	e61f      	b.n	8003462 <AES_CTR_Encrypt_Append+0x116>
 8003822:	2500      	movs	r5, #0
 8003824:	9501      	str	r5, [sp, #4]
 8003826:	e61c      	b.n	8003462 <AES_CTR_Encrypt_Append+0x116>
 8003828:	2200      	movs	r2, #0
 800382a:	4613      	mov	r3, r2
 800382c:	e6db      	b.n	80035e6 <AES_CTR_Encrypt_Append+0x29a>
 800382e:	bf00      	nop

08003830 <AES_CTR_Encrypt_Finish>:
 8003830:	b140      	cbz	r0, 8003844 <AES_CTR_Encrypt_Finish+0x14>
 8003832:	b13a      	cbz	r2, 8003844 <AES_CTR_Encrypt_Finish+0x14>
 8003834:	7901      	ldrb	r1, [r0, #4]
 8003836:	2300      	movs	r3, #0
 8003838:	f041 0102 	orr.w	r1, r1, #2
 800383c:	7101      	strb	r1, [r0, #4]
 800383e:	4618      	mov	r0, r3
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	4770      	bx	lr
 8003844:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop

0800384c <AES_CTR_Decrypt_Init>:
 800384c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003850:	4604      	mov	r4, r0
 8003852:	b170      	cbz	r0, 8003872 <AES_CTR_Decrypt_Init+0x26>
 8003854:	b169      	cbz	r1, 8003872 <AES_CTR_Decrypt_Init+0x26>
 8003856:	b162      	cbz	r2, 8003872 <AES_CTR_Decrypt_Init+0x26>
 8003858:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 800385c:	f02c 0308 	bic.w	r3, ip, #8
 8003860:	2b10      	cmp	r3, #16
 8003862:	d00a      	beq.n	800387a <AES_CTR_Decrypt_Init+0x2e>
 8003864:	f1bc 0f20 	cmp.w	ip, #32
 8003868:	d007      	beq.n	800387a <AES_CTR_Decrypt_Init+0x2e>
 800386a:	f640 401f 	movw	r0, #3103	; 0xc1f
 800386e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003872:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8003876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800387a:	6920      	ldr	r0, [r4, #16]
 800387c:	1e43      	subs	r3, r0, #1
 800387e:	2b0f      	cmp	r3, #15
 8003880:	d8f3      	bhi.n	800386a <AES_CTR_Decrypt_Init+0x1e>
 8003882:	f894 8004 	ldrb.w	r8, [r4, #4]
 8003886:	60e2      	str	r2, [r4, #12]
 8003888:	2300      	movs	r3, #0
 800388a:	f028 0506 	bic.w	r5, r8, #6
 800388e:	7125      	strb	r5, [r4, #4]
 8003890:	461e      	mov	r6, r3
 8003892:	6163      	str	r3, [r4, #20]
 8003894:	61a3      	str	r3, [r4, #24]
 8003896:	61e3      	str	r3, [r4, #28]
 8003898:	6223      	str	r3, [r4, #32]
 800389a:	461d      	mov	r5, r3
 800389c:	e002      	b.n	80038a4 <AES_CTR_Decrypt_Init+0x58>
 800389e:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 80038a2:	6976      	ldr	r6, [r6, #20]
 80038a4:	f003 0703 	and.w	r7, r3, #3
 80038a8:	f812 9003 	ldrb.w	r9, [r2, r3]
 80038ac:	f1c7 0703 	rsb	r7, r7, #3
 80038b0:	00ff      	lsls	r7, r7, #3
 80038b2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80038b6:	3301      	adds	r3, #1
 80038b8:	fa09 f707 	lsl.w	r7, r9, r7
 80038bc:	433e      	orrs	r6, r7
 80038be:	4283      	cmp	r3, r0
 80038c0:	616e      	str	r6, [r5, #20]
 80038c2:	ea4f 05a3 	mov.w	r5, r3, asr #2
 80038c6:	d1ea      	bne.n	800389e <AES_CTR_Decrypt_Init+0x52>
 80038c8:	f018 0801 	ands.w	r8, r8, #1
 80038cc:	d109      	bne.n	80038e2 <AES_CTR_Decrypt_Init+0x96>
 80038ce:	60a1      	str	r1, [r4, #8]
 80038d0:	4608      	mov	r0, r1
 80038d2:	4662      	mov	r2, ip
 80038d4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80038d8:	f7ff fb42 	bl	8002f60 <AES_keyschedule_enc>
 80038dc:	4640      	mov	r0, r8
 80038de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038e2:	2000      	movs	r0, #0
 80038e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080038e8 <AES_CTR_Decrypt_Append>:
 80038e8:	f7ff bd30 	b.w	800334c <AES_CTR_Encrypt_Append>

080038ec <AES_CTR_Decrypt_Finish>:
 80038ec:	b140      	cbz	r0, 8003900 <AES_CTR_Decrypt_Finish+0x14>
 80038ee:	b13a      	cbz	r2, 8003900 <AES_CTR_Decrypt_Finish+0x14>
 80038f0:	7901      	ldrb	r1, [r0, #4]
 80038f2:	2300      	movs	r3, #0
 80038f4:	f041 0102 	orr.w	r1, r1, #2
 80038f8:	7101      	strb	r1, [r0, #4]
 80038fa:	4618      	mov	r0, r3
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	4770      	bx	lr
 8003900:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8003904:	4770      	bx	lr
 8003906:	bf00      	nop

08003908 <__libc_init_array>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4d0d      	ldr	r5, [pc, #52]	; (8003940 <__libc_init_array+0x38>)
 800390c:	4c0d      	ldr	r4, [pc, #52]	; (8003944 <__libc_init_array+0x3c>)
 800390e:	1b64      	subs	r4, r4, r5
 8003910:	10a4      	asrs	r4, r4, #2
 8003912:	2600      	movs	r6, #0
 8003914:	42a6      	cmp	r6, r4
 8003916:	d109      	bne.n	800392c <__libc_init_array+0x24>
 8003918:	4d0b      	ldr	r5, [pc, #44]	; (8003948 <__libc_init_array+0x40>)
 800391a:	4c0c      	ldr	r4, [pc, #48]	; (800394c <__libc_init_array+0x44>)
 800391c:	f000 f820 	bl	8003960 <_init>
 8003920:	1b64      	subs	r4, r4, r5
 8003922:	10a4      	asrs	r4, r4, #2
 8003924:	2600      	movs	r6, #0
 8003926:	42a6      	cmp	r6, r4
 8003928:	d105      	bne.n	8003936 <__libc_init_array+0x2e>
 800392a:	bd70      	pop	{r4, r5, r6, pc}
 800392c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003930:	4798      	blx	r3
 8003932:	3601      	adds	r6, #1
 8003934:	e7ee      	b.n	8003914 <__libc_init_array+0xc>
 8003936:	f855 3b04 	ldr.w	r3, [r5], #4
 800393a:	4798      	blx	r3
 800393c:	3601      	adds	r6, #1
 800393e:	e7f2      	b.n	8003926 <__libc_init_array+0x1e>
 8003940:	08003f58 	.word	0x08003f58
 8003944:	08003f58 	.word	0x08003f58
 8003948:	08003f58 	.word	0x08003f58
 800394c:	08003f5c 	.word	0x08003f5c

08003950 <memset>:
 8003950:	4402      	add	r2, r0
 8003952:	4603      	mov	r3, r0
 8003954:	4293      	cmp	r3, r2
 8003956:	d100      	bne.n	800395a <memset+0xa>
 8003958:	4770      	bx	lr
 800395a:	f803 1b01 	strb.w	r1, [r3], #1
 800395e:	e7f9      	b.n	8003954 <memset+0x4>

08003960 <_init>:
 8003960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003962:	bf00      	nop
 8003964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003966:	bc08      	pop	{r3}
 8003968:	469e      	mov	lr, r3
 800396a:	4770      	bx	lr

0800396c <_fini>:
 800396c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396e:	bf00      	nop
 8003970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003972:	bc08      	pop	{r3}
 8003974:	469e      	mov	lr, r3
 8003976:	4770      	bx	lr
