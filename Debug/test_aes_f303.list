
test_aes_f303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003990  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  08003b18  08003b18  00013b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004104  08004104  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08004104  08004104  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004104  08004104  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004104  08004104  00014104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004108  08004108  00014108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  0800410c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000002c  08004138  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  08004138  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000abfb  00000000  00000000  00020056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001914  00000000  00000000  0002ac51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  0002c568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  0002cc88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ccb8  00000000  00000000  0002d310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb3e  00000000  00000000  00049fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af7e8  00000000  00000000  00055b06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000d5  00000000  00000000  001052ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001ba0  00000000  00000000  001053c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b00 	.word	0x08003b00

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08003b00 	.word	0x08003b00

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
    int32_t status = AES_SUCCESS;
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d2:	f000 fb7f 	bl	80008d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d6:	f000 f873 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001da:	f000 f91d 	bl	8000418 <MX_GPIO_Init>
  MX_CRC_Init();
 80001de:	f000 f8c9 	bl	8000374 <MX_CRC_Init>
  MX_USART1_UART_Init();
 80001e2:	f000 f8e9 	bl	80003b8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    /* Enable CRC clock */
    __CRC_CLK_ENABLE()
 80001e6:	4b2c      	ldr	r3, [pc, #176]	; (8000298 <main+0xd0>)
 80001e8:	695b      	ldr	r3, [r3, #20]
 80001ea:	4a2b      	ldr	r2, [pc, #172]	; (8000298 <main+0xd0>)
 80001ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001f0:	6153      	str	r3, [r2, #20]
 80001f2:	4b29      	ldr	r3, [pc, #164]	; (8000298 <main+0xd0>)
 80001f4:	695b      	ldr	r3, [r3, #20]
 80001f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80001fa:	603b      	str	r3, [r7, #0]
 80001fc:	683b      	ldr	r3, [r7, #0]
    //PWR_SLEEPENTRY_WFI выход из режима произойдёт после прерывания
    //HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);

    /* Encrypt DATA with AES in CTR mode */

    if (flag_key_interrupt == 1)
 80001fe:	4b27      	ldr	r3, [pc, #156]	; (800029c <main+0xd4>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	2b01      	cmp	r3, #1
 8000204:	d146      	bne.n	8000294 <main+0xcc>
	{
	status = STM32_AES_CTR_Encrypt((uint8_t*) Plaintext, PLAINTEXT_LENGTH, Key,
 8000206:	4b26      	ldr	r3, [pc, #152]	; (80002a0 <main+0xd8>)
 8000208:	9302      	str	r3, [sp, #8]
 800020a:	4b26      	ldr	r3, [pc, #152]	; (80002a4 <main+0xdc>)
 800020c:	9301      	str	r3, [sp, #4]
 800020e:	2310      	movs	r3, #16
 8000210:	9300      	str	r3, [sp, #0]
 8000212:	4b25      	ldr	r3, [pc, #148]	; (80002a8 <main+0xe0>)
 8000214:	4a25      	ldr	r2, [pc, #148]	; (80002ac <main+0xe4>)
 8000216:	2140      	movs	r1, #64	; 0x40
 8000218:	4825      	ldr	r0, [pc, #148]	; (80002b0 <main+0xe8>)
 800021a:	f000 f97b 	bl	8000514 <STM32_AES_CTR_Encrypt>
 800021e:	6078      	str	r0, [r7, #4]
		    IV, sizeof(IV), OutputMessage, &OutputMessageLength);
	    if (status == AES_SUCCESS)
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	2b00      	cmp	r3, #0
 8000224:	d10a      	bne.n	800023c <main+0x74>
		{
		if (Buffercmp(Expected_Ciphertext, OutputMessage, PLAINTEXT_LENGTH)
 8000226:	2240      	movs	r2, #64	; 0x40
 8000228:	491e      	ldr	r1, [pc, #120]	; (80002a4 <main+0xdc>)
 800022a:	4822      	ldr	r0, [pc, #136]	; (80002b4 <main+0xec>)
 800022c:	f000 fa4e 	bl	80006cc <Buffercmp>
 8000230:	4603      	mov	r3, r0
 8000232:	2b01      	cmp	r3, #1
 8000234:	d004      	beq.n	8000240 <main+0x78>
		    {
		    /* add application traitment in case of AES CTR encryption is passed */
		    }
		else
		    {
		    Error_Handler();
 8000236:	f000 fa6a 	bl	800070e <Error_Handler>
 800023a:	e001      	b.n	8000240 <main+0x78>
	    else
		{
		/* In case of encryption not success the possible values of status:
		 * AES_ERR_BAD_CONTEXT, AES_ERR_BAD_PARAMETER, AES_ERR_BAD_OPERATION
		 */
		Error_Handler();
 800023c:	f000 fa67 	bl	800070e <Error_Handler>
		}
	    status = STM32_AES_CTR_Decrypt((uint8_t*) Expected_Ciphertext,
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <main+0xd8>)
 8000242:	9302      	str	r3, [sp, #8]
 8000244:	4b17      	ldr	r3, [pc, #92]	; (80002a4 <main+0xdc>)
 8000246:	9301      	str	r3, [sp, #4]
 8000248:	2310      	movs	r3, #16
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	4b16      	ldr	r3, [pc, #88]	; (80002a8 <main+0xe0>)
 800024e:	4a17      	ldr	r2, [pc, #92]	; (80002ac <main+0xe4>)
 8000250:	2140      	movs	r1, #64	; 0x40
 8000252:	4818      	ldr	r0, [pc, #96]	; (80002b4 <main+0xec>)
 8000254:	f000 f9cc 	bl	80005f0 <STM32_AES_CTR_Decrypt>
 8000258:	6078      	str	r0, [r7, #4]
	    PLAINTEXT_LENGTH, Key, IV, sizeof(IV), OutputMessage, &OutputMessageLength);
	    if (status == AES_SUCCESS)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d10a      	bne.n	8000276 <main+0xae>
		{
		if (Buffercmp(Plaintext, OutputMessage, PLAINTEXT_LENGTH) == PASSED)
 8000260:	2240      	movs	r2, #64	; 0x40
 8000262:	4910      	ldr	r1, [pc, #64]	; (80002a4 <main+0xdc>)
 8000264:	4812      	ldr	r0, [pc, #72]	; (80002b0 <main+0xe8>)
 8000266:	f000 fa31 	bl	80006cc <Buffercmp>
 800026a:	4603      	mov	r3, r0
 800026c:	2b01      	cmp	r3, #1
 800026e:	d004      	beq.n	800027a <main+0xb2>
		    {
		    /* add application traitment in case of AES CTR decryption is passed */
		    }
		else
		    {
		    Error_Handler();
 8000270:	f000 fa4d 	bl	800070e <Error_Handler>
 8000274:	e001      	b.n	800027a <main+0xb2>
	    else
		{
		/* In case of decryption not success the possible values of status:
		 * AES_ERR_BAD_CONTEXT, AES_ERR_BAD_PARAMETER, AES_ERR_BAD_OPERATION
		 */
		Error_Handler();
 8000276:	f000 fa4a 	bl	800070e <Error_Handler>
		}

	HAL_UART_Transmit(&huart1, (uint8_t*) "proverka\n", 8, 1000);
 800027a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027e:	2208      	movs	r2, #8
 8000280:	490d      	ldr	r1, [pc, #52]	; (80002b8 <main+0xf0>)
 8000282:	480e      	ldr	r0, [pc, #56]	; (80002bc <main+0xf4>)
 8000284:	f002 fa44 	bl	8002710 <HAL_UART_Transmit>

	HAL_Delay(100);    // защита от дребизга кнопки
 8000288:	2064      	movs	r0, #100	; 0x64
 800028a:	f000 fb85 	bl	8000998 <HAL_Delay>
	flag_key_interrupt = 0;
 800028e:	4b03      	ldr	r3, [pc, #12]	; (800029c <main+0xd4>)
 8000290:	2200      	movs	r2, #0
 8000292:	701a      	strb	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8000294:	e7fe      	b.n	8000294 <main+0xcc>
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000
 800029c:	20000048 	.word	0x20000048
 80002a0:	2000004c 	.word	0x2000004c
 80002a4:	200000f8 	.word	0x200000f8
 80002a8:	20000010 	.word	0x20000010
 80002ac:	20000000 	.word	0x20000000
 80002b0:	08003b24 	.word	0x08003b24
 80002b4:	08003b64 	.word	0x08003b64
 80002b8:	08003b18 	.word	0x08003b18
 80002bc:	20000074 	.word	0x20000074

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b09e      	sub	sp, #120	; 0x78
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80002ca:	2228      	movs	r2, #40	; 0x28
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f003 fc0e 	bl	8003af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002d8:	2200      	movs	r2, #0
 80002da:	601a      	str	r2, [r3, #0]
 80002dc:	605a      	str	r2, [r3, #4]
 80002de:	609a      	str	r2, [r3, #8]
 80002e0:	60da      	str	r2, [r3, #12]
 80002e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002e4:	463b      	mov	r3, r7
 80002e6:	223c      	movs	r2, #60	; 0x3c
 80002e8:	2100      	movs	r1, #0
 80002ea:	4618      	mov	r0, r3
 80002ec:	f003 fc00 	bl	8003af0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f0:	2301      	movs	r3, #1
 80002f2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fe:	2301      	movs	r3, #1
 8000300:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000302:	2302      	movs	r3, #2
 8000304:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000306:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800030a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800030c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000310:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000316:	4618      	mov	r0, r3
 8000318:	f000 fec2 	bl	80010a0 <HAL_RCC_OscConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000322:	f000 f9f4 	bl	800070e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032a:	2302      	movs	r3, #2
 800032c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000336:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000338:	2300      	movs	r3, #0
 800033a:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f001 fdb4 	bl	8001eb0 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800034e:	f000 f9de 	bl	800070e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000352:	2301      	movs	r3, #1
 8000354:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000356:	2300      	movs	r3, #0
 8000358:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035a:	463b      	mov	r3, r7
 800035c:	4618      	mov	r0, r3
 800035e:	f001 ffd9 	bl	8002314 <HAL_RCCEx_PeriphCLKConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000368:	f000 f9d1 	bl	800070e <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	3778      	adds	r7, #120	; 0x78
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000378:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <MX_CRC_Init+0x3c>)
 800037a:	4a0e      	ldr	r2, [pc, #56]	; (80003b4 <MX_CRC_Init+0x40>)
 800037c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800037e:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <MX_CRC_Init+0x3c>)
 8000380:	2200      	movs	r2, #0
 8000382:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000384:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <MX_CRC_Init+0x3c>)
 8000386:	2200      	movs	r2, #0
 8000388:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800038a:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <MX_CRC_Init+0x3c>)
 800038c:	2200      	movs	r2, #0
 800038e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <MX_CRC_Init+0x3c>)
 8000392:	2200      	movs	r2, #0
 8000394:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000396:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <MX_CRC_Init+0x3c>)
 8000398:	2201      	movs	r2, #1
 800039a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800039c:	4804      	ldr	r0, [pc, #16]	; (80003b0 <MX_CRC_Init+0x3c>)
 800039e:	f000 fc03 	bl	8000ba8 <HAL_CRC_Init>
 80003a2:	4603      	mov	r3, r0
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d001      	beq.n	80003ac <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80003a8:	f000 f9b1 	bl	800070e <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000050 	.word	0x20000050
 80003b4:	40023000 	.word	0x40023000

080003b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003bc:	4b14      	ldr	r3, [pc, #80]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003be:	4a15      	ldr	r2, [pc, #84]	; (8000414 <MX_USART1_UART_Init+0x5c>)
 80003c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80003c2:	4b13      	ldr	r3, [pc, #76]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80003c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003ca:	4b11      	ldr	r3, [pc, #68]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003d0:	4b0f      	ldr	r3, [pc, #60]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003d6:	4b0e      	ldr	r3, [pc, #56]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003d8:	2200      	movs	r2, #0
 80003da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003dc:	4b0c      	ldr	r3, [pc, #48]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003de:	220c      	movs	r2, #12
 80003e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e8:	4b09      	ldr	r3, [pc, #36]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003ee:	4b08      	ldr	r3, [pc, #32]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003fa:	4805      	ldr	r0, [pc, #20]	; (8000410 <MX_USART1_UART_Init+0x58>)
 80003fc:	f002 f93a 	bl	8002674 <HAL_UART_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000406:	f000 f982 	bl	800070e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800040a:	bf00      	nop
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000074 	.word	0x20000074
 8000414:	40013800 	.word	0x40013800

08000418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08a      	sub	sp, #40	; 0x28
 800041c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800041e:	f107 0314 	add.w	r3, r7, #20
 8000422:	2200      	movs	r2, #0
 8000424:	601a      	str	r2, [r3, #0]
 8000426:	605a      	str	r2, [r3, #4]
 8000428:	609a      	str	r2, [r3, #8]
 800042a:	60da      	str	r2, [r3, #12]
 800042c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800042e:	4b37      	ldr	r3, [pc, #220]	; (800050c <MX_GPIO_Init+0xf4>)
 8000430:	695b      	ldr	r3, [r3, #20]
 8000432:	4a36      	ldr	r2, [pc, #216]	; (800050c <MX_GPIO_Init+0xf4>)
 8000434:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000438:	6153      	str	r3, [r2, #20]
 800043a:	4b34      	ldr	r3, [pc, #208]	; (800050c <MX_GPIO_Init+0xf4>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000442:	613b      	str	r3, [r7, #16]
 8000444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000446:	4b31      	ldr	r3, [pc, #196]	; (800050c <MX_GPIO_Init+0xf4>)
 8000448:	695b      	ldr	r3, [r3, #20]
 800044a:	4a30      	ldr	r2, [pc, #192]	; (800050c <MX_GPIO_Init+0xf4>)
 800044c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000450:	6153      	str	r3, [r2, #20]
 8000452:	4b2e      	ldr	r3, [pc, #184]	; (800050c <MX_GPIO_Init+0xf4>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800045a:	60fb      	str	r3, [r7, #12]
 800045c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800045e:	4b2b      	ldr	r3, [pc, #172]	; (800050c <MX_GPIO_Init+0xf4>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a2a      	ldr	r2, [pc, #168]	; (800050c <MX_GPIO_Init+0xf4>)
 8000464:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000468:	6153      	str	r3, [r2, #20]
 800046a:	4b28      	ldr	r3, [pc, #160]	; (800050c <MX_GPIO_Init+0xf4>)
 800046c:	695b      	ldr	r3, [r3, #20]
 800046e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000472:	60bb      	str	r3, [r7, #8]
 8000474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000476:	4b25      	ldr	r3, [pc, #148]	; (800050c <MX_GPIO_Init+0xf4>)
 8000478:	695b      	ldr	r3, [r3, #20]
 800047a:	4a24      	ldr	r2, [pc, #144]	; (800050c <MX_GPIO_Init+0xf4>)
 800047c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000480:	6153      	str	r3, [r2, #20]
 8000482:	4b22      	ldr	r3, [pc, #136]	; (800050c <MX_GPIO_Init+0xf4>)
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800048a:	607b      	str	r3, [r7, #4]
 800048c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800048e:	4b1f      	ldr	r3, [pc, #124]	; (800050c <MX_GPIO_Init+0xf4>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a1e      	ldr	r2, [pc, #120]	; (800050c <MX_GPIO_Init+0xf4>)
 8000494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b1c      	ldr	r3, [pc, #112]	; (800050c <MX_GPIO_Init+0xf4>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin, GPIO_PIN_RESET);
 80004a6:	2200      	movs	r2, #0
 80004a8:	f44f 7184 	mov.w	r1, #264	; 0x108
 80004ac:	4818      	ldr	r0, [pc, #96]	; (8000510 <MX_GPIO_Init+0xf8>)
 80004ae:	f000 fddf 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin;
 80004b2:	2334      	movs	r3, #52	; 0x34
 80004b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80004b6:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80004ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	2300      	movs	r3, #0
 80004be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004c0:	f107 0314 	add.w	r3, r7, #20
 80004c4:	4619      	mov	r1, r3
 80004c6:	4812      	ldr	r0, [pc, #72]	; (8000510 <MX_GPIO_Init+0xf8>)
 80004c8:	f000 fc58 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin;
 80004cc:	f44f 7384 	mov.w	r3, #264	; 0x108
 80004d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	2301      	movs	r3, #1
 80004d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	2300      	movs	r3, #0
 80004d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004da:	2300      	movs	r3, #0
 80004dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004de:	f107 0314 	add.w	r3, r7, #20
 80004e2:	4619      	mov	r1, r3
 80004e4:	480a      	ldr	r0, [pc, #40]	; (8000510 <MX_GPIO_Init+0xf8>)
 80004e6:	f000 fc49 	bl	8000d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 80004ea:	2301      	movs	r3, #1
 80004ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004ee:	2300      	movs	r3, #0
 80004f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	4619      	mov	r1, r3
 80004fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000500:	f000 fc3c 	bl	8000d7c <HAL_GPIO_Init>

}
 8000504:	bf00      	nop
 8000506:	3728      	adds	r7, #40	; 0x28
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	40021000 	.word	0x40021000
 8000510:	48001000 	.word	0x48001000

08000514 <STM32_AES_CTR_Encrypt>:
 */
int32_t STM32_AES_CTR_Encrypt(uint8_t *InputMessage,
	uint32_t InputMessageLength, uint8_t *AES128_Key,
	uint8_t *InitializationVector, uint32_t IvLength,
	uint8_t *OutputMessage, uint32_t *OutputMessageLength)
    {
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b0cf      	sub	sp, #316	; 0x13c
 8000518:	af02      	add	r7, sp, #8
 800051a:	f107 040c 	add.w	r4, r7, #12
 800051e:	6020      	str	r0, [r4, #0]
 8000520:	f107 0008 	add.w	r0, r7, #8
 8000524:	6001      	str	r1, [r0, #0]
 8000526:	1d39      	adds	r1, r7, #4
 8000528:	600a      	str	r2, [r1, #0]
 800052a:	463a      	mov	r2, r7
 800052c:	6013      	str	r3, [r2, #0]
    AESCTRctx_stt AESctx;

    uint32_t error_status = AES_SUCCESS;
 800052e:	2300      	movs	r3, #0
 8000530:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    int32_t outputLength = 0;
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]

    /* Set flag field to default value */
    AESctx.mFlags = E_SK_DEFAULT;
 800053c:	f107 0314 	add.w	r3, r7, #20
 8000540:	2200      	movs	r2, #0
 8000542:	711a      	strb	r2, [r3, #4]

    /* Set key size to 16 (corresponding to AES-128) */
    AESctx.mKeySize = 16;
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	2210      	movs	r2, #16
 800054a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set iv size field to IvLength*/
    AESctx.mIvSize = IvLength;
 800054c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	611a      	str	r2, [r3, #16]

    /* Initialize the operation, by passing the key.
     * Third parameter is NULL because CTR doesn't use any IV */
    error_status = AES_CTR_Encrypt_Init(&AESctx, AES128_Key,
 8000556:	463a      	mov	r2, r7
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	f107 0014 	add.w	r0, r7, #20
 800055e:	6812      	ldr	r2, [r2, #0]
 8000560:	6819      	ldr	r1, [r3, #0]
 8000562:	f002 ff75 	bl	8003450 <AES_CTR_Encrypt_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	    InitializationVector);

    /* check for initialization errors */
    if (error_status == AES_SUCCESS)
 800056c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000570:	2b00      	cmp	r3, #0
 8000572:	d136      	bne.n	80005e2 <STM32_AES_CTR_Encrypt+0xce>
	{
	/* Encrypt Data */
	error_status = AES_CTR_Encrypt_Append(&AESctx, InputMessage,
 8000574:	f107 0308 	add.w	r3, r7, #8
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	f107 010c 	add.w	r1, r7, #12
 800057e:	f107 0014 	add.w	r0, r7, #20
 8000582:	f107 0310 	add.w	r3, r7, #16
 8000586:	9300      	str	r3, [sp, #0]
 8000588:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800058c:	6809      	ldr	r1, [r1, #0]
 800058e:	f002 ffad 	bl	80034ec <AES_CTR_Encrypt_Append>
 8000592:	4603      	mov	r3, r0
 8000594:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		InputMessageLength, OutputMessage, &outputLength);

	if (error_status == AES_SUCCESS)
 8000598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800059c:	2b00      	cmp	r3, #0
 800059e:	d120      	bne.n	80005e2 <STM32_AES_CTR_Encrypt+0xce>
	    {
	    /* Write the number of data written*/
	    *OutputMessageLength = outputLength;
 80005a0:	f107 0310 	add.w	r3, r7, #16
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	461a      	mov	r2, r3
 80005a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80005ac:	601a      	str	r2, [r3, #0]
	    /* Do the Finalization */
	    error_status = AES_CTR_Encrypt_Finish(&AESctx,
		    OutputMessage + *OutputMessageLength, &outputLength);
 80005ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80005b2:	681b      	ldr	r3, [r3, #0]
	    error_status = AES_CTR_Encrypt_Finish(&AESctx,
 80005b4:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80005b8:	18d1      	adds	r1, r2, r3
 80005ba:	f107 0210 	add.w	r2, r7, #16
 80005be:	f107 0314 	add.w	r3, r7, #20
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fa04 	bl	80039d0 <AES_CTR_Encrypt_Finish>
 80005c8:	4603      	mov	r3, r0
 80005ca:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	    /* Add data written to the information to be returned */
	    *OutputMessageLength += outputLength;
 80005ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f107 0210 	add.w	r2, r7, #16
 80005d8:	6812      	ldr	r2, [r2, #0]
 80005da:	441a      	add	r2, r3
 80005dc:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80005e0:	601a      	str	r2, [r3, #0]
	    }
	}

    return error_status;
 80005e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
    }
 80005e6:	4618      	mov	r0, r3
 80005e8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd90      	pop	{r4, r7, pc}

080005f0 <STM32_AES_CTR_Decrypt>:
 */
int32_t STM32_AES_CTR_Decrypt(uint8_t *InputMessage,
	uint32_t InputMessageLength, uint8_t *AES128_Key,
	uint8_t *InitializationVector, uint32_t IvLength,
	uint8_t *OutputMessage, uint32_t *OutputMessageLength)
    {
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b0cf      	sub	sp, #316	; 0x13c
 80005f4:	af02      	add	r7, sp, #8
 80005f6:	f107 040c 	add.w	r4, r7, #12
 80005fa:	6020      	str	r0, [r4, #0]
 80005fc:	f107 0008 	add.w	r0, r7, #8
 8000600:	6001      	str	r1, [r0, #0]
 8000602:	1d39      	adds	r1, r7, #4
 8000604:	600a      	str	r2, [r1, #0]
 8000606:	463a      	mov	r2, r7
 8000608:	6013      	str	r3, [r2, #0]
    AESCTRctx_stt AESctx;

    uint32_t error_status = AES_SUCCESS;
 800060a:	2300      	movs	r3, #0
 800060c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    int32_t outputLength = 0;
 8000610:	f107 0310 	add.w	r3, r7, #16
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]

    /* Set flag field to default value */
    AESctx.mFlags = E_SK_DEFAULT;
 8000618:	f107 0314 	add.w	r3, r7, #20
 800061c:	2200      	movs	r2, #0
 800061e:	711a      	strb	r2, [r3, #4]

    /* Set key size to 16 (corresponding to AES-128) */
    AESctx.mKeySize = 16;
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	2210      	movs	r2, #16
 8000626:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set iv size field to IvLength*/
    AESctx.mIvSize = IvLength;
 8000628:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800062c:	f107 0314 	add.w	r3, r7, #20
 8000630:	611a      	str	r2, [r3, #16]

    /* Initialize the operation, by passing the key.
     * Third parameter is NULL because CTR doesn't use any IV */
    error_status = AES_CTR_Decrypt_Init(&AESctx, AES128_Key,
 8000632:	463a      	mov	r2, r7
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	f107 0014 	add.w	r0, r7, #20
 800063a:	6812      	ldr	r2, [r2, #0]
 800063c:	6819      	ldr	r1, [r3, #0]
 800063e:	f003 f9d5 	bl	80039ec <AES_CTR_Decrypt_Init>
 8000642:	4603      	mov	r3, r0
 8000644:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	    InitializationVector);

    /* check for initialization errors */
    if (error_status == AES_SUCCESS)
 8000648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800064c:	2b00      	cmp	r3, #0
 800064e:	d136      	bne.n	80006be <STM32_AES_CTR_Decrypt+0xce>
	{
	/* Decrypt Data */
	error_status = AES_CTR_Decrypt_Append(&AESctx, InputMessage,
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	f107 010c 	add.w	r1, r7, #12
 800065a:	f107 0014 	add.w	r0, r7, #20
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000668:	6809      	ldr	r1, [r1, #0]
 800066a:	f003 fa0d 	bl	8003a88 <AES_CTR_Decrypt_Append>
 800066e:	4603      	mov	r3, r0
 8000670:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
		InputMessageLength, OutputMessage, &outputLength);
	if (error_status == AES_SUCCESS)
 8000674:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000678:	2b00      	cmp	r3, #0
 800067a:	d120      	bne.n	80006be <STM32_AES_CTR_Decrypt+0xce>
	    {
	    /* Write the number of data written*/
	    *OutputMessageLength = outputLength;
 800067c:	f107 0310 	add.w	r3, r7, #16
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8000688:	601a      	str	r2, [r3, #0]
	    /* Do the Finalization */
	    error_status = AES_CTR_Decrypt_Finish(&AESctx,
		    OutputMessage + *OutputMessageLength, &outputLength);
 800068a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800068e:	681b      	ldr	r3, [r3, #0]
	    error_status = AES_CTR_Decrypt_Finish(&AESctx,
 8000690:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8000694:	18d1      	adds	r1, r2, r3
 8000696:	f107 0210 	add.w	r2, r7, #16
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4618      	mov	r0, r3
 80006a0:	f003 f9f4 	bl	8003a8c <AES_CTR_Decrypt_Finish>
 80006a4:	4603      	mov	r3, r0
 80006a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	    /* Add data written to the information to be returned */
	    *OutputMessageLength += outputLength;
 80006aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f107 0210 	add.w	r2, r7, #16
 80006b4:	6812      	ldr	r2, [r2, #0]
 80006b6:	441a      	add	r2, r3
 80006b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80006bc:	601a      	str	r2, [r3, #0]
	    }
	}

    return error_status;
 80006be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
    }
 80006c2:	4618      	mov	r0, r3
 80006c4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd90      	pop	{r4, r7, pc}

080006cc <Buffercmp>:
 * @retval PASSED: pBuffer identical to pBuffer1
 *         FAILED: pBuffer differs from pBuffer1
 */
TestStatus Buffercmp(const uint8_t *pBuffer, uint8_t *pBuffer1,
	uint16_t BufferLength)
    {
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	4613      	mov	r3, r2
 80006d8:	80fb      	strh	r3, [r7, #6]
    while (BufferLength--)
 80006da:	e00d      	b.n	80006f8 <Buffercmp+0x2c>
	{
	if (*pBuffer != *pBuffer1)
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	781a      	ldrb	r2, [r3, #0]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d001      	beq.n	80006ec <Buffercmp+0x20>
	    {
	    return FAILED;
 80006e8:	2300      	movs	r3, #0
 80006ea:	e00b      	b.n	8000704 <Buffercmp+0x38>
	    }

	pBuffer++;
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	3301      	adds	r3, #1
 80006f0:	60fb      	str	r3, [r7, #12]
	pBuffer1++;
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	3301      	adds	r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
    while (BufferLength--)
 80006f8:	88fb      	ldrh	r3, [r7, #6]
 80006fa:	1e5a      	subs	r2, r3, #1
 80006fc:	80fa      	strh	r2, [r7, #6]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d1ec      	bne.n	80006dc <Buffercmp+0x10>
	}

    return PASSED;
 8000702:	2301      	movs	r3, #1
    }
 8000704:	4618      	mov	r0, r3
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000712:	b672      	cpsid	i
}
 8000714:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000716:	e7fe      	b.n	8000716 <Error_Handler+0x8>

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	4b0f      	ldr	r3, [pc, #60]	; (800075c <HAL_MspInit+0x44>)
 8000720:	699b      	ldr	r3, [r3, #24]
 8000722:	4a0e      	ldr	r2, [pc, #56]	; (800075c <HAL_MspInit+0x44>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6193      	str	r3, [r2, #24]
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <HAL_MspInit+0x44>)
 800072c:	699b      	ldr	r3, [r3, #24]
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_MspInit+0x44>)
 8000738:	69db      	ldr	r3, [r3, #28]
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x44>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	61d3      	str	r3, [r2, #28]
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x44>)
 8000744:	69db      	ldr	r3, [r3, #28]
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800074e:	2007      	movs	r0, #7
 8000750:	f000 f9f6 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40021000 	.word	0x40021000

08000760 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000760:	b480      	push	{r7}
 8000762:	b085      	sub	sp, #20
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a09      	ldr	r2, [pc, #36]	; (8000794 <HAL_CRC_MspInit+0x34>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d10b      	bne.n	800078a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_CRC_MspInit+0x38>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_CRC_MspInit+0x38>)
 8000778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_CRC_MspInit+0x38>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800078a:	bf00      	nop
 800078c:	3714      	adds	r7, #20
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40023000 	.word	0x40023000
 8000798:	40021000 	.word	0x40021000

0800079c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08a      	sub	sp, #40	; 0x28
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a17      	ldr	r2, [pc, #92]	; (8000818 <HAL_UART_MspInit+0x7c>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d127      	bne.n	800080e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <HAL_UART_MspInit+0x80>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a16      	ldr	r2, [pc, #88]	; (800081c <HAL_UART_MspInit+0x80>)
 80007c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <HAL_UART_MspInit+0x80>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <HAL_UART_MspInit+0x80>)
 80007d8:	695b      	ldr	r3, [r3, #20]
 80007da:	4a10      	ldr	r2, [pc, #64]	; (800081c <HAL_UART_MspInit+0x80>)
 80007dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007e0:	6153      	str	r3, [r2, #20]
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <HAL_UART_MspInit+0x80>)
 80007e4:	695b      	ldr	r3, [r3, #20]
 80007e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80007ee:	2330      	movs	r3, #48	; 0x30
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f2:	2302      	movs	r3, #2
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007fa:	2303      	movs	r3, #3
 80007fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007fe:	2307      	movs	r3, #7
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4619      	mov	r1, r3
 8000808:	4805      	ldr	r0, [pc, #20]	; (8000820 <HAL_UART_MspInit+0x84>)
 800080a:	f000 fab7 	bl	8000d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800080e:	bf00      	nop
 8000810:	3728      	adds	r7, #40	; 0x28
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40013800 	.word	0x40013800
 800081c:	40021000 	.word	0x40021000
 8000820:	48000800 	.word	0x48000800

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <NMI_Handler+0x4>

0800082a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <HardFault_Handler+0x4>

08000830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <MemManage_Handler+0x4>

08000836 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <BusFault_Handler+0x4>

0800083c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <UsageFault_Handler+0x4>

08000842 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bc80      	pop	{r7}
 800084c:	4770      	bx	lr

0800084e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	bc80      	pop	{r7}
 8000858:	4770      	bx	lr

0800085a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800085e:	bf00      	nop
 8000860:	46bd      	mov	sp, r7
 8000862:	bc80      	pop	{r7}
 8000864:	4770      	bx	lr

08000866 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086a:	f000 f879 	bl	8000960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}

08000872 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
	...

08000880 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480d      	ldr	r0, [pc, #52]	; (80008bc <LoopForever+0x6>)
  ldr r1, =_edata
 8000886:	490e      	ldr	r1, [pc, #56]	; (80008c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000888:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <LoopForever+0xe>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0b      	ldr	r2, [pc, #44]	; (80008c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800089c:	4c0b      	ldr	r4, [pc, #44]	; (80008cc <LoopForever+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008aa:	f7ff ffe2 	bl	8000872 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ae:	f003 f8fb 	bl	8003aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008b2:	f7ff fc89 	bl	80001c8 <main>

080008b6 <LoopForever>:

LoopForever:
    b LoopForever
 80008b6:	e7fe      	b.n	80008b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008b8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80008bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80008c4:	0800410c 	.word	0x0800410c
  ldr r2, =_sbss
 80008c8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80008cc:	2000013c 	.word	0x2000013c

080008d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008d0:	e7fe      	b.n	80008d0 <ADC1_2_IRQHandler>
	...

080008d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_Init+0x28>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a07      	ldr	r2, [pc, #28]	; (80008fc <HAL_Init+0x28>)
 80008de:	f043 0310 	orr.w	r3, r3, #16
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e4:	2003      	movs	r0, #3
 80008e6:	f000 f92b 	bl	8000b40 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 f808 	bl	8000900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008f0:	f7ff ff12 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008f4:	2300      	movs	r3, #0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	40022000 	.word	0x40022000

08000900 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_InitTick+0x54>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_InitTick+0x58>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	4619      	mov	r1, r3
 8000912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000916:	fbb3 f3f1 	udiv	r3, r3, r1
 800091a:	fbb2 f3f3 	udiv	r3, r2, r3
 800091e:	4618      	mov	r0, r3
 8000920:	f000 f935 	bl	8000b8e <HAL_SYSTICK_Config>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800092a:	2301      	movs	r3, #1
 800092c:	e00e      	b.n	800094c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2b0f      	cmp	r3, #15
 8000932:	d80a      	bhi.n	800094a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000934:	2200      	movs	r2, #0
 8000936:	6879      	ldr	r1, [r7, #4]
 8000938:	f04f 30ff 	mov.w	r0, #4294967295
 800093c:	f000 f90b 	bl	8000b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000940:	4a06      	ldr	r2, [pc, #24]	; (800095c <HAL_InitTick+0x5c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	e000      	b.n	800094c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000020 	.word	0x20000020
 8000958:	20000028 	.word	0x20000028
 800095c:	20000024 	.word	0x20000024

08000960 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <HAL_IncTick+0x1c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_IncTick+0x20>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4413      	add	r3, r2
 8000970:	4a03      	ldr	r2, [pc, #12]	; (8000980 <HAL_IncTick+0x20>)
 8000972:	6013      	str	r3, [r2, #0]
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr
 800097c:	20000028 	.word	0x20000028
 8000980:	20000138 	.word	0x20000138

08000984 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return uwTick;  
 8000988:	4b02      	ldr	r3, [pc, #8]	; (8000994 <HAL_GetTick+0x10>)
 800098a:	681b      	ldr	r3, [r3, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr
 8000994:	20000138 	.word	0x20000138

08000998 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009a0:	f7ff fff0 	bl	8000984 <HAL_GetTick>
 80009a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009b0:	d005      	beq.n	80009be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009b2:	4b0a      	ldr	r3, [pc, #40]	; (80009dc <HAL_Delay+0x44>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80009be:	bf00      	nop
 80009c0:	f7ff ffe0 	bl	8000984 <HAL_GetTick>
 80009c4:	4602      	mov	r2, r0
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	1ad3      	subs	r3, r2, r3
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d8f7      	bhi.n	80009c0 <HAL_Delay+0x28>
  {
  }
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3710      	adds	r7, #16
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000028 	.word	0x20000028

080009e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b085      	sub	sp, #20
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	f003 0307 	and.w	r3, r3, #7
 80009ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 80009f2:	68db      	ldr	r3, [r3, #12]
 80009f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f6:	68ba      	ldr	r2, [r7, #8]
 80009f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009fc:	4013      	ands	r3, r2
 80009fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <__NVIC_SetPriorityGrouping+0x44>)
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	60d3      	str	r3, [r2, #12]
}
 8000a18:	bf00      	nop
 8000a1a:	3714      	adds	r7, #20
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	e000ed00 	.word	0xe000ed00

08000a28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <__NVIC_GetPriorityGrouping+0x18>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	0a1b      	lsrs	r3, r3, #8
 8000a32:	f003 0307 	and.w	r3, r3, #7
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bc80      	pop	{r7}
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	6039      	str	r1, [r7, #0]
 8000a4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	db0a      	blt.n	8000a6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	b2da      	uxtb	r2, r3
 8000a5c:	490c      	ldr	r1, [pc, #48]	; (8000a90 <__NVIC_SetPriority+0x4c>)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	0112      	lsls	r2, r2, #4
 8000a64:	b2d2      	uxtb	r2, r2
 8000a66:	440b      	add	r3, r1
 8000a68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a6c:	e00a      	b.n	8000a84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4908      	ldr	r1, [pc, #32]	; (8000a94 <__NVIC_SetPriority+0x50>)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 030f 	and.w	r3, r3, #15
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	0112      	lsls	r2, r2, #4
 8000a7e:	b2d2      	uxtb	r2, r2
 8000a80:	440b      	add	r3, r1
 8000a82:	761a      	strb	r2, [r3, #24]
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000e100 	.word	0xe000e100
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b089      	sub	sp, #36	; 0x24
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	f1c3 0307 	rsb	r3, r3, #7
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	bf28      	it	cs
 8000ab6:	2304      	movcs	r3, #4
 8000ab8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	3304      	adds	r3, #4
 8000abe:	2b06      	cmp	r3, #6
 8000ac0:	d902      	bls.n	8000ac8 <NVIC_EncodePriority+0x30>
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3b03      	subs	r3, #3
 8000ac6:	e000      	b.n	8000aca <NVIC_EncodePriority+0x32>
 8000ac8:	2300      	movs	r3, #0
 8000aca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000acc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad6:	43da      	mvns	r2, r3
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	401a      	ands	r2, r3
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ae0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aea:	43d9      	mvns	r1, r3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af0:	4313      	orrs	r3, r2
         );
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3724      	adds	r7, #36	; 0x24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr

08000afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	3b01      	subs	r3, #1
 8000b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b0c:	d301      	bcc.n	8000b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00f      	b.n	8000b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <SysTick_Config+0x40>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b1a:	210f      	movs	r1, #15
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b20:	f7ff ff90 	bl	8000a44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <SysTick_Config+0x40>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <SysTick_Config+0x40>)
 8000b2c:	2207      	movs	r2, #7
 8000b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3708      	adds	r7, #8
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	e000e010 	.word	0xe000e010

08000b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	f7ff ff49 	bl	80009e0 <__NVIC_SetPriorityGrouping>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	b086      	sub	sp, #24
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	60b9      	str	r1, [r7, #8]
 8000b60:	607a      	str	r2, [r7, #4]
 8000b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b68:	f7ff ff5e 	bl	8000a28 <__NVIC_GetPriorityGrouping>
 8000b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b6e:	687a      	ldr	r2, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	6978      	ldr	r0, [r7, #20]
 8000b74:	f7ff ff90 	bl	8000a98 <NVIC_EncodePriority>
 8000b78:	4602      	mov	r2, r0
 8000b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff ff5f 	bl	8000a44 <__NVIC_SetPriority>
}
 8000b86:	bf00      	nop
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b082      	sub	sp, #8
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffb0 	bl	8000afc <SysTick_Config>
 8000b9c:	4603      	mov	r3, r0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
	...

08000ba8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d101      	bne.n	8000bba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	e054      	b.n	8000c64 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	7f5b      	ldrb	r3, [r3, #29]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d105      	bne.n	8000bd0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff fdc8 	bl	8000760 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2202      	movs	r2, #2
 8000bd4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	791b      	ldrb	r3, [r3, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d10c      	bne.n	8000bf8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	4a22      	ldr	r2, [pc, #136]	; (8000c6c <HAL_CRC_Init+0xc4>)
 8000be4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	689a      	ldr	r2, [r3, #8]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f022 0218 	bic.w	r2, r2, #24
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	e00c      	b.n	8000c12 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6899      	ldr	r1, [r3, #8]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	461a      	mov	r2, r3
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f000 f834 	bl	8000c70 <HAL_CRCEx_Polynomial_Set>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	e028      	b.n	8000c64 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	795b      	ldrb	r3, [r3, #5]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d105      	bne.n	8000c26 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	e004      	b.n	8000c30 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	6912      	ldr	r2, [r2, #16]
 8000c2e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	695a      	ldr	r2, [r3, #20]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	689b      	ldr	r3, [r3, #8]
 8000c4c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	699a      	ldr	r2, [r3, #24]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2201      	movs	r2, #1
 8000c60:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	04c11db7 	.word	0x04c11db7

08000c70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b087      	sub	sp, #28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8000c80:	231f      	movs	r3, #31
 8000c82:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8000c84:	bf00      	nop
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	613a      	str	r2, [r7, #16]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d009      	beq.n	8000ca4 <HAL_CRCEx_Polynomial_Set+0x34>
 8000c90:	693b      	ldr	r3, [r7, #16]
 8000c92:	f003 031f 	and.w	r3, r3, #31
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	fa22 f303 	lsr.w	r3, r2, r3
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d0f0      	beq.n	8000c86 <HAL_CRCEx_Polynomial_Set+0x16>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b18      	cmp	r3, #24
 8000ca8:	d846      	bhi.n	8000d38 <HAL_CRCEx_Polynomial_Set+0xc8>
 8000caa:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <HAL_CRCEx_Polynomial_Set+0x40>)
 8000cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb0:	08000d3f 	.word	0x08000d3f
 8000cb4:	08000d39 	.word	0x08000d39
 8000cb8:	08000d39 	.word	0x08000d39
 8000cbc:	08000d39 	.word	0x08000d39
 8000cc0:	08000d39 	.word	0x08000d39
 8000cc4:	08000d39 	.word	0x08000d39
 8000cc8:	08000d39 	.word	0x08000d39
 8000ccc:	08000d39 	.word	0x08000d39
 8000cd0:	08000d2d 	.word	0x08000d2d
 8000cd4:	08000d39 	.word	0x08000d39
 8000cd8:	08000d39 	.word	0x08000d39
 8000cdc:	08000d39 	.word	0x08000d39
 8000ce0:	08000d39 	.word	0x08000d39
 8000ce4:	08000d39 	.word	0x08000d39
 8000ce8:	08000d39 	.word	0x08000d39
 8000cec:	08000d39 	.word	0x08000d39
 8000cf0:	08000d21 	.word	0x08000d21
 8000cf4:	08000d39 	.word	0x08000d39
 8000cf8:	08000d39 	.word	0x08000d39
 8000cfc:	08000d39 	.word	0x08000d39
 8000d00:	08000d39 	.word	0x08000d39
 8000d04:	08000d39 	.word	0x08000d39
 8000d08:	08000d39 	.word	0x08000d39
 8000d0c:	08000d39 	.word	0x08000d39
 8000d10:	08000d15 	.word	0x08000d15
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	2b06      	cmp	r3, #6
 8000d18:	d913      	bls.n	8000d42 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000d1e:	e010      	b.n	8000d42 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8000d20:	693b      	ldr	r3, [r7, #16]
 8000d22:	2b07      	cmp	r3, #7
 8000d24:	d90f      	bls.n	8000d46 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000d2a:	e00c      	b.n	8000d46 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	2b0f      	cmp	r3, #15
 8000d30:	d90b      	bls.n	8000d4a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8000d36:	e008      	b.n	8000d4a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8000d3c:	e006      	b.n	8000d4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000d3e:	bf00      	nop
 8000d40:	e004      	b.n	8000d4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000d42:	bf00      	nop
 8000d44:	e002      	b.n	8000d4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000d46:	bf00      	nop
 8000d48:	e000      	b.n	8000d4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8000d4a:	bf00      	nop
  }
  if (status == HAL_OK)
 8000d4c:	7dfb      	ldrb	r3, [r7, #23]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d10d      	bne.n	8000d6e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68ba      	ldr	r2, [r7, #8]
 8000d58:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	689b      	ldr	r3, [r3, #8]
 8000d60:	f023 0118 	bic.w	r1, r3, #24
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	687a      	ldr	r2, [r7, #4]
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8000d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8a:	e154      	b.n	8001036 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	2101      	movs	r1, #1
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	fa01 f303 	lsl.w	r3, r1, r3
 8000d98:	4013      	ands	r3, r2
 8000d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	f000 8146 	beq.w	8001030 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d005      	beq.n	8000dbc <HAL_GPIO_Init+0x40>
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f003 0303 	and.w	r3, r3, #3
 8000db8:	2b02      	cmp	r3, #2
 8000dba:	d130      	bne.n	8000e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	68da      	ldr	r2, [r3, #12]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df2:	2201      	movs	r2, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	091b      	lsrs	r3, r3, #4
 8000e08:	f003 0201 	and.w	r2, r3, #1
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	693a      	ldr	r2, [r7, #16]
 8000e1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	d017      	beq.n	8000e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	689a      	ldr	r2, [r3, #8]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d123      	bne.n	8000eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	220f      	movs	r2, #15
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	43db      	mvns	r3, r3
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	4013      	ands	r3, r2
 8000e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	691a      	ldr	r2, [r3, #16]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	08da      	lsrs	r2, r3, #3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	6939      	ldr	r1, [r7, #16]
 8000eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	2203      	movs	r2, #3
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f003 0203 	and.w	r2, r3, #3
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f000 80a0 	beq.w	8001030 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ef0:	4b58      	ldr	r3, [pc, #352]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	4a57      	ldr	r2, [pc, #348]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6193      	str	r3, [r2, #24]
 8000efc:	4b55      	ldr	r3, [pc, #340]	; (8001054 <HAL_GPIO_Init+0x2d8>)
 8000efe:	699b      	ldr	r3, [r3, #24]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f08:	4a53      	ldr	r2, [pc, #332]	; (8001058 <HAL_GPIO_Init+0x2dc>)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	089b      	lsrs	r3, r3, #2
 8000f0e:	3302      	adds	r3, #2
 8000f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	f003 0303 	and.w	r3, r3, #3
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	220f      	movs	r2, #15
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43db      	mvns	r3, r3
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f32:	d019      	beq.n	8000f68 <HAL_GPIO_Init+0x1ec>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a49      	ldr	r2, [pc, #292]	; (800105c <HAL_GPIO_Init+0x2e0>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d013      	beq.n	8000f64 <HAL_GPIO_Init+0x1e8>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4a48      	ldr	r2, [pc, #288]	; (8001060 <HAL_GPIO_Init+0x2e4>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d00d      	beq.n	8000f60 <HAL_GPIO_Init+0x1e4>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a47      	ldr	r2, [pc, #284]	; (8001064 <HAL_GPIO_Init+0x2e8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d007      	beq.n	8000f5c <HAL_GPIO_Init+0x1e0>
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	4a46      	ldr	r2, [pc, #280]	; (8001068 <HAL_GPIO_Init+0x2ec>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d101      	bne.n	8000f58 <HAL_GPIO_Init+0x1dc>
 8000f54:	2304      	movs	r3, #4
 8000f56:	e008      	b.n	8000f6a <HAL_GPIO_Init+0x1ee>
 8000f58:	2305      	movs	r3, #5
 8000f5a:	e006      	b.n	8000f6a <HAL_GPIO_Init+0x1ee>
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e004      	b.n	8000f6a <HAL_GPIO_Init+0x1ee>
 8000f60:	2302      	movs	r3, #2
 8000f62:	e002      	b.n	8000f6a <HAL_GPIO_Init+0x1ee>
 8000f64:	2301      	movs	r3, #1
 8000f66:	e000      	b.n	8000f6a <HAL_GPIO_Init+0x1ee>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	f002 0203 	and.w	r2, r2, #3
 8000f70:	0092      	lsls	r2, r2, #2
 8000f72:	4093      	lsls	r3, r2
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f7a:	4937      	ldr	r1, [pc, #220]	; (8001058 <HAL_GPIO_Init+0x2dc>)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f88:	4b38      	ldr	r3, [pc, #224]	; (800106c <HAL_GPIO_Init+0x2f0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fac:	4a2f      	ldr	r2, [pc, #188]	; (800106c <HAL_GPIO_Init+0x2f0>)
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000fb2:	4b2e      	ldr	r3, [pc, #184]	; (800106c <HAL_GPIO_Init+0x2f0>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d003      	beq.n	8000fd6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd6:	4a25      	ldr	r2, [pc, #148]	; (800106c <HAL_GPIO_Init+0x2f0>)
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <HAL_GPIO_Init+0x2f0>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001000:	4a1a      	ldr	r2, [pc, #104]	; (800106c <HAL_GPIO_Init+0x2f0>)
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001006:	4b19      	ldr	r3, [pc, #100]	; (800106c <HAL_GPIO_Init+0x2f0>)
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	43db      	mvns	r3, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4013      	ands	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001022:	693a      	ldr	r2, [r7, #16]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4313      	orrs	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <HAL_GPIO_Init+0x2f0>)
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	3301      	adds	r3, #1
 8001034:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	fa22 f303 	lsr.w	r3, r2, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	f47f aea3 	bne.w	8000d8c <HAL_GPIO_Init+0x10>
  }
}
 8001046:	bf00      	nop
 8001048:	bf00      	nop
 800104a:	371c      	adds	r7, #28
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40021000 	.word	0x40021000
 8001058:	40010000 	.word	0x40010000
 800105c:	48000400 	.word	0x48000400
 8001060:	48000800 	.word	0x48000800
 8001064:	48000c00 	.word	0x48000c00
 8001068:	48001000 	.word	0x48001000
 800106c:	40010400 	.word	0x40010400

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800108c:	e002      	b.n	8001094 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	bc80      	pop	{r7}
 800109c:	4770      	bx	lr
	...

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	1d3b      	adds	r3, r7, #4
 80010aa:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010ac:	1d3b      	adds	r3, r7, #4
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	f000 bef4 	b.w	8001ea2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0301 	and.w	r3, r3, #1
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 816a 	beq.w	800139e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010ca:	4bb3      	ldr	r3, [pc, #716]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 030c 	and.w	r3, r3, #12
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	d00c      	beq.n	80010f0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010d6:	4bb0      	ldr	r3, [pc, #704]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 030c 	and.w	r3, r3, #12
 80010de:	2b08      	cmp	r3, #8
 80010e0:	d159      	bne.n	8001196 <HAL_RCC_OscConfig+0xf6>
 80010e2:	4bad      	ldr	r3, [pc, #692]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ee:	d152      	bne.n	8001196 <HAL_RCC_OscConfig+0xf6>
 80010f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010f4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001104:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	b2db      	uxtb	r3, r3
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b01      	cmp	r3, #1
 800111a:	d102      	bne.n	8001122 <HAL_RCC_OscConfig+0x82>
 800111c:	4b9e      	ldr	r3, [pc, #632]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	e015      	b.n	800114e <HAL_RCC_OscConfig+0xae>
 8001122:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001126:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001136:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800113a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800113e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001142:	fa93 f3a3 	rbit	r3, r3
 8001146:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800114a:	4b93      	ldr	r3, [pc, #588]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001152:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001156:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800115a:	fa92 f2a2 	rbit	r2, r2
 800115e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001162:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001166:	fab2 f282 	clz	r2, r2
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	f042 0220 	orr.w	r2, r2, #32
 8001170:	b2d2      	uxtb	r2, r2
 8001172:	f002 021f 	and.w	r2, r2, #31
 8001176:	2101      	movs	r1, #1
 8001178:	fa01 f202 	lsl.w	r2, r1, r2
 800117c:	4013      	ands	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 810c 	beq.w	800139c <HAL_RCC_OscConfig+0x2fc>
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	f040 8106 	bne.w	800139c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	f000 be86 	b.w	8001ea2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011a0:	d106      	bne.n	80011b0 <HAL_RCC_OscConfig+0x110>
 80011a2:	4b7d      	ldr	r3, [pc, #500]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4a7c      	ldr	r2, [pc, #496]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80011a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e030      	b.n	8001212 <HAL_RCC_OscConfig+0x172>
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x134>
 80011ba:	4b77      	ldr	r3, [pc, #476]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a76      	ldr	r2, [pc, #472]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80011c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	4b74      	ldr	r3, [pc, #464]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a73      	ldr	r2, [pc, #460]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80011cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011d0:	6013      	str	r3, [r2, #0]
 80011d2:	e01e      	b.n	8001212 <HAL_RCC_OscConfig+0x172>
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011de:	d10c      	bne.n	80011fa <HAL_RCC_OscConfig+0x15a>
 80011e0:	4b6d      	ldr	r3, [pc, #436]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a6c      	ldr	r2, [pc, #432]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80011e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ea:	6013      	str	r3, [r2, #0]
 80011ec:	4b6a      	ldr	r3, [pc, #424]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a69      	ldr	r2, [pc, #420]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80011f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011f6:	6013      	str	r3, [r2, #0]
 80011f8:	e00b      	b.n	8001212 <HAL_RCC_OscConfig+0x172>
 80011fa:	4b67      	ldr	r3, [pc, #412]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a66      	ldr	r2, [pc, #408]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 8001200:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001204:	6013      	str	r3, [r2, #0]
 8001206:	4b64      	ldr	r3, [pc, #400]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a63      	ldr	r2, [pc, #396]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 800120c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001210:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001212:	4b61      	ldr	r3, [pc, #388]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 8001214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001216:	f023 020f 	bic.w	r2, r3, #15
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	495d      	ldr	r1, [pc, #372]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 8001222:	4313      	orrs	r3, r2
 8001224:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d059      	beq.n	80012e4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fba8 	bl	8000984 <HAL_GetTick>
 8001234:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001238:	e00a      	b.n	8001250 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123a:	f7ff fba3 	bl	8000984 <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	2b64      	cmp	r3, #100	; 0x64
 8001248:	d902      	bls.n	8001250 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800124a:	2303      	movs	r3, #3
 800124c:	f000 be29 	b.w	8001ea2 <HAL_RCC_OscConfig+0xe02>
 8001250:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001254:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001258:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800125c:	fa93 f3a3 	rbit	r3, r3
 8001260:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001264:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001268:	fab3 f383 	clz	r3, r3
 800126c:	b2db      	uxtb	r3, r3
 800126e:	095b      	lsrs	r3, r3, #5
 8001270:	b2db      	uxtb	r3, r3
 8001272:	f043 0301 	orr.w	r3, r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d102      	bne.n	8001282 <HAL_RCC_OscConfig+0x1e2>
 800127c:	4b46      	ldr	r3, [pc, #280]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	e015      	b.n	80012ae <HAL_RCC_OscConfig+0x20e>
 8001282:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001286:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001296:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800129a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800129e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80012a2:	fa93 f3a3 	rbit	r3, r3
 80012a6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80012aa:	4b3b      	ldr	r3, [pc, #236]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 80012ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012b2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80012b6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80012ba:	fa92 f2a2 	rbit	r2, r2
 80012be:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80012c2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80012c6:	fab2 f282 	clz	r2, r2
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	f042 0220 	orr.w	r2, r2, #32
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	f002 021f 	and.w	r2, r2, #31
 80012d6:	2101      	movs	r1, #1
 80012d8:	fa01 f202 	lsl.w	r2, r1, r2
 80012dc:	4013      	ands	r3, r2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d0ab      	beq.n	800123a <HAL_RCC_OscConfig+0x19a>
 80012e2:	e05c      	b.n	800139e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e4:	f7ff fb4e 	bl	8000984 <HAL_GetTick>
 80012e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ec:	e00a      	b.n	8001304 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012ee:	f7ff fb49 	bl	8000984 <HAL_GetTick>
 80012f2:	4602      	mov	r2, r0
 80012f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b64      	cmp	r3, #100	; 0x64
 80012fc:	d902      	bls.n	8001304 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	f000 bdcf 	b.w	8001ea2 <HAL_RCC_OscConfig+0xe02>
 8001304:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001308:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800130c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001310:	fa93 f3a3 	rbit	r3, r3
 8001314:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001318:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	b2db      	uxtb	r3, r3
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b01      	cmp	r3, #1
 800132e:	d102      	bne.n	8001336 <HAL_RCC_OscConfig+0x296>
 8001330:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	e015      	b.n	8001362 <HAL_RCC_OscConfig+0x2c2>
 8001336:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800133a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800134a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001352:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001356:	fa93 f3a3 	rbit	r3, r3
 800135a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800135e:	4b0e      	ldr	r3, [pc, #56]	; (8001398 <HAL_RCC_OscConfig+0x2f8>)
 8001360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001362:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001366:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800136a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800136e:	fa92 f2a2 	rbit	r2, r2
 8001372:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001376:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800137a:	fab2 f282 	clz	r2, r2
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	f042 0220 	orr.w	r2, r2, #32
 8001384:	b2d2      	uxtb	r2, r2
 8001386:	f002 021f 	and.w	r2, r2, #31
 800138a:	2101      	movs	r1, #1
 800138c:	fa01 f202 	lsl.w	r2, r1, r2
 8001390:	4013      	ands	r3, r2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1ab      	bne.n	80012ee <HAL_RCC_OscConfig+0x24e>
 8001396:	e002      	b.n	800139e <HAL_RCC_OscConfig+0x2fe>
 8001398:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 816f 	beq.w	800168c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013ae:	4bd0      	ldr	r3, [pc, #832]	; (80016f0 <HAL_RCC_OscConfig+0x650>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013ba:	4bcd      	ldr	r3, [pc, #820]	; (80016f0 <HAL_RCC_OscConfig+0x650>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d16c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x400>
 80013c6:	4bca      	ldr	r3, [pc, #808]	; (80016f0 <HAL_RCC_OscConfig+0x650>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d166      	bne.n	80014a0 <HAL_RCC_OscConfig+0x400>
 80013d2:	2302      	movs	r3, #2
 80013d4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80013dc:	fa93 f3a3 	rbit	r3, r3
 80013e0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80013e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013e8:	fab3 f383 	clz	r3, r3
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	095b      	lsrs	r3, r3, #5
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	f043 0301 	orr.w	r3, r3, #1
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d102      	bne.n	8001402 <HAL_RCC_OscConfig+0x362>
 80013fc:	4bbc      	ldr	r3, [pc, #752]	; (80016f0 <HAL_RCC_OscConfig+0x650>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	e013      	b.n	800142a <HAL_RCC_OscConfig+0x38a>
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800140c:	fa93 f3a3 	rbit	r3, r3
 8001410:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001414:	2302      	movs	r3, #2
 8001416:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800141a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800141e:	fa93 f3a3 	rbit	r3, r3
 8001422:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001426:	4bb2      	ldr	r3, [pc, #712]	; (80016f0 <HAL_RCC_OscConfig+0x650>)
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	2202      	movs	r2, #2
 800142c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001430:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001434:	fa92 f2a2 	rbit	r2, r2
 8001438:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800143c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001440:	fab2 f282 	clz	r2, r2
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	f042 0220 	orr.w	r2, r2, #32
 800144a:	b2d2      	uxtb	r2, r2
 800144c:	f002 021f 	and.w	r2, r2, #31
 8001450:	2101      	movs	r1, #1
 8001452:	fa01 f202 	lsl.w	r2, r1, r2
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d007      	beq.n	800146c <HAL_RCC_OscConfig+0x3cc>
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d002      	beq.n	800146c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	f000 bd1b 	b.w	8001ea2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146c:	4ba0      	ldr	r3, [pc, #640]	; (80016f0 <HAL_RCC_OscConfig+0x650>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	21f8      	movs	r1, #248	; 0xf8
 800147c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001484:	fa91 f1a1 	rbit	r1, r1
 8001488:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800148c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001490:	fab1 f181 	clz	r1, r1
 8001494:	b2c9      	uxtb	r1, r1
 8001496:	408b      	lsls	r3, r1
 8001498:	4995      	ldr	r1, [pc, #596]	; (80016f0 <HAL_RCC_OscConfig+0x650>)
 800149a:	4313      	orrs	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800149e:	e0f5      	b.n	800168c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	691b      	ldr	r3, [r3, #16]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f000 8085 	beq.w	80015b6 <HAL_RCC_OscConfig+0x516>
 80014ac:	2301      	movs	r3, #1
 80014ae:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80014b6:	fa93 f3a3 	rbit	r3, r3
 80014ba:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80014be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c2:	fab3 f383 	clz	r3, r3
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	461a      	mov	r2, r3
 80014d4:	2301      	movs	r3, #1
 80014d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fa54 	bl	8000984 <HAL_GetTick>
 80014dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e0:	e00a      	b.n	80014f8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014e2:	f7ff fa4f 	bl	8000984 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d902      	bls.n	80014f8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	f000 bcd5 	b.w	8001ea2 <HAL_RCC_OscConfig+0xe02>
 80014f8:	2302      	movs	r3, #2
 80014fa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014fe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001502:	fa93 f3a3 	rbit	r3, r3
 8001506:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800150a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800150e:	fab3 f383 	clz	r3, r3
 8001512:	b2db      	uxtb	r3, r3
 8001514:	095b      	lsrs	r3, r3, #5
 8001516:	b2db      	uxtb	r3, r3
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b01      	cmp	r3, #1
 8001520:	d102      	bne.n	8001528 <HAL_RCC_OscConfig+0x488>
 8001522:	4b73      	ldr	r3, [pc, #460]	; (80016f0 <HAL_RCC_OscConfig+0x650>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	e013      	b.n	8001550 <HAL_RCC_OscConfig+0x4b0>
 8001528:	2302      	movs	r3, #2
 800152a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001532:	fa93 f3a3 	rbit	r3, r3
 8001536:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800153a:	2302      	movs	r3, #2
 800153c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001540:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001544:	fa93 f3a3 	rbit	r3, r3
 8001548:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800154c:	4b68      	ldr	r3, [pc, #416]	; (80016f0 <HAL_RCC_OscConfig+0x650>)
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	2202      	movs	r2, #2
 8001552:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001556:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800155a:	fa92 f2a2 	rbit	r2, r2
 800155e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001562:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001566:	fab2 f282 	clz	r2, r2
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	f042 0220 	orr.w	r2, r2, #32
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	f002 021f 	and.w	r2, r2, #31
 8001576:	2101      	movs	r1, #1
 8001578:	fa01 f202 	lsl.w	r2, r1, r2
 800157c:	4013      	ands	r3, r2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0af      	beq.n	80014e2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	4b5b      	ldr	r3, [pc, #364]	; (80016f0 <HAL_RCC_OscConfig+0x650>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	695b      	ldr	r3, [r3, #20]
 8001590:	21f8      	movs	r1, #248	; 0xf8
 8001592:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001596:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800159a:	fa91 f1a1 	rbit	r1, r1
 800159e:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80015a2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80015a6:	fab1 f181 	clz	r1, r1
 80015aa:	b2c9      	uxtb	r1, r1
 80015ac:	408b      	lsls	r3, r1
 80015ae:	4950      	ldr	r1, [pc, #320]	; (80016f0 <HAL_RCC_OscConfig+0x650>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
 80015b4:	e06a      	b.n	800168c <HAL_RCC_OscConfig+0x5ec>
 80015b6:	2301      	movs	r3, #1
 80015b8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80015c0:	fa93 f3a3 	rbit	r3, r3
 80015c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80015c8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	461a      	mov	r2, r3
 80015de:	2300      	movs	r3, #0
 80015e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff f9cf 	bl	8000984 <HAL_GetTick>
 80015e6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015ec:	f7ff f9ca 	bl	8000984 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d902      	bls.n	8001602 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	f000 bc50 	b.w	8001ea2 <HAL_RCC_OscConfig+0xe02>
 8001602:	2302      	movs	r3, #2
 8001604:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001608:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800160c:	fa93 f3a3 	rbit	r3, r3
 8001610:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8001614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001618:	fab3 f383 	clz	r3, r3
 800161c:	b2db      	uxtb	r3, r3
 800161e:	095b      	lsrs	r3, r3, #5
 8001620:	b2db      	uxtb	r3, r3
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b01      	cmp	r3, #1
 800162a:	d102      	bne.n	8001632 <HAL_RCC_OscConfig+0x592>
 800162c:	4b30      	ldr	r3, [pc, #192]	; (80016f0 <HAL_RCC_OscConfig+0x650>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	e013      	b.n	800165a <HAL_RCC_OscConfig+0x5ba>
 8001632:	2302      	movs	r3, #2
 8001634:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001638:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800163c:	fa93 f3a3 	rbit	r3, r3
 8001640:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001644:	2302      	movs	r3, #2
 8001646:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800164a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800164e:	fa93 f3a3 	rbit	r3, r3
 8001652:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001656:	4b26      	ldr	r3, [pc, #152]	; (80016f0 <HAL_RCC_OscConfig+0x650>)
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	2202      	movs	r2, #2
 800165c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8001660:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001664:	fa92 f2a2 	rbit	r2, r2
 8001668:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800166c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8001670:	fab2 f282 	clz	r2, r2
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	f042 0220 	orr.w	r2, r2, #32
 800167a:	b2d2      	uxtb	r2, r2
 800167c:	f002 021f 	and.w	r2, r2, #31
 8001680:	2101      	movs	r1, #1
 8001682:	fa01 f202 	lsl.w	r2, r1, r2
 8001686:	4013      	ands	r3, r2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1af      	bne.n	80015ec <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0308 	and.w	r3, r3, #8
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80da 	beq.w	8001850 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d069      	beq.n	800177a <HAL_RCC_OscConfig+0x6da>
 80016a6:	2301      	movs	r3, #1
 80016a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80016b0:	fa93 f3a3 	rbit	r3, r3
 80016b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80016b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <HAL_RCC_OscConfig+0x654>)
 80016c6:	4413      	add	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	461a      	mov	r2, r3
 80016cc:	2301      	movs	r3, #1
 80016ce:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016d0:	f7ff f958 	bl	8000984 <HAL_GetTick>
 80016d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d8:	e00e      	b.n	80016f8 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016da:	f7ff f953 	bl	8000984 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d906      	bls.n	80016f8 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e3d9      	b.n	8001ea2 <HAL_RCC_OscConfig+0xe02>
 80016ee:	bf00      	nop
 80016f0:	40021000 	.word	0x40021000
 80016f4:	10908120 	.word	0x10908120
 80016f8:	2302      	movs	r3, #2
 80016fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001702:	fa93 f3a3 	rbit	r3, r3
 8001706:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800170a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800170e:	2202      	movs	r2, #2
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	fa93 f2a3 	rbit	r2, r3
 800171c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001726:	2202      	movs	r2, #2
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	fa93 f2a3 	rbit	r2, r3
 8001734:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001738:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800173a:	4ba5      	ldr	r3, [pc, #660]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 800173c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800173e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001742:	2102      	movs	r1, #2
 8001744:	6019      	str	r1, [r3, #0]
 8001746:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	fa93 f1a3 	rbit	r1, r3
 8001750:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001754:	6019      	str	r1, [r3, #0]
  return result;
 8001756:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	fab3 f383 	clz	r3, r3
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001766:	b2db      	uxtb	r3, r3
 8001768:	f003 031f 	and.w	r3, r3, #31
 800176c:	2101      	movs	r1, #1
 800176e:	fa01 f303 	lsl.w	r3, r1, r3
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d0b0      	beq.n	80016da <HAL_RCC_OscConfig+0x63a>
 8001778:	e06a      	b.n	8001850 <HAL_RCC_OscConfig+0x7b0>
 800177a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800177e:	2201      	movs	r2, #1
 8001780:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	fa93 f2a3 	rbit	r2, r3
 800178c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001790:	601a      	str	r2, [r3, #0]
  return result;
 8001792:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001796:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	461a      	mov	r2, r3
 80017a0:	4b8c      	ldr	r3, [pc, #560]	; (80019d4 <HAL_RCC_OscConfig+0x934>)
 80017a2:	4413      	add	r3, r2
 80017a4:	009b      	lsls	r3, r3, #2
 80017a6:	461a      	mov	r2, r3
 80017a8:	2300      	movs	r3, #0
 80017aa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ac:	f7ff f8ea 	bl	8000984 <HAL_GetTick>
 80017b0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b4:	e009      	b.n	80017ca <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b6:	f7ff f8e5 	bl	8000984 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e36b      	b.n	8001ea2 <HAL_RCC_OscConfig+0xe02>
 80017ca:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017ce:	2202      	movs	r2, #2
 80017d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	fa93 f2a3 	rbit	r2, r3
 80017dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017e6:	2202      	movs	r2, #2
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	fa93 f2a3 	rbit	r2, r3
 80017f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80017fe:	2202      	movs	r2, #2
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	fa93 f2a3 	rbit	r2, r3
 800180c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001810:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001812:	4b6f      	ldr	r3, [pc, #444]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 8001814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001816:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800181a:	2102      	movs	r1, #2
 800181c:	6019      	str	r1, [r3, #0]
 800181e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	fa93 f1a3 	rbit	r1, r3
 8001828:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800182c:	6019      	str	r1, [r3, #0]
  return result;
 800182e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	fab3 f383 	clz	r3, r3
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800183e:	b2db      	uxtb	r3, r3
 8001840:	f003 031f 	and.w	r3, r3, #31
 8001844:	2101      	movs	r1, #1
 8001846:	fa01 f303 	lsl.w	r3, r1, r3
 800184a:	4013      	ands	r3, r2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d1b2      	bne.n	80017b6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8158 	beq.w	8001b10 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001866:	4b5a      	ldr	r3, [pc, #360]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d112      	bne.n	8001898 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001872:	4b57      	ldr	r3, [pc, #348]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	4a56      	ldr	r2, [pc, #344]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 8001878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187c:	61d3      	str	r3, [r2, #28]
 800187e:	4b54      	ldr	r3, [pc, #336]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 8001880:	69db      	ldr	r3, [r3, #28]
 8001882:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001892:	2301      	movs	r3, #1
 8001894:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	4b4f      	ldr	r3, [pc, #316]	; (80019d8 <HAL_RCC_OscConfig+0x938>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d11a      	bne.n	80018da <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018a4:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <HAL_RCC_OscConfig+0x938>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a4b      	ldr	r2, [pc, #300]	; (80019d8 <HAL_RCC_OscConfig+0x938>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ae:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018b0:	f7ff f868 	bl	8000984 <HAL_GetTick>
 80018b4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b8:	e009      	b.n	80018ce <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ba:	f7ff f863 	bl	8000984 <HAL_GetTick>
 80018be:	4602      	mov	r2, r0
 80018c0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	; 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e2e9      	b.n	8001ea2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ce:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <HAL_RCC_OscConfig+0x938>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0ef      	beq.n	80018ba <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x852>
 80018e4:	4b3a      	ldr	r3, [pc, #232]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 80018e6:	6a1b      	ldr	r3, [r3, #32]
 80018e8:	4a39      	ldr	r2, [pc, #228]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6213      	str	r3, [r2, #32]
 80018f0:	e02f      	b.n	8001952 <HAL_RCC_OscConfig+0x8b2>
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10c      	bne.n	8001916 <HAL_RCC_OscConfig+0x876>
 80018fc:	4b34      	ldr	r3, [pc, #208]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	4a33      	ldr	r2, [pc, #204]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6213      	str	r3, [r2, #32]
 8001908:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 800190a:	6a1b      	ldr	r3, [r3, #32]
 800190c:	4a30      	ldr	r2, [pc, #192]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 800190e:	f023 0304 	bic.w	r3, r3, #4
 8001912:	6213      	str	r3, [r2, #32]
 8001914:	e01d      	b.n	8001952 <HAL_RCC_OscConfig+0x8b2>
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	2b05      	cmp	r3, #5
 800191e:	d10c      	bne.n	800193a <HAL_RCC_OscConfig+0x89a>
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	4a2a      	ldr	r2, [pc, #168]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6213      	str	r3, [r2, #32]
 800192c:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4a27      	ldr	r2, [pc, #156]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6213      	str	r3, [r2, #32]
 8001938:	e00b      	b.n	8001952 <HAL_RCC_OscConfig+0x8b2>
 800193a:	4b25      	ldr	r3, [pc, #148]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	4a24      	ldr	r2, [pc, #144]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6213      	str	r3, [r2, #32]
 8001946:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4a21      	ldr	r2, [pc, #132]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 800194c:	f023 0304 	bic.w	r3, r3, #4
 8001950:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d06b      	beq.n	8001a34 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800195c:	f7ff f812 	bl	8000984 <HAL_GetTick>
 8001960:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001964:	e00b      	b.n	800197e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff f80d 	bl	8000984 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	f241 3288 	movw	r2, #5000	; 0x1388
 8001976:	4293      	cmp	r3, r2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e291      	b.n	8001ea2 <HAL_RCC_OscConfig+0xe02>
 800197e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001982:	2202      	movs	r2, #2
 8001984:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	fa93 f2a3 	rbit	r2, r3
 8001990:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800199a:	2202      	movs	r2, #2
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	fa93 f2a3 	rbit	r2, r3
 80019a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019ac:	601a      	str	r2, [r3, #0]
  return result;
 80019ae:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80019b2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	f043 0302 	orr.w	r3, r3, #2
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d109      	bne.n	80019dc <HAL_RCC_OscConfig+0x93c>
 80019c8:	4b01      	ldr	r3, [pc, #4]	; (80019d0 <HAL_RCC_OscConfig+0x930>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	e014      	b.n	80019f8 <HAL_RCC_OscConfig+0x958>
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	10908120 	.word	0x10908120
 80019d8:	40007000 	.word	0x40007000
 80019dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019e0:	2202      	movs	r2, #2
 80019e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	fa93 f2a3 	rbit	r2, r3
 80019ee:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	4bbb      	ldr	r3, [pc, #748]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80019fc:	2102      	movs	r1, #2
 80019fe:	6011      	str	r1, [r2, #0]
 8001a00:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001a04:	6812      	ldr	r2, [r2, #0]
 8001a06:	fa92 f1a2 	rbit	r1, r2
 8001a0a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a0e:	6011      	str	r1, [r2, #0]
  return result;
 8001a10:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	fab2 f282 	clz	r2, r2
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	f002 021f 	and.w	r2, r2, #31
 8001a26:	2101      	movs	r1, #1
 8001a28:	fa01 f202 	lsl.w	r2, r1, r2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d099      	beq.n	8001966 <HAL_RCC_OscConfig+0x8c6>
 8001a32:	e063      	b.n	8001afc <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a34:	f7fe ffa6 	bl	8000984 <HAL_GetTick>
 8001a38:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a3c:	e00b      	b.n	8001a56 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a3e:	f7fe ffa1 	bl	8000984 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e225      	b.n	8001ea2 <HAL_RCC_OscConfig+0xe02>
 8001a56:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a5e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	fa93 f2a3 	rbit	r2, r3
 8001a68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a72:	2202      	movs	r2, #2
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	fa93 f2a3 	rbit	r2, r3
 8001a80:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a84:	601a      	str	r2, [r3, #0]
  return result;
 8001a86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a8a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	f043 0302 	orr.w	r3, r3, #2
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d102      	bne.n	8001aa6 <HAL_RCC_OscConfig+0xa06>
 8001aa0:	4b90      	ldr	r3, [pc, #576]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001aa2:	6a1b      	ldr	r3, [r3, #32]
 8001aa4:	e00d      	b.n	8001ac2 <HAL_RCC_OscConfig+0xa22>
 8001aa6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001aaa:	2202      	movs	r2, #2
 8001aac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	fa93 f2a3 	rbit	r2, r3
 8001ab8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001abc:	601a      	str	r2, [r3, #0]
 8001abe:	4b89      	ldr	r3, [pc, #548]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ac6:	2102      	movs	r1, #2
 8001ac8:	6011      	str	r1, [r2, #0]
 8001aca:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	fa92 f1a2 	rbit	r1, r2
 8001ad4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ad8:	6011      	str	r1, [r2, #0]
  return result;
 8001ada:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	fab2 f282 	clz	r2, r2
 8001ae4:	b2d2      	uxtb	r2, r2
 8001ae6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	f002 021f 	and.w	r2, r2, #31
 8001af0:	2101      	movs	r1, #1
 8001af2:	fa01 f202 	lsl.w	r2, r1, r2
 8001af6:	4013      	ands	r3, r2
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1a0      	bne.n	8001a3e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001afc:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b04:	4b77      	ldr	r3, [pc, #476]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	4a76      	ldr	r2, [pc, #472]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 81c2 	beq.w	8001ea0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b1c:	4b71      	ldr	r3, [pc, #452]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b08      	cmp	r3, #8
 8001b26:	f000 819c 	beq.w	8001e62 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	f040 8114 	bne.w	8001d5e <HAL_RCC_OscConfig+0xcbe>
 8001b36:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b3a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b40:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fa93 f2a3 	rbit	r2, r3
 8001b4a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b4e:	601a      	str	r2, [r3, #0]
  return result;
 8001b50:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001b54:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	fab3 f383 	clz	r3, r3
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	461a      	mov	r2, r3
 8001b68:	2300      	movs	r3, #0
 8001b6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7fe ff0a 	bl	8000984 <HAL_GetTick>
 8001b70:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b74:	e009      	b.n	8001b8a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b76:	f7fe ff05 	bl	8000984 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d901      	bls.n	8001b8a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e18b      	b.n	8001ea2 <HAL_RCC_OscConfig+0xe02>
 8001b8a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b94:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	fa93 f2a3 	rbit	r2, r3
 8001b9e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ba2:	601a      	str	r2, [r3, #0]
  return result;
 8001ba4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ba8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001baa:	fab3 f383 	clz	r3, r3
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	095b      	lsrs	r3, r3, #5
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d102      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xb24>
 8001bbe:	4b49      	ldr	r3, [pc, #292]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	e01b      	b.n	8001bfc <HAL_RCC_OscConfig+0xb5c>
 8001bc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f2a3 	rbit	r2, r3
 8001bd8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001be2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	fa93 f2a3 	rbit	r2, r3
 8001bf2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c00:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c04:	6011      	str	r1, [r2, #0]
 8001c06:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001c0a:	6812      	ldr	r2, [r2, #0]
 8001c0c:	fa92 f1a2 	rbit	r1, r2
 8001c10:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c14:	6011      	str	r1, [r2, #0]
  return result;
 8001c16:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	fab2 f282 	clz	r2, r2
 8001c20:	b2d2      	uxtb	r2, r2
 8001c22:	f042 0220 	orr.w	r2, r2, #32
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	f002 021f 	and.w	r2, r2, #31
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d19e      	bne.n	8001b76 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c38:	4b2a      	ldr	r3, [pc, #168]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	430b      	orrs	r3, r1
 8001c4e:	4925      	ldr	r1, [pc, #148]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
 8001c54:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c5e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	fa93 f2a3 	rbit	r2, r3
 8001c68:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c6c:	601a      	str	r2, [r3, #0]
  return result;
 8001c6e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c72:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c74:	fab3 f383 	clz	r3, r3
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	461a      	mov	r2, r3
 8001c86:	2301      	movs	r3, #1
 8001c88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7fe fe7b 	bl	8000984 <HAL_GetTick>
 8001c8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c92:	e009      	b.n	8001ca8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c94:	f7fe fe76 	bl	8000984 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e0fc      	b.n	8001ea2 <HAL_RCC_OscConfig+0xe02>
 8001ca8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cc0:	601a      	str	r2, [r3, #0]
  return result;
 8001cc2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001cc6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	095b      	lsrs	r3, r3, #5
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d105      	bne.n	8001ce8 <HAL_RCC_OscConfig+0xc48>
 8001cdc:	4b01      	ldr	r3, [pc, #4]	; (8001ce4 <HAL_RCC_OscConfig+0xc44>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	e01e      	b.n	8001d20 <HAL_RCC_OscConfig+0xc80>
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cf0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	fa93 f2a3 	rbit	r2, r3
 8001cfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	fa93 f2a3 	rbit	r2, r3
 8001d16:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	4b63      	ldr	r3, [pc, #396]	; (8001eac <HAL_RCC_OscConfig+0xe0c>)
 8001d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d20:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d24:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d28:	6011      	str	r1, [r2, #0]
 8001d2a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	fa92 f1a2 	rbit	r1, r2
 8001d34:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d38:	6011      	str	r1, [r2, #0]
  return result;
 8001d3a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	fab2 f282 	clz	r2, r2
 8001d44:	b2d2      	uxtb	r2, r2
 8001d46:	f042 0220 	orr.w	r2, r2, #32
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f002 021f 	and.w	r2, r2, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d09b      	beq.n	8001c94 <HAL_RCC_OscConfig+0xbf4>
 8001d5c:	e0a0      	b.n	8001ea0 <HAL_RCC_OscConfig+0xe00>
 8001d5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	fa93 f2a3 	rbit	r2, r3
 8001d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d76:	601a      	str	r2, [r3, #0]
  return result;
 8001d78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d7c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7e:	fab3 f383 	clz	r3, r3
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2300      	movs	r3, #0
 8001d92:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d94:	f7fe fdf6 	bl	8000984 <HAL_GetTick>
 8001d98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9c:	e009      	b.n	8001db2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d9e:	f7fe fdf1 	bl	8000984 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e077      	b.n	8001ea2 <HAL_RCC_OscConfig+0xe02>
 8001db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001db6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	fa93 f2a3 	rbit	r2, r3
 8001dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dca:	601a      	str	r2, [r3, #0]
  return result;
 8001dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dd2:	fab3 f383 	clz	r3, r3
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	095b      	lsrs	r3, r3, #5
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d102      	bne.n	8001dec <HAL_RCC_OscConfig+0xd4c>
 8001de6:	4b31      	ldr	r3, [pc, #196]	; (8001eac <HAL_RCC_OscConfig+0xe0c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	e01b      	b.n	8001e24 <HAL_RCC_OscConfig+0xd84>
 8001dec:	f107 0320 	add.w	r3, r7, #32
 8001df0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001df4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df6:	f107 0320 	add.w	r3, r7, #32
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	fa93 f2a3 	rbit	r2, r3
 8001e00:	f107 031c 	add.w	r3, r7, #28
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	f107 0318 	add.w	r3, r7, #24
 8001e0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	f107 0318 	add.w	r3, r7, #24
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	fa93 f2a3 	rbit	r2, r3
 8001e1a:	f107 0314 	add.w	r3, r7, #20
 8001e1e:	601a      	str	r2, [r3, #0]
 8001e20:	4b22      	ldr	r3, [pc, #136]	; (8001eac <HAL_RCC_OscConfig+0xe0c>)
 8001e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e24:	f107 0210 	add.w	r2, r7, #16
 8001e28:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e2c:	6011      	str	r1, [r2, #0]
 8001e2e:	f107 0210 	add.w	r2, r7, #16
 8001e32:	6812      	ldr	r2, [r2, #0]
 8001e34:	fa92 f1a2 	rbit	r1, r2
 8001e38:	f107 020c 	add.w	r2, r7, #12
 8001e3c:	6011      	str	r1, [r2, #0]
  return result;
 8001e3e:	f107 020c 	add.w	r2, r7, #12
 8001e42:	6812      	ldr	r2, [r2, #0]
 8001e44:	fab2 f282 	clz	r2, r2
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	f042 0220 	orr.w	r2, r2, #32
 8001e4e:	b2d2      	uxtb	r2, r2
 8001e50:	f002 021f 	and.w	r2, r2, #31
 8001e54:	2101      	movs	r1, #1
 8001e56:	fa01 f202 	lsl.w	r2, r1, r2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d19e      	bne.n	8001d9e <HAL_RCC_OscConfig+0xcfe>
 8001e60:	e01e      	b.n	8001ea0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e62:	1d3b      	adds	r3, r7, #4
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	69db      	ldr	r3, [r3, #28]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e018      	b.n	8001ea2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e70:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <HAL_RCC_OscConfig+0xe0c>)
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e78:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	6a1b      	ldr	r3, [r3, #32]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d108      	bne.n	8001e9c <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001e8a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001e8e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b09e      	sub	sp, #120	; 0x78
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e162      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec8:	4b90      	ldr	r3, [pc, #576]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d910      	bls.n	8001ef8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed6:	4b8d      	ldr	r3, [pc, #564]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f023 0207 	bic.w	r2, r3, #7
 8001ede:	498b      	ldr	r1, [pc, #556]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee6:	4b89      	ldr	r3, [pc, #548]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d001      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e14a      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d008      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b82      	ldr	r3, [pc, #520]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	497f      	ldr	r1, [pc, #508]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80dc 	beq.w	80020dc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d13c      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xf6>
 8001f2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f30:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f043 0301 	orr.w	r3, r3, #1
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d102      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xa6>
 8001f50:	4b6f      	ldr	r3, [pc, #444]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	e00f      	b.n	8001f76 <HAL_RCC_ClockConfig+0xc6>
 8001f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f5a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	667b      	str	r3, [r7, #100]	; 0x64
 8001f64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f68:	663b      	str	r3, [r7, #96]	; 0x60
 8001f6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f72:	4b67      	ldr	r3, [pc, #412]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f7a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001f7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001f7e:	fa92 f2a2 	rbit	r2, r2
 8001f82:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f86:	fab2 f282 	clz	r2, r2
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	f042 0220 	orr.w	r2, r2, #32
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	f002 021f 	and.w	r2, r2, #31
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d17b      	bne.n	800209a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0f3      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d13c      	bne.n	8002028 <HAL_RCC_ClockConfig+0x178>
 8001fae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb6:	fa93 f3a3 	rbit	r3, r3
 8001fba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fbe:	fab3 f383 	clz	r3, r3
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	095b      	lsrs	r3, r3, #5
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d102      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x128>
 8001fd2:	4b4f      	ldr	r3, [pc, #316]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	e00f      	b.n	8001ff8 <HAL_RCC_ClockConfig+0x148>
 8001fd8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fdc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fe0:	fa93 f3a3 	rbit	r3, r3
 8001fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8001fe6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001fea:	643b      	str	r3, [r7, #64]	; 0x40
 8001fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fee:	fa93 f3a3 	rbit	r3, r3
 8001ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ff4:	4b46      	ldr	r3, [pc, #280]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ffc:	63ba      	str	r2, [r7, #56]	; 0x38
 8001ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002000:	fa92 f2a2 	rbit	r2, r2
 8002004:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002006:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002008:	fab2 f282 	clz	r2, r2
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	f042 0220 	orr.w	r2, r2, #32
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f002 021f 	and.w	r2, r2, #31
 8002018:	2101      	movs	r1, #1
 800201a:	fa01 f202 	lsl.w	r2, r1, r2
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d13a      	bne.n	800209a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0b2      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
 8002028:	2302      	movs	r3, #2
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800202e:	fa93 f3a3 	rbit	r3, r3
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002036:	fab3 f383 	clz	r3, r3
 800203a:	b2db      	uxtb	r3, r3
 800203c:	095b      	lsrs	r3, r3, #5
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b01      	cmp	r3, #1
 8002048:	d102      	bne.n	8002050 <HAL_RCC_ClockConfig+0x1a0>
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	e00d      	b.n	800206c <HAL_RCC_ClockConfig+0x1bc>
 8002050:	2302      	movs	r3, #2
 8002052:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002056:	fa93 f3a3 	rbit	r3, r3
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
 800205c:	2302      	movs	r3, #2
 800205e:	623b      	str	r3, [r7, #32]
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	61fb      	str	r3, [r7, #28]
 8002068:	4b29      	ldr	r3, [pc, #164]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	2202      	movs	r2, #2
 800206e:	61ba      	str	r2, [r7, #24]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	fa92 f2a2 	rbit	r2, r2
 8002076:	617a      	str	r2, [r7, #20]
  return result;
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	fab2 f282 	clz	r2, r2
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	f042 0220 	orr.w	r2, r2, #32
 8002084:	b2d2      	uxtb	r2, r2
 8002086:	f002 021f 	and.w	r2, r2, #31
 800208a:	2101      	movs	r1, #1
 800208c:	fa01 f202 	lsl.w	r2, r1, r2
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e079      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	491a      	ldr	r1, [pc, #104]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020ac:	f7fe fc6a 	bl	8000984 <HAL_GetTick>
 80020b0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7fe fc66 	bl	8000984 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e061      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b11      	ldr	r3, [pc, #68]	; (8002110 <HAL_RCC_ClockConfig+0x260>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d214      	bcs.n	8002114 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 0207 	bic.w	r2, r3, #7
 80020f2:	4906      	ldr	r1, [pc, #24]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <HAL_RCC_ClockConfig+0x25c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0307 	and.w	r3, r3, #7
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d005      	beq.n	8002114 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e040      	b.n	800218e <HAL_RCC_ClockConfig+0x2de>
 800210c:	40022000 	.word	0x40022000
 8002110:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d008      	beq.n	8002132 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <HAL_RCC_ClockConfig+0x2e8>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	491a      	ldr	r1, [pc, #104]	; (8002198 <HAL_RCC_ClockConfig+0x2e8>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d009      	beq.n	8002152 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <HAL_RCC_ClockConfig+0x2e8>)
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4912      	ldr	r1, [pc, #72]	; (8002198 <HAL_RCC_ClockConfig+0x2e8>)
 800214e:	4313      	orrs	r3, r2
 8002150:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002152:	f000 f829 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002156:	4601      	mov	r1, r0
 8002158:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_RCC_ClockConfig+0x2e8>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002160:	22f0      	movs	r2, #240	; 0xf0
 8002162:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	fa92 f2a2 	rbit	r2, r2
 800216a:	60fa      	str	r2, [r7, #12]
  return result;
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	fab2 f282 	clz	r2, r2
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	40d3      	lsrs	r3, r2
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <HAL_RCC_ClockConfig+0x2ec>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	fa21 f303 	lsr.w	r3, r1, r3
 800217e:	4a08      	ldr	r2, [pc, #32]	; (80021a0 <HAL_RCC_ClockConfig+0x2f0>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_RCC_ClockConfig+0x2f4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fbba 	bl	8000900 <HAL_InitTick>
  
  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3778      	adds	r7, #120	; 0x78
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40021000 	.word	0x40021000
 800219c:	08003ba4 	.word	0x08003ba4
 80021a0:	20000020 	.word	0x20000020
 80021a4:	20000024 	.word	0x20000024

080021a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b08b      	sub	sp, #44	; 0x2c
 80021ac:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80021c2:	4b28      	ldr	r3, [pc, #160]	; (8002264 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	f003 030c 	and.w	r3, r3, #12
 80021ce:	2b04      	cmp	r3, #4
 80021d0:	d002      	beq.n	80021d8 <HAL_RCC_GetSysClockFreq+0x30>
 80021d2:	2b08      	cmp	r3, #8
 80021d4:	d003      	beq.n	80021de <HAL_RCC_GetSysClockFreq+0x36>
 80021d6:	e03c      	b.n	8002252 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021d8:	4b23      	ldr	r3, [pc, #140]	; (8002268 <HAL_RCC_GetSysClockFreq+0xc0>)
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	e03c      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80021e4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80021e8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	fa92 f2a2 	rbit	r2, r2
 80021f0:	607a      	str	r2, [r7, #4]
  return result;
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	fab2 f282 	clz	r2, r2
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	40d3      	lsrs	r3, r2
 80021fc:	4a1b      	ldr	r2, [pc, #108]	; (800226c <HAL_RCC_GetSysClockFreq+0xc4>)
 80021fe:	5cd3      	ldrb	r3, [r2, r3]
 8002200:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	220f      	movs	r2, #15
 800220c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220e:	693a      	ldr	r2, [r7, #16]
 8002210:	fa92 f2a2 	rbit	r2, r2
 8002214:	60fa      	str	r2, [r7, #12]
  return result;
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	fab2 f282 	clz	r2, r2
 800221c:	b2d2      	uxtb	r2, r2
 800221e:	40d3      	lsrs	r3, r2
 8002220:	4a13      	ldr	r2, [pc, #76]	; (8002270 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d008      	beq.n	8002242 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002230:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	fbb2 f2f3 	udiv	r2, r2, r3
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fb02 f303 	mul.w	r3, r2, r3
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
 8002240:	e004      	b.n	800224c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002246:	fb02 f303 	mul.w	r3, r2, r3
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	623b      	str	r3, [r7, #32]
      break;
 8002250:	e002      	b.n	8002258 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002254:	623b      	str	r3, [r7, #32]
      break;
 8002256:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002258:	6a3b      	ldr	r3, [r7, #32]
}
 800225a:	4618      	mov	r0, r3
 800225c:	372c      	adds	r7, #44	; 0x2c
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40021000 	.word	0x40021000
 8002268:	007a1200 	.word	0x007a1200
 800226c:	08003bbc 	.word	0x08003bbc
 8002270:	08003bcc 	.word	0x08003bcc
 8002274:	003d0900 	.word	0x003d0900

08002278 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800227c:	4b02      	ldr	r3, [pc, #8]	; (8002288 <HAL_RCC_GetHCLKFreq+0x10>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	20000020 	.word	0x20000020

0800228c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002292:	f7ff fff1 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 8002296:	4601      	mov	r1, r0
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022a0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	fa92 f2a2 	rbit	r2, r2
 80022ac:	603a      	str	r2, [r7, #0]
  return result;
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	fab2 f282 	clz	r2, r2
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	40d3      	lsrs	r3, r2
 80022b8:	4a04      	ldr	r2, [pc, #16]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x40>)
 80022ba:	5cd3      	ldrb	r3, [r2, r3]
 80022bc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08003bb4 	.word	0x08003bb4

080022d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80022d6:	f7ff ffcf 	bl	8002278 <HAL_RCC_GetHCLKFreq>
 80022da:	4601      	mov	r1, r0
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80022e4:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80022e8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	fa92 f2a2 	rbit	r2, r2
 80022f0:	603a      	str	r2, [r7, #0]
  return result;
 80022f2:	683a      	ldr	r2, [r7, #0]
 80022f4:	fab2 f282 	clz	r2, r2
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	40d3      	lsrs	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	; (8002310 <HAL_RCC_GetPCLK2Freq+0x40>)
 80022fe:	5cd3      	ldrb	r3, [r2, r3]
 8002300:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002304:	4618      	mov	r0, r3
 8002306:	3708      	adds	r7, #8
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40021000 	.word	0x40021000
 8002310:	08003bb4 	.word	0x08003bb4

08002314 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b092      	sub	sp, #72	; 0x48
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800231c:	2300      	movs	r3, #0
 800231e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80d4 	beq.w	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002338:	4b4e      	ldr	r3, [pc, #312]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10e      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002344:	4b4b      	ldr	r3, [pc, #300]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002346:	69db      	ldr	r3, [r3, #28]
 8002348:	4a4a      	ldr	r2, [pc, #296]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800234e:	61d3      	str	r3, [r2, #28]
 8002350:	4b48      	ldr	r3, [pc, #288]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002358:	60bb      	str	r3, [r7, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800235c:	2301      	movs	r3, #1
 800235e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002362:	4b45      	ldr	r3, [pc, #276]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236a:	2b00      	cmp	r3, #0
 800236c:	d118      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800236e:	4b42      	ldr	r3, [pc, #264]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a41      	ldr	r2, [pc, #260]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002378:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237a:	f7fe fb03 	bl	8000984 <HAL_GetTick>
 800237e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002380:	e008      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002382:	f7fe faff 	bl	8000984 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b64      	cmp	r3, #100	; 0x64
 800238e:	d901      	bls.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e169      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002394:	4b38      	ldr	r3, [pc, #224]	; (8002478 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023a0:	4b34      	ldr	r3, [pc, #208]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	f000 8084 	beq.w	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023bc:	429a      	cmp	r2, r3
 80023be:	d07c      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80023c0:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c2:	6a1b      	ldr	r3, [r3, #32]
 80023c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d2:	fa93 f3a3 	rbit	r3, r3
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80023d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80023e4:	4413      	add	r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	461a      	mov	r2, r3
 80023ea:	2301      	movs	r3, #1
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	fa93 f3a3 	rbit	r3, r3
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	461a      	mov	r2, r3
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002408:	4413      	add	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	461a      	mov	r2, r3
 800240e:	2300      	movs	r3, #0
 8002410:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002412:	4a18      	ldr	r2, [pc, #96]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002416:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002418:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d04b      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002422:	f7fe faaf 	bl	8000984 <HAL_GetTick>
 8002426:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800242a:	f7fe faab 	bl	8000984 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f241 3288 	movw	r2, #5000	; 0x1388
 8002438:	4293      	cmp	r3, r2
 800243a:	d901      	bls.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e113      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8002440:	2302      	movs	r3, #2
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002446:	fa93 f3a3 	rbit	r3, r3
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
 800244c:	2302      	movs	r3, #2
 800244e:	623b      	str	r3, [r7, #32]
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	61fb      	str	r3, [r7, #28]
  return result;
 8002458:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800245a:	fab3 f383 	clz	r3, r3
 800245e:	b2db      	uxtb	r3, r3
 8002460:	095b      	lsrs	r3, r3, #5
 8002462:	b2db      	uxtb	r3, r3
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d108      	bne.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800246e:	4b01      	ldr	r3, [pc, #4]	; (8002474 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	e00d      	b.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002474:	40021000 	.word	0x40021000
 8002478:	40007000 	.word	0x40007000
 800247c:	10908100 	.word	0x10908100
 8002480:	2302      	movs	r3, #2
 8002482:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	617b      	str	r3, [r7, #20]
 800248c:	4b78      	ldr	r3, [pc, #480]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	2202      	movs	r2, #2
 8002492:	613a      	str	r2, [r7, #16]
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	fa92 f2a2 	rbit	r2, r2
 800249a:	60fa      	str	r2, [r7, #12]
  return result;
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	fab2 f282 	clz	r2, r2
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80024a8:	b2d2      	uxtb	r2, r2
 80024aa:	f002 021f 	and.w	r2, r2, #31
 80024ae:	2101      	movs	r1, #1
 80024b0:	fa01 f202 	lsl.w	r2, r1, r2
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0b7      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80024ba:	4b6d      	ldr	r3, [pc, #436]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	496a      	ldr	r1, [pc, #424]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024cc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d105      	bne.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024d4:	4b66      	ldr	r3, [pc, #408]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	4a65      	ldr	r2, [pc, #404]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024de:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ec:	4b60      	ldr	r3, [pc, #384]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	f023 0203 	bic.w	r2, r3, #3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	495d      	ldr	r1, [pc, #372]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800250a:	4b59      	ldr	r3, [pc, #356]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	4956      	ldr	r1, [pc, #344]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002518:	4313      	orrs	r3, r2
 800251a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002528:	4b51      	ldr	r3, [pc, #324]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	494e      	ldr	r1, [pc, #312]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002536:	4313      	orrs	r3, r2
 8002538:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0320 	and.w	r3, r3, #32
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002546:	4b4a      	ldr	r3, [pc, #296]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f023 0210 	bic.w	r2, r3, #16
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	4947      	ldr	r1, [pc, #284]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002554:	4313      	orrs	r3, r2
 8002556:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002564:	4b42      	ldr	r3, [pc, #264]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	493f      	ldr	r1, [pc, #252]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002582:	4b3b      	ldr	r3, [pc, #236]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	f023 0220 	bic.w	r2, r3, #32
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a1b      	ldr	r3, [r3, #32]
 800258e:	4938      	ldr	r1, [pc, #224]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002590:	4313      	orrs	r3, r2
 8002592:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0308 	and.w	r3, r3, #8
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025a0:	4b33      	ldr	r3, [pc, #204]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	695b      	ldr	r3, [r3, #20]
 80025ac:	4930      	ldr	r1, [pc, #192]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0310 	and.w	r3, r3, #16
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025be:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	4929      	ldr	r1, [pc, #164]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	4921      	ldr	r1, [pc, #132]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025fa:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80025fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fe:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	491a      	ldr	r1, [pc, #104]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002608:	4313      	orrs	r3, r2
 800260a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002618:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800261c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002624:	4912      	ldr	r1, [pc, #72]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002626:	4313      	orrs	r3, r2
 8002628:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002636:	4b0e      	ldr	r3, [pc, #56]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	490b      	ldr	r1, [pc, #44]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002644:	4313      	orrs	r3, r2
 8002646:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002660:	4903      	ldr	r1, [pc, #12]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002662:	4313      	orrs	r3, r2
 8002664:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3748      	adds	r7, #72	; 0x48
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40021000 	.word	0x40021000

08002674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e040      	b.n	8002708 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800268a:	2b00      	cmp	r3, #0
 800268c:	d106      	bne.n	800269c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe f880 	bl	800079c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2224      	movs	r2, #36	; 0x24
 80026a0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f8c0 	bl	8002838 <UART_SetConfig>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e022      	b.n	8002708 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 fa88 	bl	8002be0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	685a      	ldr	r2, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fb0e 	bl	8002d22 <UART_CheckIdleState>
 8002706:	4603      	mov	r3, r0
}
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}

08002710 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af02      	add	r7, sp, #8
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002724:	2b20      	cmp	r3, #32
 8002726:	f040 8082 	bne.w	800282e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_UART_Transmit+0x26>
 8002730:	88fb      	ldrh	r3, [r7, #6]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e07a      	b.n	8002830 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002740:	2b01      	cmp	r3, #1
 8002742:	d101      	bne.n	8002748 <HAL_UART_Transmit+0x38>
 8002744:	2302      	movs	r3, #2
 8002746:	e073      	b.n	8002830 <HAL_UART_Transmit+0x120>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2221      	movs	r2, #33	; 0x21
 800275c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800275e:	f7fe f911 	bl	8000984 <HAL_GetTick>
 8002762:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	88fa      	ldrh	r2, [r7, #6]
 8002768:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	88fa      	ldrh	r2, [r7, #6]
 8002770:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277c:	d108      	bne.n	8002790 <HAL_UART_Transmit+0x80>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d104      	bne.n	8002790 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	e003      	b.n	8002798 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002794:	2300      	movs	r3, #0
 8002796:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80027a0:	e02d      	b.n	80027fe <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	2180      	movs	r1, #128	; 0x80
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f000 fb01 	bl	8002db4 <UART_WaitOnFlagUntilTimeout>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e039      	b.n	8002830 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10b      	bne.n	80027da <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	881a      	ldrh	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027ce:	b292      	uxth	r2, r2
 80027d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	3302      	adds	r3, #2
 80027d6:	61bb      	str	r3, [r7, #24]
 80027d8:	e008      	b.n	80027ec <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	781a      	ldrb	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	b292      	uxth	r2, r2
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	3301      	adds	r3, #1
 80027ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1cb      	bne.n	80027a2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	9300      	str	r3, [sp, #0]
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	2200      	movs	r2, #0
 8002812:	2140      	movs	r1, #64	; 0x40
 8002814:	68f8      	ldr	r0, [r7, #12]
 8002816:	f000 facd 	bl	8002db4 <UART_WaitOnFlagUntilTimeout>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e005      	b.n	8002830 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2220      	movs	r2, #32
 8002828:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e000      	b.n	8002830 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4313      	orrs	r3, r2
 800285a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002866:	f023 030c 	bic.w	r3, r3, #12
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	6979      	ldr	r1, [r7, #20]
 8002870:	430b      	orrs	r3, r1
 8002872:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4aae      	ldr	r2, [pc, #696]	; (8002b6c <UART_SetConfig+0x334>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d120      	bne.n	80028fa <UART_SetConfig+0xc2>
 80028b8:	4bad      	ldr	r3, [pc, #692]	; (8002b70 <UART_SetConfig+0x338>)
 80028ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d817      	bhi.n	80028f4 <UART_SetConfig+0xbc>
 80028c4:	a201      	add	r2, pc, #4	; (adr r2, 80028cc <UART_SetConfig+0x94>)
 80028c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ca:	bf00      	nop
 80028cc:	080028dd 	.word	0x080028dd
 80028d0:	080028e9 	.word	0x080028e9
 80028d4:	080028ef 	.word	0x080028ef
 80028d8:	080028e3 	.word	0x080028e3
 80028dc:	2301      	movs	r3, #1
 80028de:	77fb      	strb	r3, [r7, #31]
 80028e0:	e0b5      	b.n	8002a4e <UART_SetConfig+0x216>
 80028e2:	2302      	movs	r3, #2
 80028e4:	77fb      	strb	r3, [r7, #31]
 80028e6:	e0b2      	b.n	8002a4e <UART_SetConfig+0x216>
 80028e8:	2304      	movs	r3, #4
 80028ea:	77fb      	strb	r3, [r7, #31]
 80028ec:	e0af      	b.n	8002a4e <UART_SetConfig+0x216>
 80028ee:	2308      	movs	r3, #8
 80028f0:	77fb      	strb	r3, [r7, #31]
 80028f2:	e0ac      	b.n	8002a4e <UART_SetConfig+0x216>
 80028f4:	2310      	movs	r3, #16
 80028f6:	77fb      	strb	r3, [r7, #31]
 80028f8:	e0a9      	b.n	8002a4e <UART_SetConfig+0x216>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a9d      	ldr	r2, [pc, #628]	; (8002b74 <UART_SetConfig+0x33c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d124      	bne.n	800294e <UART_SetConfig+0x116>
 8002904:	4b9a      	ldr	r3, [pc, #616]	; (8002b70 <UART_SetConfig+0x338>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800290c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002910:	d011      	beq.n	8002936 <UART_SetConfig+0xfe>
 8002912:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002916:	d817      	bhi.n	8002948 <UART_SetConfig+0x110>
 8002918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800291c:	d011      	beq.n	8002942 <UART_SetConfig+0x10a>
 800291e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002922:	d811      	bhi.n	8002948 <UART_SetConfig+0x110>
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <UART_SetConfig+0xf8>
 8002928:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800292c:	d006      	beq.n	800293c <UART_SetConfig+0x104>
 800292e:	e00b      	b.n	8002948 <UART_SetConfig+0x110>
 8002930:	2300      	movs	r3, #0
 8002932:	77fb      	strb	r3, [r7, #31]
 8002934:	e08b      	b.n	8002a4e <UART_SetConfig+0x216>
 8002936:	2302      	movs	r3, #2
 8002938:	77fb      	strb	r3, [r7, #31]
 800293a:	e088      	b.n	8002a4e <UART_SetConfig+0x216>
 800293c:	2304      	movs	r3, #4
 800293e:	77fb      	strb	r3, [r7, #31]
 8002940:	e085      	b.n	8002a4e <UART_SetConfig+0x216>
 8002942:	2308      	movs	r3, #8
 8002944:	77fb      	strb	r3, [r7, #31]
 8002946:	e082      	b.n	8002a4e <UART_SetConfig+0x216>
 8002948:	2310      	movs	r3, #16
 800294a:	77fb      	strb	r3, [r7, #31]
 800294c:	e07f      	b.n	8002a4e <UART_SetConfig+0x216>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a89      	ldr	r2, [pc, #548]	; (8002b78 <UART_SetConfig+0x340>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d124      	bne.n	80029a2 <UART_SetConfig+0x16a>
 8002958:	4b85      	ldr	r3, [pc, #532]	; (8002b70 <UART_SetConfig+0x338>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002960:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002964:	d011      	beq.n	800298a <UART_SetConfig+0x152>
 8002966:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800296a:	d817      	bhi.n	800299c <UART_SetConfig+0x164>
 800296c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002970:	d011      	beq.n	8002996 <UART_SetConfig+0x15e>
 8002972:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002976:	d811      	bhi.n	800299c <UART_SetConfig+0x164>
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <UART_SetConfig+0x14c>
 800297c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002980:	d006      	beq.n	8002990 <UART_SetConfig+0x158>
 8002982:	e00b      	b.n	800299c <UART_SetConfig+0x164>
 8002984:	2300      	movs	r3, #0
 8002986:	77fb      	strb	r3, [r7, #31]
 8002988:	e061      	b.n	8002a4e <UART_SetConfig+0x216>
 800298a:	2302      	movs	r3, #2
 800298c:	77fb      	strb	r3, [r7, #31]
 800298e:	e05e      	b.n	8002a4e <UART_SetConfig+0x216>
 8002990:	2304      	movs	r3, #4
 8002992:	77fb      	strb	r3, [r7, #31]
 8002994:	e05b      	b.n	8002a4e <UART_SetConfig+0x216>
 8002996:	2308      	movs	r3, #8
 8002998:	77fb      	strb	r3, [r7, #31]
 800299a:	e058      	b.n	8002a4e <UART_SetConfig+0x216>
 800299c:	2310      	movs	r3, #16
 800299e:	77fb      	strb	r3, [r7, #31]
 80029a0:	e055      	b.n	8002a4e <UART_SetConfig+0x216>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a75      	ldr	r2, [pc, #468]	; (8002b7c <UART_SetConfig+0x344>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d124      	bne.n	80029f6 <UART_SetConfig+0x1be>
 80029ac:	4b70      	ldr	r3, [pc, #448]	; (8002b70 <UART_SetConfig+0x338>)
 80029ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80029b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029b8:	d011      	beq.n	80029de <UART_SetConfig+0x1a6>
 80029ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80029be:	d817      	bhi.n	80029f0 <UART_SetConfig+0x1b8>
 80029c0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029c4:	d011      	beq.n	80029ea <UART_SetConfig+0x1b2>
 80029c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029ca:	d811      	bhi.n	80029f0 <UART_SetConfig+0x1b8>
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <UART_SetConfig+0x1a0>
 80029d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d4:	d006      	beq.n	80029e4 <UART_SetConfig+0x1ac>
 80029d6:	e00b      	b.n	80029f0 <UART_SetConfig+0x1b8>
 80029d8:	2300      	movs	r3, #0
 80029da:	77fb      	strb	r3, [r7, #31]
 80029dc:	e037      	b.n	8002a4e <UART_SetConfig+0x216>
 80029de:	2302      	movs	r3, #2
 80029e0:	77fb      	strb	r3, [r7, #31]
 80029e2:	e034      	b.n	8002a4e <UART_SetConfig+0x216>
 80029e4:	2304      	movs	r3, #4
 80029e6:	77fb      	strb	r3, [r7, #31]
 80029e8:	e031      	b.n	8002a4e <UART_SetConfig+0x216>
 80029ea:	2308      	movs	r3, #8
 80029ec:	77fb      	strb	r3, [r7, #31]
 80029ee:	e02e      	b.n	8002a4e <UART_SetConfig+0x216>
 80029f0:	2310      	movs	r3, #16
 80029f2:	77fb      	strb	r3, [r7, #31]
 80029f4:	e02b      	b.n	8002a4e <UART_SetConfig+0x216>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a61      	ldr	r2, [pc, #388]	; (8002b80 <UART_SetConfig+0x348>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d124      	bne.n	8002a4a <UART_SetConfig+0x212>
 8002a00:	4b5b      	ldr	r3, [pc, #364]	; (8002b70 <UART_SetConfig+0x338>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002a08:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a0c:	d011      	beq.n	8002a32 <UART_SetConfig+0x1fa>
 8002a0e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002a12:	d817      	bhi.n	8002a44 <UART_SetConfig+0x20c>
 8002a14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a18:	d011      	beq.n	8002a3e <UART_SetConfig+0x206>
 8002a1a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a1e:	d811      	bhi.n	8002a44 <UART_SetConfig+0x20c>
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <UART_SetConfig+0x1f4>
 8002a24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a28:	d006      	beq.n	8002a38 <UART_SetConfig+0x200>
 8002a2a:	e00b      	b.n	8002a44 <UART_SetConfig+0x20c>
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	77fb      	strb	r3, [r7, #31]
 8002a30:	e00d      	b.n	8002a4e <UART_SetConfig+0x216>
 8002a32:	2302      	movs	r3, #2
 8002a34:	77fb      	strb	r3, [r7, #31]
 8002a36:	e00a      	b.n	8002a4e <UART_SetConfig+0x216>
 8002a38:	2304      	movs	r3, #4
 8002a3a:	77fb      	strb	r3, [r7, #31]
 8002a3c:	e007      	b.n	8002a4e <UART_SetConfig+0x216>
 8002a3e:	2308      	movs	r3, #8
 8002a40:	77fb      	strb	r3, [r7, #31]
 8002a42:	e004      	b.n	8002a4e <UART_SetConfig+0x216>
 8002a44:	2310      	movs	r3, #16
 8002a46:	77fb      	strb	r3, [r7, #31]
 8002a48:	e001      	b.n	8002a4e <UART_SetConfig+0x216>
 8002a4a:	2310      	movs	r3, #16
 8002a4c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a56:	d15c      	bne.n	8002b12 <UART_SetConfig+0x2da>
  {
    switch (clocksource)
 8002a58:	7ffb      	ldrb	r3, [r7, #31]
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d827      	bhi.n	8002aae <UART_SetConfig+0x276>
 8002a5e:	a201      	add	r2, pc, #4	; (adr r2, 8002a64 <UART_SetConfig+0x22c>)
 8002a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a64:	08002a89 	.word	0x08002a89
 8002a68:	08002a91 	.word	0x08002a91
 8002a6c:	08002a99 	.word	0x08002a99
 8002a70:	08002aaf 	.word	0x08002aaf
 8002a74:	08002a9f 	.word	0x08002a9f
 8002a78:	08002aaf 	.word	0x08002aaf
 8002a7c:	08002aaf 	.word	0x08002aaf
 8002a80:	08002aaf 	.word	0x08002aaf
 8002a84:	08002aa7 	.word	0x08002aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a88:	f7ff fc00 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8002a8c:	61b8      	str	r0, [r7, #24]
        break;
 8002a8e:	e013      	b.n	8002ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a90:	f7ff fc1e 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 8002a94:	61b8      	str	r0, [r7, #24]
        break;
 8002a96:	e00f      	b.n	8002ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a98:	4b3a      	ldr	r3, [pc, #232]	; (8002b84 <UART_SetConfig+0x34c>)
 8002a9a:	61bb      	str	r3, [r7, #24]
        break;
 8002a9c:	e00c      	b.n	8002ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a9e:	f7ff fb83 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002aa2:	61b8      	str	r0, [r7, #24]
        break;
 8002aa4:	e008      	b.n	8002ab8 <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aaa:	61bb      	str	r3, [r7, #24]
        break;
 8002aac:	e004      	b.n	8002ab8 <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	77bb      	strb	r3, [r7, #30]
        break;
 8002ab6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8085 	beq.w	8002bca <UART_SetConfig+0x392>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	005a      	lsls	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	085b      	lsrs	r3, r3, #1
 8002aca:	441a      	add	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad4:	b29b      	uxth	r3, r3
 8002ad6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	2b0f      	cmp	r3, #15
 8002adc:	d916      	bls.n	8002b0c <UART_SetConfig+0x2d4>
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ae4:	d212      	bcs.n	8002b0c <UART_SetConfig+0x2d4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f023 030f 	bic.w	r3, r3, #15
 8002aee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	085b      	lsrs	r3, r3, #1
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	89fb      	ldrh	r3, [r7, #14]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	89fa      	ldrh	r2, [r7, #14]
 8002b08:	60da      	str	r2, [r3, #12]
 8002b0a:	e05e      	b.n	8002bca <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	77bb      	strb	r3, [r7, #30]
 8002b10:	e05b      	b.n	8002bca <UART_SetConfig+0x392>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b12:	7ffb      	ldrb	r3, [r7, #31]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d837      	bhi.n	8002b88 <UART_SetConfig+0x350>
 8002b18:	a201      	add	r2, pc, #4	; (adr r2, 8002b20 <UART_SetConfig+0x2e8>)
 8002b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1e:	bf00      	nop
 8002b20:	08002b45 	.word	0x08002b45
 8002b24:	08002b4d 	.word	0x08002b4d
 8002b28:	08002b55 	.word	0x08002b55
 8002b2c:	08002b89 	.word	0x08002b89
 8002b30:	08002b5b 	.word	0x08002b5b
 8002b34:	08002b89 	.word	0x08002b89
 8002b38:	08002b89 	.word	0x08002b89
 8002b3c:	08002b89 	.word	0x08002b89
 8002b40:	08002b63 	.word	0x08002b63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b44:	f7ff fba2 	bl	800228c <HAL_RCC_GetPCLK1Freq>
 8002b48:	61b8      	str	r0, [r7, #24]
        break;
 8002b4a:	e022      	b.n	8002b92 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b4c:	f7ff fbc0 	bl	80022d0 <HAL_RCC_GetPCLK2Freq>
 8002b50:	61b8      	str	r0, [r7, #24]
        break;
 8002b52:	e01e      	b.n	8002b92 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b54:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <UART_SetConfig+0x34c>)
 8002b56:	61bb      	str	r3, [r7, #24]
        break;
 8002b58:	e01b      	b.n	8002b92 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b5a:	f7ff fb25 	bl	80021a8 <HAL_RCC_GetSysClockFreq>
 8002b5e:	61b8      	str	r0, [r7, #24]
        break;
 8002b60:	e017      	b.n	8002b92 <UART_SetConfig+0x35a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b66:	61bb      	str	r3, [r7, #24]
        break;
 8002b68:	e013      	b.n	8002b92 <UART_SetConfig+0x35a>
 8002b6a:	bf00      	nop
 8002b6c:	40013800 	.word	0x40013800
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40004400 	.word	0x40004400
 8002b78:	40004800 	.word	0x40004800
 8002b7c:	40004c00 	.word	0x40004c00
 8002b80:	40005000 	.word	0x40005000
 8002b84:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	77bb      	strb	r3, [r7, #30]
        break;
 8002b90:	bf00      	nop
    }

    if (pclk != 0U)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d018      	beq.n	8002bca <UART_SetConfig+0x392>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	085a      	lsrs	r2, r3, #1
 8002b9e:	69bb      	ldr	r3, [r7, #24]
 8002ba0:	441a      	add	r2, r3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	2b0f      	cmp	r3, #15
 8002bb2:	d908      	bls.n	8002bc6 <UART_SetConfig+0x38e>
 8002bb4:	693b      	ldr	r3, [r7, #16]
 8002bb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bba:	d204      	bcs.n	8002bc6 <UART_SetConfig+0x38e>
      {
        huart->Instance->BRR = usartdiv;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	60da      	str	r2, [r3, #12]
 8002bc4:	e001      	b.n	8002bca <UART_SetConfig+0x392>
      }
      else
      {
        ret = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002bd6:	7fbb      	ldrb	r3, [r7, #30]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d00a      	beq.n	8002c0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	430a      	orrs	r2, r1
 8002c08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	f003 0304 	and.w	r3, r3, #4
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01a      	beq.n	8002cf6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cde:	d10a      	bne.n	8002cf6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d00a      	beq.n	8002d18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	430a      	orrs	r2, r1
 8002d16:	605a      	str	r2, [r3, #4]
  }
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af02      	add	r7, sp, #8
 8002d28:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002d32:	f7fd fe27 	bl	8000984 <HAL_GetTick>
 8002d36:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d10e      	bne.n	8002d64 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 f82d 	bl	8002db4 <UART_WaitOnFlagUntilTimeout>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d001      	beq.n	8002d64 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e023      	b.n	8002dac <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0304 	and.w	r3, r3, #4
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d10e      	bne.n	8002d90 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d76:	9300      	str	r3, [sp, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f817 	bl	8002db4 <UART_WaitOnFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e00d      	b.n	8002dac <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2220      	movs	r2, #32
 8002d94:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b09c      	sub	sp, #112	; 0x70
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc4:	e0a5      	b.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dcc:	f000 80a1 	beq.w	8002f12 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd0:	f7fd fdd8 	bl	8000984 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d302      	bcc.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x32>
 8002de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d13e      	bne.n	8002e64 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dee:	e853 3f00 	ldrex	r3, [r3]
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002df6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dfa:	667b      	str	r3, [r7, #100]	; 0x64
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	461a      	mov	r2, r3
 8002e02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e04:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e06:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e0c:	e841 2300 	strex	r3, r2, [r1]
 8002e10:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e6      	bne.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	3308      	adds	r3, #8
 8002e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e22:	e853 3f00 	ldrex	r3, [r3]
 8002e26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	663b      	str	r3, [r7, #96]	; 0x60
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	3308      	adds	r3, #8
 8002e36:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e38:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e3a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e3c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e40:	e841 2300 	strex	r3, r2, [r1]
 8002e44:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1e5      	bne.n	8002e18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e067      	b.n	8002f34 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d04f      	beq.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	69db      	ldr	r3, [r3, #28]
 8002e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e80:	d147      	bne.n	8002f12 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e8a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e94:	e853 3f00 	ldrex	r3, [r3]
 8002e98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ea0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eaa:	637b      	str	r3, [r7, #52]	; 0x34
 8002eac:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eb2:	e841 2300 	strex	r3, r2, [r1]
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1e6      	bne.n	8002e8c <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3308      	adds	r3, #8
 8002ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	e853 3f00 	ldrex	r3, [r3]
 8002ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f023 0301 	bic.w	r3, r3, #1
 8002ed4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	3308      	adds	r3, #8
 8002edc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ede:	623a      	str	r2, [r7, #32]
 8002ee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ee2:	69f9      	ldr	r1, [r7, #28]
 8002ee4:	6a3a      	ldr	r2, [r7, #32]
 8002ee6:	e841 2300 	strex	r3, r2, [r1]
 8002eea:	61bb      	str	r3, [r7, #24]
   return(result);
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1e5      	bne.n	8002ebe <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e010      	b.n	8002f34 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	69da      	ldr	r2, [r3, #28]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	68ba      	ldr	r2, [r7, #8]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	bf0c      	ite	eq
 8002f22:	2301      	moveq	r3, #1
 8002f24:	2300      	movne	r3, #0
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	461a      	mov	r2, r3
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	f43f af4a 	beq.w	8002dc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3770      	adds	r7, #112	; 0x70
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <AES_keyschedule_enc_LL>:
 8002f3c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f40:	1092      	asrs	r2, r2, #2
 8002f42:	2a00      	cmp	r2, #0
 8002f44:	b084      	sub	sp, #16
 8002f46:	dd06      	ble.n	8002f56 <AES_keyschedule_enc_LL+0x1a>
 8002f48:	0095      	lsls	r5, r2, #2
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	58c4      	ldr	r4, [r0, r3]
 8002f4e:	50cc      	str	r4, [r1, r3]
 8002f50:	3304      	adds	r3, #4
 8002f52:	42ab      	cmp	r3, r5
 8002f54:	d1fa      	bne.n	8002f4c <AES_keyschedule_enc_LL+0x10>
 8002f56:	2a06      	cmp	r2, #6
 8002f58:	d007      	beq.n	8002f6a <AES_keyschedule_enc_LL+0x2e>
 8002f5a:	2a08      	cmp	r2, #8
 8002f5c:	d06c      	beq.n	8003038 <AES_keyschedule_enc_LL+0xfc>
 8002f5e:	2a04      	cmp	r2, #4
 8002f60:	d03a      	beq.n	8002fd8 <AES_keyschedule_enc_LL+0x9c>
 8002f62:	b004      	add	sp, #16
 8002f64:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f68:	4770      	bx	lr
 8002f6a:	f8df c190 	ldr.w	ip, [pc, #400]	; 80030fc <AES_keyschedule_enc_LL+0x1c0>
 8002f6e:	684c      	ldr	r4, [r1, #4]
 8002f70:	688d      	ldr	r5, [r1, #8]
 8002f72:	68c8      	ldr	r0, [r1, #12]
 8002f74:	680e      	ldr	r6, [r1, #0]
 8002f76:	4b60      	ldr	r3, [pc, #384]	; (80030f8 <AES_keyschedule_enc_LL+0x1bc>)
 8002f78:	f101 08a8 	add.w	r8, r1, #168	; 0xa8
 8002f7c:	e005      	b.n	8002f8a <AES_keyschedule_enc_LL+0x4e>
 8002f7e:	690f      	ldr	r7, [r1, #16]
 8002f80:	4047      	eors	r7, r0
 8002f82:	407a      	eors	r2, r7
 8002f84:	62ca      	str	r2, [r1, #44]	; 0x2c
 8002f86:	628f      	str	r7, [r1, #40]	; 0x28
 8002f88:	3118      	adds	r1, #24
 8002f8a:	694a      	ldr	r2, [r1, #20]
 8002f8c:	f85c af04 	ldr.w	sl, [ip, #4]!
 8002f90:	fa5f f982 	uxtb.w	r9, r2
 8002f94:	0e17      	lsrs	r7, r2, #24
 8002f96:	f813 9009 	ldrb.w	r9, [r3, r9]
 8002f9a:	5ddf      	ldrb	r7, [r3, r7]
 8002f9c:	f3c2 4b07 	ubfx	fp, r2, #16, #8
 8002fa0:	ea47 2709 	orr.w	r7, r7, r9, lsl #8
 8002fa4:	f3c2 2907 	ubfx	r9, r2, #8, #8
 8002fa8:	f813 b00b 	ldrb.w	fp, [r3, fp]
 8002fac:	f813 9009 	ldrb.w	r9, [r3, r9]
 8002fb0:	ea47 670b 	orr.w	r7, r7, fp, lsl #24
 8002fb4:	ea86 060a 	eor.w	r6, r6, sl
 8002fb8:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 8002fbc:	407e      	eors	r6, r7
 8002fbe:	4074      	eors	r4, r6
 8002fc0:	4065      	eors	r5, r4
 8002fc2:	4068      	eors	r0, r5
 8002fc4:	4541      	cmp	r1, r8
 8002fc6:	6248      	str	r0, [r1, #36]	; 0x24
 8002fc8:	620d      	str	r5, [r1, #32]
 8002fca:	61cc      	str	r4, [r1, #28]
 8002fcc:	618e      	str	r6, [r1, #24]
 8002fce:	d1d6      	bne.n	8002f7e <AES_keyschedule_enc_LL+0x42>
 8002fd0:	b004      	add	sp, #16
 8002fd2:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002fd6:	4770      	bx	lr
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4f48      	ldr	r7, [pc, #288]	; (80030fc <AES_keyschedule_enc_LL+0x1c0>)
 8002fdc:	f850 4b90 	ldr.w	r4, [r0], #144
 8002fe0:	68ca      	ldr	r2, [r1, #12]
 8002fe2:	684d      	ldr	r5, [r1, #4]
 8002fe4:	688e      	ldr	r6, [r1, #8]
 8002fe6:	4b44      	ldr	r3, [pc, #272]	; (80030f8 <AES_keyschedule_enc_LL+0x1bc>)
 8002fe8:	e000      	b.n	8002fec <AES_keyschedule_enc_LL+0xb0>
 8002fea:	3110      	adds	r1, #16
 8002fec:	fa5f f982 	uxtb.w	r9, r2
 8002ff0:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8002ff4:	f3c2 4807 	ubfx	r8, r2, #16, #8
 8002ff8:	f813 b009 	ldrb.w	fp, [r3, r9]
 8002ffc:	f813 c00c 	ldrb.w	ip, [r3, ip]
 8003000:	f813 a008 	ldrb.w	sl, [r3, r8]
 8003004:	f857 8f04 	ldr.w	r8, [r7, #4]!
 8003008:	f3c2 2907 	ubfx	r9, r2, #8, #8
 800300c:	ea4c 2c0b 	orr.w	ip, ip, fp, lsl #8
 8003010:	f813 9009 	ldrb.w	r9, [r3, r9]
 8003014:	ea4c 6c0a 	orr.w	ip, ip, sl, lsl #24
 8003018:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 800301c:	ea84 0408 	eor.w	r4, r4, r8
 8003020:	ea84 040c 	eor.w	r4, r4, ip
 8003024:	4065      	eors	r5, r4
 8003026:	406e      	eors	r6, r5
 8003028:	4072      	eors	r2, r6
 800302a:	4281      	cmp	r1, r0
 800302c:	61ca      	str	r2, [r1, #28]
 800302e:	618e      	str	r6, [r1, #24]
 8003030:	614d      	str	r5, [r1, #20]
 8003032:	610c      	str	r4, [r1, #16]
 8003034:	d1d9      	bne.n	8002fea <AES_keyschedule_enc_LL+0xae>
 8003036:	e794      	b.n	8002f62 <AES_keyschedule_enc_LL+0x26>
 8003038:	4b2f      	ldr	r3, [pc, #188]	; (80030f8 <AES_keyschedule_enc_LL+0x1bc>)
 800303a:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 80030fc <AES_keyschedule_enc_LL+0x1c0>
 800303e:	68ca      	ldr	r2, [r1, #12]
 8003040:	688c      	ldr	r4, [r1, #8]
 8003042:	684d      	ldr	r5, [r1, #4]
 8003044:	f8d1 c000 	ldr.w	ip, [r1]
 8003048:	f101 00c0 	add.w	r0, r1, #192	; 0xc0
 800304c:	4699      	mov	r9, r3
 800304e:	9003      	str	r0, [sp, #12]
 8003050:	e023      	b.n	800309a <AES_keyschedule_enc_LL+0x15e>
 8003052:	f819 b00b 	ldrb.w	fp, [r9, fp]
 8003056:	f819 7007 	ldrb.w	r7, [r9, r7]
 800305a:	f819 8008 	ldrb.w	r8, [r9, r8]
 800305e:	9702      	str	r7, [sp, #8]
 8003060:	9f01      	ldr	r7, [sp, #4]
 8003062:	ea48 680b 	orr.w	r8, r8, fp, lsl #24
 8003066:	f8dd b008 	ldr.w	fp, [sp, #8]
 800306a:	f819 6007 	ldrb.w	r6, [r9, r7]
 800306e:	ea48 470b 	orr.w	r7, r8, fp, lsl #16
 8003072:	ea47 2806 	orr.w	r8, r7, r6, lsl #8
 8003076:	690e      	ldr	r6, [r1, #16]
 8003078:	694f      	ldr	r7, [r1, #20]
 800307a:	ea88 0806 	eor.w	r8, r8, r6
 800307e:	698e      	ldr	r6, [r1, #24]
 8003080:	f8c1 8030 	str.w	r8, [r1, #48]	; 0x30
 8003084:	ea88 0707 	eor.w	r7, r8, r7
 8003088:	ea87 0b06 	eor.w	fp, r7, r6
 800308c:	ea8b 0000 	eor.w	r0, fp, r0
 8003090:	634f      	str	r7, [r1, #52]	; 0x34
 8003092:	63c8      	str	r0, [r1, #60]	; 0x3c
 8003094:	f8c1 b038 	str.w	fp, [r1, #56]	; 0x38
 8003098:	3120      	adds	r1, #32
 800309a:	69c8      	ldr	r0, [r1, #28]
 800309c:	f85a 8f04 	ldr.w	r8, [sl, #4]!
 80030a0:	b2c7      	uxtb	r7, r0
 80030a2:	0e06      	lsrs	r6, r0, #24
 80030a4:	f813 b007 	ldrb.w	fp, [r3, r7]
 80030a8:	5d9e      	ldrb	r6, [r3, r6]
 80030aa:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80030ae:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 80030b2:	f813 b007 	ldrb.w	fp, [r3, r7]
 80030b6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 80030ba:	ea46 660b 	orr.w	r6, r6, fp, lsl #24
 80030be:	5ddf      	ldrb	r7, [r3, r7]
 80030c0:	ea8c 0c08 	eor.w	ip, ip, r8
 80030c4:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 80030c8:	ea8c 0c06 	eor.w	ip, ip, r6
 80030cc:	ea8c 0505 	eor.w	r5, ip, r5
 80030d0:	406c      	eors	r4, r5
 80030d2:	4062      	eors	r2, r4
 80030d4:	f3c2 2607 	ubfx	r6, r2, #8, #8
 80030d8:	9601      	str	r6, [sp, #4]
 80030da:	9e03      	ldr	r6, [sp, #12]
 80030dc:	62ca      	str	r2, [r1, #44]	; 0x2c
 80030de:	42b1      	cmp	r1, r6
 80030e0:	ea4f 6b12 	mov.w	fp, r2, lsr #24
 80030e4:	fa5f f882 	uxtb.w	r8, r2
 80030e8:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80030ec:	628c      	str	r4, [r1, #40]	; 0x28
 80030ee:	624d      	str	r5, [r1, #36]	; 0x24
 80030f0:	f8c1 c020 	str.w	ip, [r1, #32]
 80030f4:	d1ad      	bne.n	8003052 <AES_keyschedule_enc_LL+0x116>
 80030f6:	e734      	b.n	8002f62 <AES_keyschedule_enc_LL+0x26>
 80030f8:	08004004 	.word	0x08004004
 80030fc:	08003bd8 	.word	0x08003bd8

08003100 <AES_keyschedule_enc>:
 8003100:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 8003104:	ea4f 08a2 	mov.w	r8, r2, asr #2
 8003108:	f1b8 0f00 	cmp.w	r8, #0
 800310c:	dd13      	ble.n	8003136 <AES_keyschedule_enc+0x36>
 800310e:	4603      	mov	r3, r0
 8003110:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8003114:	1f0c      	subs	r4, r1, #4
 8003116:	785d      	ldrb	r5, [r3, #1]
 8003118:	f893 c000 	ldrb.w	ip, [r3]
 800311c:	78df      	ldrb	r7, [r3, #3]
 800311e:	789e      	ldrb	r6, [r3, #2]
 8003120:	042d      	lsls	r5, r5, #16
 8003122:	ea45 650c 	orr.w	r5, r5, ip, lsl #24
 8003126:	433d      	orrs	r5, r7
 8003128:	3304      	adds	r3, #4
 800312a:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 800312e:	4543      	cmp	r3, r8
 8003130:	f844 5f04 	str.w	r5, [r4, #4]!
 8003134:	d1ef      	bne.n	8003116 <AES_keyschedule_enc+0x16>
 8003136:	4608      	mov	r0, r1
 8003138:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800313c:	f7ff befe 	b.w	8002f3c <AES_keyschedule_enc_LL>

08003140 <AES_general_SW_enc>:
 8003140:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003144:	4cbe      	ldr	r4, [pc, #760]	; (8003440 <AES_general_SW_enc+0x300>)
 8003146:	4dbf      	ldr	r5, [pc, #764]	; (8003444 <AES_general_SW_enc+0x304>)
 8003148:	b08a      	sub	sp, #40	; 0x28
 800314a:	2700      	movs	r7, #0
 800314c:	2601      	movs	r6, #1
 800314e:	9709      	str	r7, [sp, #36]	; 0x24
 8003150:	6026      	str	r6, [r4, #0]
 8003152:	6824      	ldr	r4, [r4, #0]
 8003154:	9409      	str	r4, [sp, #36]	; 0x24
 8003156:	682c      	ldr	r4, [r5, #0]
 8003158:	9409      	str	r4, [sp, #36]	; 0x24
 800315a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800315c:	9107      	str	r1, [sp, #28]
 800315e:	10db      	asrs	r3, r3, #3
 8003160:	3303      	adds	r3, #3
 8003162:	3401      	adds	r4, #1
 8003164:	9306      	str	r3, [sp, #24]
 8003166:	f000 8151 	beq.w	800340c <AES_general_SW_enc+0x2cc>
 800316a:	6804      	ldr	r4, [r0, #0]
 800316c:	6811      	ldr	r1, [r2, #0]
 800316e:	6840      	ldr	r0, [r0, #4]
 8003170:	6853      	ldr	r3, [r2, #4]
 8003172:	ea81 0b04 	eor.w	fp, r1, r4
 8003176:	4058      	eors	r0, r3
 8003178:	9003      	str	r0, [sp, #12]
 800317a:	46d9      	mov	r9, fp
 800317c:	46dc      	mov	ip, fp
 800317e:	4bb2      	ldr	r3, [pc, #712]	; (8003448 <AES_general_SW_enc+0x308>)
 8003180:	9c03      	ldr	r4, [sp, #12]
 8003182:	4698      	mov	r8, r3
 8003184:	e067      	b.n	8003256 <AES_general_SW_enc+0x116>
 8003186:	ea4f 611b 	mov.w	r1, fp, lsr #24
 800318a:	ea4f 6c14 	mov.w	ip, r4, lsr #24
 800318e:	0e07      	lsrs	r7, r0, #24
 8003190:	ea4f 651a 	mov.w	r5, sl, lsr #24
 8003194:	f858 902c 	ldr.w	r9, [r8, ip, lsl #2]
 8003198:	f858 6021 	ldr.w	r6, [r8, r1, lsl #2]
 800319c:	f858 c027 	ldr.w	ip, [r8, r7, lsl #2]
 80031a0:	f858 7025 	ldr.w	r7, [r8, r5, lsl #2]
 80031a4:	e892 0022 	ldmia.w	r2, {r1, r5}
 80031a8:	404e      	eors	r6, r1
 80031aa:	fa5f f18a 	uxtb.w	r1, sl
 80031ae:	ea89 0505 	eor.w	r5, r9, r5
 80031b2:	f858 9021 	ldr.w	r9, [r8, r1, lsl #2]
 80031b6:	6891      	ldr	r1, [r2, #8]
 80031b8:	ea8c 0c01 	eor.w	ip, ip, r1
 80031bc:	68d1      	ldr	r1, [r2, #12]
 80031be:	404f      	eors	r7, r1
 80031c0:	9704      	str	r7, [sp, #16]
 80031c2:	fa5f f78b 	uxtb.w	r7, fp
 80031c6:	ea86 6939 	eor.w	r9, r6, r9, ror #24
 80031ca:	f858 7027 	ldr.w	r7, [r8, r7, lsl #2]
 80031ce:	f3c4 4607 	ubfx	r6, r4, #16, #8
 80031d2:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 80031d6:	b2e5      	uxtb	r5, r4
 80031d8:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80031dc:	b2c1      	uxtb	r1, r0
 80031de:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80031e2:	9405      	str	r4, [sp, #20]
 80031e4:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 80031e8:	9c04      	ldr	r4, [sp, #16]
 80031ea:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80031ee:	9703      	str	r7, [sp, #12]
 80031f0:	ea84 6131 	eor.w	r1, r4, r1, ror #24
 80031f4:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80031f8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80031fc:	ea8c 6535 	eor.w	r5, ip, r5, ror #24
 8003200:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8003204:	f858 c024 	ldr.w	ip, [r8, r4, lsl #2]
 8003208:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
 800320c:	f3ca 2007 	ubfx	r0, sl, #8, #8
 8003210:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8003214:	ea89 2636 	eor.w	r6, r9, r6, ror #8
 8003218:	f858 a024 	ldr.w	sl, [r8, r4, lsl #2]
 800321c:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8003220:	f3cb 4007 	ubfx	r0, fp, #16, #8
 8003224:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8003228:	f858 9020 	ldr.w	r9, [r8, r0, lsl #2]
 800322c:	f858 002b 	ldr.w	r0, [r8, fp, lsl #2]
 8003230:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8003234:	ea85 253a 	eor.w	r5, r5, sl, ror #8
 8003238:	ea8b 2c3c 	eor.w	ip, fp, ip, ror #8
 800323c:	ea85 4b30 	eor.w	fp, r5, r0, ror #16
 8003240:	9805      	ldr	r0, [sp, #20]
 8003242:	ea86 4737 	eor.w	r7, r6, r7, ror #16
 8003246:	ea81 2939 	eor.w	r9, r1, r9, ror #8
 800324a:	ea8c 4c34 	eor.w	ip, ip, r4, ror #16
 800324e:	9703      	str	r7, [sp, #12]
 8003250:	ea89 4930 	eor.w	r9, r9, r0, ror #16
 8003254:	463c      	mov	r4, r7
 8003256:	0e21      	lsrs	r1, r4, #24
 8003258:	ea4f 661c 	mov.w	r6, ip, lsr #24
 800325c:	ea4f 6419 	mov.w	r4, r9, lsr #24
 8003260:	f853 5021 	ldr.w	r5, [r3, r1, lsl #2]
 8003264:	6911      	ldr	r1, [r2, #16]
 8003266:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 800326a:	f853 6024 	ldr.w	r6, [r3, r4, lsl #2]
 800326e:	6954      	ldr	r4, [r2, #20]
 8003270:	404d      	eors	r5, r1
 8003272:	ea4f 601b 	mov.w	r0, fp, lsr #24
 8003276:	fa5f f189 	uxtb.w	r1, r9
 800327a:	407c      	eors	r4, r7
 800327c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003280:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
 8003284:	6991      	ldr	r1, [r2, #24]
 8003286:	4048      	eors	r0, r1
 8003288:	69d1      	ldr	r1, [r2, #28]
 800328a:	404e      	eors	r6, r1
 800328c:	9604      	str	r6, [sp, #16]
 800328e:	9e03      	ldr	r6, [sp, #12]
 8003290:	9904      	ldr	r1, [sp, #16]
 8003292:	fa5f fa86 	uxtb.w	sl, r6
 8003296:	fa5f f68b 	uxtb.w	r6, fp
 800329a:	f853 a02a 	ldr.w	sl, [r3, sl, lsl #2]
 800329e:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80032a2:	ea85 6737 	eor.w	r7, r5, r7, ror #24
 80032a6:	ea84 6a3a 	eor.w	sl, r4, sl, ror #24
 80032aa:	f3cc 4507 	ubfx	r5, ip, #16, #8
 80032ae:	fa5f f48c 	uxtb.w	r4, ip
 80032b2:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 80032b6:	9702      	str	r7, [sp, #8]
 80032b8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 80032bc:	9705      	str	r7, [sp, #20]
 80032be:	ea81 6c36 	eor.w	ip, r1, r6, ror #24
 80032c2:	f3cb 4107 	ubfx	r1, fp, #16, #8
 80032c6:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 80032ca:	9f06      	ldr	r7, [sp, #24]
 80032cc:	f853 602b 	ldr.w	r6, [r3, fp, lsl #2]
 80032d0:	9601      	str	r6, [sp, #4]
 80032d2:	f3c9 4607 	ubfx	r6, r9, #16, #8
 80032d6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80032da:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 80032de:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80032e2:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 80032e6:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
 80032ea:	9604      	str	r6, [sp, #16]
 80032ec:	f853 6029 	ldr.w	r6, [r3, r9, lsl #2]
 80032f0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80032f4:	3f01      	subs	r7, #1
 80032f6:	ea80 6034 	eor.w	r0, r0, r4, ror #24
 80032fa:	9706      	str	r7, [sp, #24]
 80032fc:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8003300:	9904      	ldr	r1, [sp, #16]
 8003302:	ea89 2735 	eor.w	r7, r9, r5, ror #8
 8003306:	f3cb 4507 	ubfx	r5, fp, #16, #8
 800330a:	f3cb 2907 	ubfx	r9, fp, #8, #8
 800330e:	ea80 2031 	eor.w	r0, r0, r1, ror #8
 8003312:	f853 b025 	ldr.w	fp, [r3, r5, lsl #2]
 8003316:	9901      	ldr	r1, [sp, #4]
 8003318:	f853 5029 	ldr.w	r5, [r3, r9, lsl #2]
 800331c:	ea8a 2434 	eor.w	r4, sl, r4, ror #8
 8003320:	ea8c 2a3b 	eor.w	sl, ip, fp, ror #8
 8003324:	ea87 4b31 	eor.w	fp, r7, r1, ror #16
 8003328:	9f06      	ldr	r7, [sp, #24]
 800332a:	ea84 4436 	eor.w	r4, r4, r6, ror #16
 800332e:	9e05      	ldr	r6, [sp, #20]
 8003330:	2f00      	cmp	r7, #0
 8003332:	ea80 4035 	eor.w	r0, r0, r5, ror #16
 8003336:	ea8a 4a36 	eor.w	sl, sl, r6, ror #16
 800333a:	f102 0220 	add.w	r2, r2, #32
 800333e:	f73f af22 	bgt.w	8003186 <AES_general_SW_enc+0x46>
 8003342:	4b42      	ldr	r3, [pc, #264]	; (800344c <AES_general_SW_enc+0x30c>)
 8003344:	6811      	ldr	r1, [r2, #0]
 8003346:	ea4f 671b 	mov.w	r7, fp, lsr #24
 800334a:	fa5f f68a 	uxtb.w	r6, sl
 800334e:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8003352:	f813 8007 	ldrb.w	r8, [r3, r7]
 8003356:	5d9f      	ldrb	r7, [r3, r6]
 8003358:	5d5d      	ldrb	r5, [r3, r5]
 800335a:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800335e:	ea47 6808 	orr.w	r8, r7, r8, lsl #24
 8003362:	f813 c006 	ldrb.w	ip, [r3, r6]
 8003366:	0e27      	lsrs	r7, r4, #24
 8003368:	fa5f f68b 	uxtb.w	r6, fp
 800336c:	ea48 4805 	orr.w	r8, r8, r5, lsl #16
 8003370:	f3c0 4507 	ubfx	r5, r0, #16, #8
 8003374:	ea48 280c 	orr.w	r8, r8, ip, lsl #8
 8003378:	ea88 0101 	eor.w	r1, r8, r1
 800337c:	f813 c007 	ldrb.w	ip, [r3, r7]
 8003380:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003384:	5d9f      	ldrb	r7, [r3, r6]
 8003386:	5d5e      	ldrb	r6, [r3, r5]
 8003388:	f8c8 1000 	str.w	r1, [r8]
 800338c:	f3ca 2507 	ubfx	r5, sl, #8, #8
 8003390:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 8003394:	f813 8005 	ldrb.w	r8, [r3, r5]
 8003398:	6851      	ldr	r1, [r2, #4]
 800339a:	0e07      	lsrs	r7, r0, #24
 800339c:	b2e5      	uxtb	r5, r4
 800339e:	ea4c 4c06 	orr.w	ip, ip, r6, lsl #16
 80033a2:	f3ca 4607 	ubfx	r6, sl, #16, #8
 80033a6:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 80033aa:	5ddf      	ldrb	r7, [r3, r7]
 80033ac:	f813 9006 	ldrb.w	r9, [r3, r6]
 80033b0:	5d5d      	ldrb	r5, [r3, r5]
 80033b2:	ea8c 0101 	eor.w	r1, ip, r1
 80033b6:	f3cb 2607 	ubfx	r6, fp, #8, #8
 80033ba:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80033be:	5d9e      	ldrb	r6, [r3, r6]
 80033c0:	f8cc 1004 	str.w	r1, [ip, #4]
 80033c4:	b2c0      	uxtb	r0, r0
 80033c6:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
 80033ca:	ea4f 671a 	mov.w	r7, sl, lsr #24
 80033ce:	f813 8000 	ldrb.w	r8, [r3, r0]
 80033d2:	6890      	ldr	r0, [r2, #8]
 80033d4:	5ddf      	ldrb	r7, [r3, r7]
 80033d6:	f3cb 4107 	ubfx	r1, fp, #16, #8
 80033da:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 80033de:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80033e2:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 80033e6:	4045      	eors	r5, r0
 80033e8:	5c58      	ldrb	r0, [r3, r1]
 80033ea:	f8cc 5008 	str.w	r5, [ip, #8]
 80033ee:	5d19      	ldrb	r1, [r3, r4]
 80033f0:	68d2      	ldr	r2, [r2, #12]
 80033f2:	ea48 6307 	orr.w	r3, r8, r7, lsl #24
 80033f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80033fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80033fe:	4053      	eors	r3, r2
 8003400:	f8cc 300c 	str.w	r3, [ip, #12]
 8003404:	b00a      	add	sp, #40	; 0x28
 8003406:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800340a:	4770      	bx	lr
 800340c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800340e:	602b      	str	r3, [r5, #0]
 8003410:	682b      	ldr	r3, [r5, #0]
 8003412:	9309      	str	r3, [sp, #36]	; 0x24
 8003414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003416:	2b00      	cmp	r3, #0
 8003418:	f47f aea7 	bne.w	800316a <AES_general_SW_enc+0x2a>
 800341c:	6803      	ldr	r3, [r0, #0]
 800341e:	6815      	ldr	r5, [r2, #0]
 8003420:	6847      	ldr	r7, [r0, #4]
 8003422:	6886      	ldr	r6, [r0, #8]
 8003424:	6854      	ldr	r4, [r2, #4]
 8003426:	68c0      	ldr	r0, [r0, #12]
 8003428:	6891      	ldr	r1, [r2, #8]
 800342a:	406b      	eors	r3, r5
 800342c:	9303      	str	r3, [sp, #12]
 800342e:	68d3      	ldr	r3, [r2, #12]
 8003430:	ea84 0c07 	eor.w	ip, r4, r7
 8003434:	ea81 0b06 	eor.w	fp, r1, r6
 8003438:	ea83 0900 	eor.w	r9, r3, r0
 800343c:	e69f      	b.n	800317e <AES_general_SW_enc+0x3e>
 800343e:	bf00      	nop
 8003440:	40023008 	.word	0x40023008
 8003444:	40023000 	.word	0x40023000
 8003448:	08003c04 	.word	0x08003c04
 800344c:	08004004 	.word	0x08004004

08003450 <AES_CTR_Encrypt_Init>:
 8003450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003454:	4604      	mov	r4, r0
 8003456:	b170      	cbz	r0, 8003476 <AES_CTR_Encrypt_Init+0x26>
 8003458:	b169      	cbz	r1, 8003476 <AES_CTR_Encrypt_Init+0x26>
 800345a:	b162      	cbz	r2, 8003476 <AES_CTR_Encrypt_Init+0x26>
 800345c:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 8003460:	f02c 0308 	bic.w	r3, ip, #8
 8003464:	2b10      	cmp	r3, #16
 8003466:	d00a      	beq.n	800347e <AES_CTR_Encrypt_Init+0x2e>
 8003468:	f1bc 0f20 	cmp.w	ip, #32
 800346c:	d007      	beq.n	800347e <AES_CTR_Encrypt_Init+0x2e>
 800346e:	f640 401f 	movw	r0, #3103	; 0xc1f
 8003472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003476:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800347a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800347e:	6920      	ldr	r0, [r4, #16]
 8003480:	1e43      	subs	r3, r0, #1
 8003482:	2b0f      	cmp	r3, #15
 8003484:	d8f3      	bhi.n	800346e <AES_CTR_Encrypt_Init+0x1e>
 8003486:	f894 8004 	ldrb.w	r8, [r4, #4]
 800348a:	60e2      	str	r2, [r4, #12]
 800348c:	2300      	movs	r3, #0
 800348e:	f028 0506 	bic.w	r5, r8, #6
 8003492:	7125      	strb	r5, [r4, #4]
 8003494:	461e      	mov	r6, r3
 8003496:	6163      	str	r3, [r4, #20]
 8003498:	61a3      	str	r3, [r4, #24]
 800349a:	61e3      	str	r3, [r4, #28]
 800349c:	6223      	str	r3, [r4, #32]
 800349e:	461d      	mov	r5, r3
 80034a0:	e002      	b.n	80034a8 <AES_CTR_Encrypt_Init+0x58>
 80034a2:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 80034a6:	6976      	ldr	r6, [r6, #20]
 80034a8:	f003 0703 	and.w	r7, r3, #3
 80034ac:	f812 9003 	ldrb.w	r9, [r2, r3]
 80034b0:	f1c7 0703 	rsb	r7, r7, #3
 80034b4:	00ff      	lsls	r7, r7, #3
 80034b6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80034ba:	3301      	adds	r3, #1
 80034bc:	fa09 f707 	lsl.w	r7, r9, r7
 80034c0:	433e      	orrs	r6, r7
 80034c2:	4283      	cmp	r3, r0
 80034c4:	616e      	str	r6, [r5, #20]
 80034c6:	ea4f 05a3 	mov.w	r5, r3, asr #2
 80034ca:	d1ea      	bne.n	80034a2 <AES_CTR_Encrypt_Init+0x52>
 80034cc:	f018 0801 	ands.w	r8, r8, #1
 80034d0:	d109      	bne.n	80034e6 <AES_CTR_Encrypt_Init+0x96>
 80034d2:	60a1      	str	r1, [r4, #8]
 80034d4:	4608      	mov	r0, r1
 80034d6:	4662      	mov	r2, ip
 80034d8:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80034dc:	f7ff fe10 	bl	8003100 <AES_keyschedule_enc>
 80034e0:	4640      	mov	r0, r8
 80034e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034e6:	2000      	movs	r0, #0
 80034e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080034ec <AES_CTR_Encrypt_Append>:
 80034ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034f0:	b08f      	sub	sp, #60	; 0x3c
 80034f2:	4681      	mov	r9, r0
 80034f4:	2000      	movs	r0, #0
 80034f6:	468b      	mov	fp, r1
 80034f8:	9202      	str	r2, [sp, #8]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	900a      	str	r0, [sp, #40]	; 0x28
 80034fe:	900b      	str	r0, [sp, #44]	; 0x2c
 8003500:	900c      	str	r0, [sp, #48]	; 0x30
 8003502:	900d      	str	r0, [sp, #52]	; 0x34
 8003504:	9009      	str	r0, [sp, #36]	; 0x24
 8003506:	f1b9 0f00 	cmp.w	r9, #0
 800350a:	d00d      	beq.n	8003528 <AES_CTR_Encrypt_Append+0x3c>
 800350c:	b161      	cbz	r1, 8003528 <AES_CTR_Encrypt_Append+0x3c>
 800350e:	b15b      	cbz	r3, 8003528 <AES_CTR_Encrypt_Append+0x3c>
 8003510:	9818      	ldr	r0, [sp, #96]	; 0x60
 8003512:	b148      	cbz	r0, 8003528 <AES_CTR_Encrypt_Append+0x3c>
 8003514:	f899 3004 	ldrb.w	r3, [r9, #4]
 8003518:	f013 0f06 	tst.w	r3, #6
 800351c:	d009      	beq.n	8003532 <AES_CTR_Encrypt_Append+0x46>
 800351e:	f640 401e 	movw	r0, #3102	; 0xc1e
 8003522:	b00f      	add	sp, #60	; 0x3c
 8003524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003528:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 800352c:	b00f      	add	sp, #60	; 0x3c
 800352e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003532:	0712      	lsls	r2, r2, #28
 8003534:	bf1c      	itt	ne
 8003536:	f043 0304 	orrne.w	r3, r3, #4
 800353a:	f889 3004 	strbne.w	r3, [r9, #4]
 800353e:	4bca      	ldr	r3, [pc, #808]	; (8003868 <AES_CTR_Encrypt_Append+0x37c>)
 8003540:	4aca      	ldr	r2, [pc, #808]	; (800386c <AES_CTR_Encrypt_Append+0x380>)
 8003542:	2101      	movs	r1, #1
 8003544:	6019      	str	r1, [r3, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	9309      	str	r3, [sp, #36]	; 0x24
 800354a:	6813      	ldr	r3, [r2, #0]
 800354c:	9309      	str	r3, [sp, #36]	; 0x24
 800354e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003550:	3301      	adds	r3, #1
 8003552:	f000 8133 	beq.w	80037bc <AES_CTR_Encrypt_Append+0x2d0>
 8003556:	9c02      	ldr	r4, [sp, #8]
 8003558:	2c0f      	cmp	r4, #15
 800355a:	f340 8232 	ble.w	80039c2 <AES_CTR_Encrypt_Append+0x4d6>
 800355e:	f1a4 0310 	sub.w	r3, r4, #16
 8003562:	091b      	lsrs	r3, r3, #4
 8003564:	f109 0628 	add.w	r6, r9, #40	; 0x28
 8003568:	9305      	str	r3, [sp, #20]
 800356a:	9603      	str	r6, [sp, #12]
 800356c:	eb0b 1303 	add.w	r3, fp, r3, lsl #4
 8003570:	9e00      	ldr	r6, [sp, #0]
 8003572:	f8cd b01c 	str.w	fp, [sp, #28]
 8003576:	f109 0514 	add.w	r5, r9, #20
 800357a:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800357e:	3310      	adds	r3, #16
 8003580:	9501      	str	r5, [sp, #4]
 8003582:	465c      	mov	r4, fp
 8003584:	9304      	str	r3, [sp, #16]
 8003586:	1cf5      	adds	r5, r6, #3
 8003588:	f8cd 8018 	str.w	r8, [sp, #24]
 800358c:	46c3      	mov	fp, r8
 800358e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003592:	9801      	ldr	r0, [sp, #4]
 8003594:	9a03      	ldr	r2, [sp, #12]
 8003596:	f894 8000 	ldrb.w	r8, [r4]
 800359a:	7867      	ldrb	r7, [r4, #1]
 800359c:	78a6      	ldrb	r6, [r4, #2]
 800359e:	f894 a003 	ldrb.w	sl, [r4, #3]
 80035a2:	4659      	mov	r1, fp
 80035a4:	f7ff fdcc 	bl	8003140 <AES_general_SW_enc>
 80035a8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80035aa:	f8d9 2020 	ldr.w	r2, [r9, #32]
 80035ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80035b0:	ea4a 0101 	orr.w	r1, sl, r1
 80035b4:	ea4f 6808 	mov.w	r8, r8, lsl #24
 80035b8:	ea41 0808 	orr.w	r8, r1, r8
 80035bc:	043f      	lsls	r7, r7, #16
 80035be:	ea48 0707 	orr.w	r7, r8, r7
 80035c2:	0236      	lsls	r6, r6, #8
 80035c4:	433e      	orrs	r6, r7
 80035c6:	960a      	str	r6, [sp, #40]	; 0x28
 80035c8:	9e04      	ldr	r6, [sp, #16]
 80035ca:	3410      	adds	r4, #16
 80035cc:	1c57      	adds	r7, r2, #1
 80035ce:	0a18      	lsrs	r0, r3, #8
 80035d0:	0c19      	lsrs	r1, r3, #16
 80035d2:	0e1a      	lsrs	r2, r3, #24
 80035d4:	42b4      	cmp	r4, r6
 80035d6:	f8c9 7020 	str.w	r7, [r9, #32]
 80035da:	f105 0510 	add.w	r5, r5, #16
 80035de:	f805 3c10 	strb.w	r3, [r5, #-16]
 80035e2:	f805 0c11 	strb.w	r0, [r5, #-17]
 80035e6:	f805 1c12 	strb.w	r1, [r5, #-18]
 80035ea:	f805 2c13 	strb.w	r2, [r5, #-19]
 80035ee:	d1ce      	bne.n	800358e <AES_CTR_Encrypt_Append+0xa2>
 80035f0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80035f4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80035f8:	f108 0301 	add.w	r3, r8, #1
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	9301      	str	r3, [sp, #4]
 8003600:	461d      	mov	r5, r3
 8003602:	9c02      	ldr	r4, [sp, #8]
 8003604:	42a5      	cmp	r5, r4
 8003606:	db06      	blt.n	8003616 <AES_CTR_Encrypt_Append+0x12a>
 8003608:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800360c:	9e02      	ldr	r6, [sp, #8]
 800360e:	f8c8 6000 	str.w	r6, [r8]
 8003612:	2000      	movs	r0, #0
 8003614:	e78a      	b.n	800352c <AES_CTR_Encrypt_Append+0x40>
 8003616:	a90a      	add	r1, sp, #40	; 0x28
 8003618:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800361c:	f109 0014 	add.w	r0, r9, #20
 8003620:	f109 0228 	add.w	r2, r9, #40	; 0x28
 8003624:	f7ff fd8c 	bl	8003140 <AES_general_SW_enc>
 8003628:	9c02      	ldr	r4, [sp, #8]
 800362a:	9d01      	ldr	r5, [sp, #4]
 800362c:	1b61      	subs	r1, r4, r5
 800362e:	2900      	cmp	r1, #0
 8003630:	460b      	mov	r3, r1
 8003632:	bfb8      	it	lt
 8003634:	1ccb      	addlt	r3, r1, #3
 8003636:	109b      	asrs	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	f340 81c5 	ble.w	80039c8 <AES_CTR_Encrypt_Append+0x4dc>
 800363e:	9e01      	ldr	r6, [sp, #4]
 8003640:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003644:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003646:	f81b 7008 	ldrb.w	r7, [fp, r8]
 800364a:	f8dd 9000 	ldr.w	r9, [sp]
 800364e:	1cf5      	adds	r5, r6, #3
 8003650:	1cb4      	adds	r4, r6, #2
 8003652:	f108 0001 	add.w	r0, r8, #1
 8003656:	f81b 6005 	ldrb.w	r6, [fp, r5]
 800365a:	f81b c004 	ldrb.w	ip, [fp, r4]
 800365e:	ea46 6607 	orr.w	r6, r6, r7, lsl #24
 8003662:	f81b 7000 	ldrb.w	r7, [fp, r0]
 8003666:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
 800366a:	ea46 4607 	orr.w	r6, r6, r7, lsl #16
 800366e:	4072      	eors	r2, r6
 8003670:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8003674:	0c17      	lsrs	r7, r2, #16
 8003676:	0e16      	lsrs	r6, r2, #24
 8003678:	2b01      	cmp	r3, #1
 800367a:	f809 2005 	strb.w	r2, [r9, r5]
 800367e:	920a      	str	r2, [sp, #40]	; 0x28
 8003680:	f809 c004 	strb.w	ip, [r9, r4]
 8003684:	f809 7000 	strb.w	r7, [r9, r0]
 8003688:	f809 6008 	strb.w	r6, [r9, r8]
 800368c:	dd78      	ble.n	8003780 <AES_CTR_Encrypt_Append+0x294>
 800368e:	f108 0004 	add.w	r0, r8, #4
 8003692:	f108 0607 	add.w	r6, r8, #7
 8003696:	46c1      	mov	r9, r8
 8003698:	f108 0506 	add.w	r5, r8, #6
 800369c:	f81b 7006 	ldrb.w	r7, [fp, r6]
 80036a0:	f81b c000 	ldrb.w	ip, [fp, r0]
 80036a4:	f81b 8005 	ldrb.w	r8, [fp, r5]
 80036a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80036aa:	f109 0405 	add.w	r4, r9, #5
 80036ae:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 80036b2:	f81b 7004 	ldrb.w	r7, [fp, r4]
 80036b6:	f8dd 9000 	ldr.w	r9, [sp]
 80036ba:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 80036be:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
 80036c2:	407a      	eors	r2, r7
 80036c4:	ea4f 2812 	mov.w	r8, r2, lsr #8
 80036c8:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80036cc:	0e17      	lsrs	r7, r2, #24
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	f809 2006 	strb.w	r2, [r9, r6]
 80036d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80036d6:	f809 8005 	strb.w	r8, [r9, r5]
 80036da:	f809 c004 	strb.w	ip, [r9, r4]
 80036de:	f809 7000 	strb.w	r7, [r9, r0]
 80036e2:	dd4d      	ble.n	8003780 <AES_CTR_Encrypt_Append+0x294>
 80036e4:	9c01      	ldr	r4, [sp, #4]
 80036e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80036e8:	f104 0008 	add.w	r0, r4, #8
 80036ec:	f104 060b 	add.w	r6, r4, #11
 80036f0:	f104 050a 	add.w	r5, r4, #10
 80036f4:	f81b 7006 	ldrb.w	r7, [fp, r6]
 80036f8:	f81b c000 	ldrb.w	ip, [fp, r0]
 80036fc:	f81b 8005 	ldrb.w	r8, [fp, r5]
 8003700:	3409      	adds	r4, #9
 8003702:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 8003706:	f81b 7004 	ldrb.w	r7, [fp, r4]
 800370a:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
 800370e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
 8003712:	407a      	eors	r2, r7
 8003714:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8003718:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800371c:	0e17      	lsrs	r7, r2, #24
 800371e:	2b03      	cmp	r3, #3
 8003720:	f809 2006 	strb.w	r2, [r9, r6]
 8003724:	920c      	str	r2, [sp, #48]	; 0x30
 8003726:	f809 8005 	strb.w	r8, [r9, r5]
 800372a:	f809 c004 	strb.w	ip, [r9, r4]
 800372e:	f809 7000 	strb.w	r7, [r9, r0]
 8003732:	dd25      	ble.n	8003780 <AES_CTR_Encrypt_Append+0x294>
 8003734:	9d01      	ldr	r5, [sp, #4]
 8003736:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003738:	f105 000c 	add.w	r0, r5, #12
 800373c:	f105 060f 	add.w	r6, r5, #15
 8003740:	f105 040d 	add.w	r4, r5, #13
 8003744:	f81b 7006 	ldrb.w	r7, [fp, r6]
 8003748:	f81b c000 	ldrb.w	ip, [fp, r0]
 800374c:	f81b 8004 	ldrb.w	r8, [fp, r4]
 8003750:	350e      	adds	r5, #14
 8003752:	ea47 6c0c 	orr.w	ip, r7, ip, lsl #24
 8003756:	f81b 7005 	ldrb.w	r7, [fp, r5]
 800375a:	ea4c 4c08 	orr.w	ip, ip, r8, lsl #16
 800375e:	ea4c 2707 	orr.w	r7, ip, r7, lsl #8
 8003762:	407a      	eors	r2, r7
 8003764:	ea4f 2812 	mov.w	r8, r2, lsr #8
 8003768:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800376c:	0e17      	lsrs	r7, r2, #24
 800376e:	f809 2006 	strb.w	r2, [r9, r6]
 8003772:	f809 8005 	strb.w	r8, [r9, r5]
 8003776:	f809 c004 	strb.w	ip, [r9, r4]
 800377a:	f809 7000 	strb.w	r7, [r9, r0]
 800377e:	920d      	str	r2, [sp, #52]	; 0x34
 8003780:	ebc3 7283 	rsb	r2, r3, r3, lsl #30
 8003784:	0092      	lsls	r2, r2, #2
 8003786:	4411      	add	r1, r2
 8003788:	2900      	cmp	r1, #0
 800378a:	f77f af3d 	ble.w	8003608 <AES_CTR_Encrypt_Append+0x11c>
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	aa0e      	add	r2, sp, #56	; 0x38
 8003792:	9d01      	ldr	r5, [sp, #4]
 8003794:	9e00      	ldr	r6, [sp, #0]
 8003796:	441a      	add	r2, r3
 8003798:	441d      	add	r5, r3
 800379a:	f852 7c10 	ldr.w	r7, [r2, #-16]
 800379e:	442e      	add	r6, r5
 80037a0:	2218      	movs	r2, #24
 80037a2:	445d      	add	r5, fp
 80037a4:	2300      	movs	r3, #0
 80037a6:	5ce8      	ldrb	r0, [r5, r3]
 80037a8:	fa27 f402 	lsr.w	r4, r7, r2
 80037ac:	4060      	eors	r0, r4
 80037ae:	54f0      	strb	r0, [r6, r3]
 80037b0:	3301      	adds	r3, #1
 80037b2:	428b      	cmp	r3, r1
 80037b4:	f1a2 0208 	sub.w	r2, r2, #8
 80037b8:	d1f5      	bne.n	80037a6 <AES_CTR_Encrypt_Append+0x2ba>
 80037ba:	e725      	b.n	8003608 <AES_CTR_Encrypt_Append+0x11c>
 80037bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037be:	6013      	str	r3, [r2, #0]
 80037c0:	6813      	ldr	r3, [r2, #0]
 80037c2:	9309      	str	r3, [sp, #36]	; 0x24
 80037c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d052      	beq.n	8003870 <AES_CTR_Encrypt_Append+0x384>
 80037ca:	9e02      	ldr	r6, [sp, #8]
 80037cc:	2e0f      	cmp	r6, #15
 80037ce:	f340 80f8 	ble.w	80039c2 <AES_CTR_Encrypt_Append+0x4d6>
 80037d2:	f1a6 0310 	sub.w	r3, r6, #16
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	f109 0614 	add.w	r6, r9, #20
 80037dc:	f109 0828 	add.w	r8, r9, #40	; 0x28
 80037e0:	9305      	str	r3, [sp, #20]
 80037e2:	9601      	str	r6, [sp, #4]
 80037e4:	eb0b 1303 	add.w	r3, fp, r3, lsl #4
 80037e8:	9e00      	ldr	r6, [sp, #0]
 80037ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80037ee:	3310      	adds	r3, #16
 80037f0:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 80037f4:	465c      	mov	r4, fp
 80037f6:	f8cd b01c 	str.w	fp, [sp, #28]
 80037fa:	9304      	str	r3, [sp, #16]
 80037fc:	1cf5      	adds	r5, r6, #3
 80037fe:	f8cd 8018 	str.w	r8, [sp, #24]
 8003802:	46c3      	mov	fp, r8
 8003804:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 8003808:	9801      	ldr	r0, [sp, #4]
 800380a:	9a03      	ldr	r2, [sp, #12]
 800380c:	f894 8000 	ldrb.w	r8, [r4]
 8003810:	7867      	ldrb	r7, [r4, #1]
 8003812:	78a6      	ldrb	r6, [r4, #2]
 8003814:	f894 a003 	ldrb.w	sl, [r4, #3]
 8003818:	4659      	mov	r1, fp
 800381a:	f7ff fc91 	bl	8003140 <AES_general_SW_enc>
 800381e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003820:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8003824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003826:	ea4a 0101 	orr.w	r1, sl, r1
 800382a:	ea4f 6808 	mov.w	r8, r8, lsl #24
 800382e:	ea41 0808 	orr.w	r8, r1, r8
 8003832:	043f      	lsls	r7, r7, #16
 8003834:	ea48 0707 	orr.w	r7, r8, r7
 8003838:	0236      	lsls	r6, r6, #8
 800383a:	433e      	orrs	r6, r7
 800383c:	960a      	str	r6, [sp, #40]	; 0x28
 800383e:	9e04      	ldr	r6, [sp, #16]
 8003840:	3410      	adds	r4, #16
 8003842:	1c57      	adds	r7, r2, #1
 8003844:	0a18      	lsrs	r0, r3, #8
 8003846:	0c19      	lsrs	r1, r3, #16
 8003848:	0e1a      	lsrs	r2, r3, #24
 800384a:	42b4      	cmp	r4, r6
 800384c:	f8c9 7020 	str.w	r7, [r9, #32]
 8003850:	f105 0510 	add.w	r5, r5, #16
 8003854:	f805 3c10 	strb.w	r3, [r5, #-16]
 8003858:	f805 0c11 	strb.w	r0, [r5, #-17]
 800385c:	f805 1c12 	strb.w	r1, [r5, #-18]
 8003860:	f805 2c13 	strb.w	r2, [r5, #-19]
 8003864:	d1ce      	bne.n	8003804 <AES_CTR_Encrypt_Append+0x318>
 8003866:	e6c3      	b.n	80035f0 <AES_CTR_Encrypt_Append+0x104>
 8003868:	40023008 	.word	0x40023008
 800386c:	40023000 	.word	0x40023000
 8003870:	9c02      	ldr	r4, [sp, #8]
 8003872:	2c0f      	cmp	r4, #15
 8003874:	f340 80a5 	ble.w	80039c2 <AES_CTR_Encrypt_Append+0x4d6>
 8003878:	f1a4 0210 	sub.w	r2, r4, #16
 800387c:	f022 020f 	bic.w	r2, r2, #15
 8003880:	f109 0514 	add.w	r5, r9, #20
 8003884:	f109 0628 	add.w	r6, r9, #40	; 0x28
 8003888:	3210      	adds	r2, #16
 800388a:	ac0a      	add	r4, sp, #40	; 0x28
 800388c:	46da      	mov	sl, fp
 800388e:	f8cd b00c 	str.w	fp, [sp, #12]
 8003892:	9201      	str	r2, [sp, #4]
 8003894:	46cb      	mov	fp, r9
 8003896:	9504      	str	r5, [sp, #16]
 8003898:	9605      	str	r6, [sp, #20]
 800389a:	9406      	str	r4, [sp, #24]
 800389c:	4699      	mov	r9, r3
 800389e:	9d03      	ldr	r5, [sp, #12]
 80038a0:	f89a 1001 	ldrb.w	r1, [sl, #1]
 80038a4:	f815 e009 	ldrb.w	lr, [r5, r9]
 80038a8:	f89a 2005 	ldrb.w	r2, [sl, #5]
 80038ac:	f89a 3009 	ldrb.w	r3, [sl, #9]
 80038b0:	f89a 400d 	ldrb.w	r4, [sl, #13]
 80038b4:	f89a 0004 	ldrb.w	r0, [sl, #4]
 80038b8:	f89a c008 	ldrb.w	ip, [sl, #8]
 80038bc:	f89a 700c 	ldrb.w	r7, [sl, #12]
 80038c0:	f89a 6003 	ldrb.w	r6, [sl, #3]
 80038c4:	f89a 5007 	ldrb.w	r5, [sl, #7]
 80038c8:	f89a 8006 	ldrb.w	r8, [sl, #6]
 80038cc:	0409      	lsls	r1, r1, #16
 80038ce:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 80038d2:	0412      	lsls	r2, r2, #16
 80038d4:	f89a e00b 	ldrb.w	lr, [sl, #11]
 80038d8:	041b      	lsls	r3, r3, #16
 80038da:	0424      	lsls	r4, r4, #16
 80038dc:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 80038e0:	4331      	orrs	r1, r6
 80038e2:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80038e6:	f89a 600a 	ldrb.w	r6, [sl, #10]
 80038ea:	f89a 000f 	ldrb.w	r0, [sl, #15]
 80038ee:	ea44 6407 	orr.w	r4, r4, r7, lsl #24
 80038f2:	f89a 7002 	ldrb.w	r7, [sl, #2]
 80038f6:	432a      	orrs	r2, r5
 80038f8:	ea43 030e 	orr.w	r3, r3, lr
 80038fc:	4304      	orrs	r4, r0
 80038fe:	ea41 2707 	orr.w	r7, r1, r7, lsl #8
 8003902:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
 8003906:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 800390a:	9804      	ldr	r0, [sp, #16]
 800390c:	9906      	ldr	r1, [sp, #24]
 800390e:	9a05      	ldr	r2, [sp, #20]
 8003910:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 8003914:	f89a 500e 	ldrb.w	r5, [sl, #14]
 8003918:	f7ff fc12 	bl	8003140 <AES_general_SW_enc>
 800391c:	a80b      	add	r0, sp, #44	; 0x2c
 800391e:	c807      	ldmia	r0, {r0, r1, r2}
 8003920:	f8dd c000 	ldr.w	ip, [sp]
 8003924:	f8db 3020 	ldr.w	r3, [fp, #32]
 8003928:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
 800392c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800392e:	44cc      	add	ip, r9
 8003930:	ea88 0000 	eor.w	r0, r8, r0
 8003934:	4071      	eors	r1, r6
 8003936:	407c      	eors	r4, r7
 8003938:	3301      	adds	r3, #1
 800393a:	f8dd 8000 	ldr.w	r8, [sp]
 800393e:	f8cb 3020 	str.w	r3, [fp, #32]
 8003942:	406a      	eors	r2, r5
 8003944:	0a27      	lsrs	r7, r4, #8
 8003946:	0c25      	lsrs	r5, r4, #16
 8003948:	0e26      	lsrs	r6, r4, #24
 800394a:	f88c 4003 	strb.w	r4, [ip, #3]
 800394e:	940a      	str	r4, [sp, #40]	; 0x28
 8003950:	0c0c      	lsrs	r4, r1, #16
 8003952:	f88c 7002 	strb.w	r7, [ip, #2]
 8003956:	f88c 5001 	strb.w	r5, [ip, #1]
 800395a:	f808 6009 	strb.w	r6, [r8, r9]
 800395e:	f88c 4009 	strb.w	r4, [ip, #9]
 8003962:	9c01      	ldr	r4, [sp, #4]
 8003964:	900b      	str	r0, [sp, #44]	; 0x2c
 8003966:	f109 0910 	add.w	r9, r9, #16
 800396a:	0a05      	lsrs	r5, r0, #8
 800396c:	0c07      	lsrs	r7, r0, #16
 800396e:	0e06      	lsrs	r6, r0, #24
 8003970:	0a0b      	lsrs	r3, r1, #8
 8003972:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8003976:	910c      	str	r1, [sp, #48]	; 0x30
 8003978:	920d      	str	r2, [sp, #52]	; 0x34
 800397a:	f88c 0007 	strb.w	r0, [ip, #7]
 800397e:	f88c 100b 	strb.w	r1, [ip, #11]
 8003982:	0e08      	lsrs	r0, r1, #24
 8003984:	f88c 200f 	strb.w	r2, [ip, #15]
 8003988:	0a11      	lsrs	r1, r2, #8
 800398a:	45a1      	cmp	r9, r4
 800398c:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8003990:	f10a 0a10 	add.w	sl, sl, #16
 8003994:	f88c 5006 	strb.w	r5, [ip, #6]
 8003998:	f88c 7005 	strb.w	r7, [ip, #5]
 800399c:	f88c 6004 	strb.w	r6, [ip, #4]
 80039a0:	f88c 300a 	strb.w	r3, [ip, #10]
 80039a4:	f88c 0008 	strb.w	r0, [ip, #8]
 80039a8:	f88c 100e 	strb.w	r1, [ip, #14]
 80039ac:	f88c 800d 	strb.w	r8, [ip, #13]
 80039b0:	f88c 200c 	strb.w	r2, [ip, #12]
 80039b4:	f47f af73 	bne.w	800389e <AES_CTR_Encrypt_Append+0x3b2>
 80039b8:	46d9      	mov	r9, fp
 80039ba:	9d01      	ldr	r5, [sp, #4]
 80039bc:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80039c0:	e61f      	b.n	8003602 <AES_CTR_Encrypt_Append+0x116>
 80039c2:	2500      	movs	r5, #0
 80039c4:	9501      	str	r5, [sp, #4]
 80039c6:	e61c      	b.n	8003602 <AES_CTR_Encrypt_Append+0x116>
 80039c8:	2200      	movs	r2, #0
 80039ca:	4613      	mov	r3, r2
 80039cc:	e6db      	b.n	8003786 <AES_CTR_Encrypt_Append+0x29a>
 80039ce:	bf00      	nop

080039d0 <AES_CTR_Encrypt_Finish>:
 80039d0:	b140      	cbz	r0, 80039e4 <AES_CTR_Encrypt_Finish+0x14>
 80039d2:	b13a      	cbz	r2, 80039e4 <AES_CTR_Encrypt_Finish+0x14>
 80039d4:	7901      	ldrb	r1, [r0, #4]
 80039d6:	2300      	movs	r3, #0
 80039d8:	f041 0102 	orr.w	r1, r1, #2
 80039dc:	7101      	strb	r1, [r0, #4]
 80039de:	4618      	mov	r0, r3
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	4770      	bx	lr
 80039e4:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop

080039ec <AES_CTR_Decrypt_Init>:
 80039ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f0:	4604      	mov	r4, r0
 80039f2:	b170      	cbz	r0, 8003a12 <AES_CTR_Decrypt_Init+0x26>
 80039f4:	b169      	cbz	r1, 8003a12 <AES_CTR_Decrypt_Init+0x26>
 80039f6:	b162      	cbz	r2, 8003a12 <AES_CTR_Decrypt_Init+0x26>
 80039f8:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
 80039fc:	f02c 0308 	bic.w	r3, ip, #8
 8003a00:	2b10      	cmp	r3, #16
 8003a02:	d00a      	beq.n	8003a1a <AES_CTR_Decrypt_Init+0x2e>
 8003a04:	f1bc 0f20 	cmp.w	ip, #32
 8003a08:	d007      	beq.n	8003a1a <AES_CTR_Decrypt_Init+0x2e>
 8003a0a:	f640 401f 	movw	r0, #3103	; 0xc1f
 8003a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a12:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8003a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a1a:	6920      	ldr	r0, [r4, #16]
 8003a1c:	1e43      	subs	r3, r0, #1
 8003a1e:	2b0f      	cmp	r3, #15
 8003a20:	d8f3      	bhi.n	8003a0a <AES_CTR_Decrypt_Init+0x1e>
 8003a22:	f894 8004 	ldrb.w	r8, [r4, #4]
 8003a26:	60e2      	str	r2, [r4, #12]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f028 0506 	bic.w	r5, r8, #6
 8003a2e:	7125      	strb	r5, [r4, #4]
 8003a30:	461e      	mov	r6, r3
 8003a32:	6163      	str	r3, [r4, #20]
 8003a34:	61a3      	str	r3, [r4, #24]
 8003a36:	61e3      	str	r3, [r4, #28]
 8003a38:	6223      	str	r3, [r4, #32]
 8003a3a:	461d      	mov	r5, r3
 8003a3c:	e002      	b.n	8003a44 <AES_CTR_Decrypt_Init+0x58>
 8003a3e:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 8003a42:	6976      	ldr	r6, [r6, #20]
 8003a44:	f003 0703 	and.w	r7, r3, #3
 8003a48:	f812 9003 	ldrb.w	r9, [r2, r3]
 8003a4c:	f1c7 0703 	rsb	r7, r7, #3
 8003a50:	00ff      	lsls	r7, r7, #3
 8003a52:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8003a56:	3301      	adds	r3, #1
 8003a58:	fa09 f707 	lsl.w	r7, r9, r7
 8003a5c:	433e      	orrs	r6, r7
 8003a5e:	4283      	cmp	r3, r0
 8003a60:	616e      	str	r6, [r5, #20]
 8003a62:	ea4f 05a3 	mov.w	r5, r3, asr #2
 8003a66:	d1ea      	bne.n	8003a3e <AES_CTR_Decrypt_Init+0x52>
 8003a68:	f018 0801 	ands.w	r8, r8, #1
 8003a6c:	d109      	bne.n	8003a82 <AES_CTR_Decrypt_Init+0x96>
 8003a6e:	60a1      	str	r1, [r4, #8]
 8003a70:	4608      	mov	r0, r1
 8003a72:	4662      	mov	r2, ip
 8003a74:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8003a78:	f7ff fb42 	bl	8003100 <AES_keyschedule_enc>
 8003a7c:	4640      	mov	r0, r8
 8003a7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a82:	2000      	movs	r0, #0
 8003a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003a88 <AES_CTR_Decrypt_Append>:
 8003a88:	f7ff bd30 	b.w	80034ec <AES_CTR_Encrypt_Append>

08003a8c <AES_CTR_Decrypt_Finish>:
 8003a8c:	b140      	cbz	r0, 8003aa0 <AES_CTR_Decrypt_Finish+0x14>
 8003a8e:	b13a      	cbz	r2, 8003aa0 <AES_CTR_Decrypt_Finish+0x14>
 8003a90:	7901      	ldrb	r1, [r0, #4]
 8003a92:	2300      	movs	r3, #0
 8003a94:	f041 0102 	orr.w	r1, r1, #2
 8003a98:	7101      	strb	r1, [r0, #4]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	4770      	bx	lr
 8003aa0:	f44f 6042 	mov.w	r0, #3104	; 0xc20
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop

08003aa8 <__libc_init_array>:
 8003aa8:	b570      	push	{r4, r5, r6, lr}
 8003aaa:	4d0d      	ldr	r5, [pc, #52]	; (8003ae0 <__libc_init_array+0x38>)
 8003aac:	4c0d      	ldr	r4, [pc, #52]	; (8003ae4 <__libc_init_array+0x3c>)
 8003aae:	1b64      	subs	r4, r4, r5
 8003ab0:	10a4      	asrs	r4, r4, #2
 8003ab2:	2600      	movs	r6, #0
 8003ab4:	42a6      	cmp	r6, r4
 8003ab6:	d109      	bne.n	8003acc <__libc_init_array+0x24>
 8003ab8:	4d0b      	ldr	r5, [pc, #44]	; (8003ae8 <__libc_init_array+0x40>)
 8003aba:	4c0c      	ldr	r4, [pc, #48]	; (8003aec <__libc_init_array+0x44>)
 8003abc:	f000 f820 	bl	8003b00 <_init>
 8003ac0:	1b64      	subs	r4, r4, r5
 8003ac2:	10a4      	asrs	r4, r4, #2
 8003ac4:	2600      	movs	r6, #0
 8003ac6:	42a6      	cmp	r6, r4
 8003ac8:	d105      	bne.n	8003ad6 <__libc_init_array+0x2e>
 8003aca:	bd70      	pop	{r4, r5, r6, pc}
 8003acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ad0:	4798      	blx	r3
 8003ad2:	3601      	adds	r6, #1
 8003ad4:	e7ee      	b.n	8003ab4 <__libc_init_array+0xc>
 8003ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ada:	4798      	blx	r3
 8003adc:	3601      	adds	r6, #1
 8003ade:	e7f2      	b.n	8003ac6 <__libc_init_array+0x1e>
 8003ae0:	08004104 	.word	0x08004104
 8003ae4:	08004104 	.word	0x08004104
 8003ae8:	08004104 	.word	0x08004104
 8003aec:	08004108 	.word	0x08004108

08003af0 <memset>:
 8003af0:	4402      	add	r2, r0
 8003af2:	4603      	mov	r3, r0
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d100      	bne.n	8003afa <memset+0xa>
 8003af8:	4770      	bx	lr
 8003afa:	f803 1b01 	strb.w	r1, [r3], #1
 8003afe:	e7f9      	b.n	8003af4 <memset+0x4>

08003b00 <_init>:
 8003b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b02:	bf00      	nop
 8003b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b06:	bc08      	pop	{r3}
 8003b08:	469e      	mov	lr, r3
 8003b0a:	4770      	bx	lr

08003b0c <_fini>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr
